{
  "address": "0x11c8dC3DcA87E8205ec01e6d79Be9442d31701d3",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "BLOCKS_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract VToken[]",
              "name": "markets",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shortfall",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.AccountLimits",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "comptrollerAddress",
          "type": "address"
        }
      ],
      "name": "getDailyXVS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract GovernorAlpha",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "eta",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "string[]",
              "name": "signatures",
              "type": "string[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "forVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "againstVotes",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canceled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "executed",
              "type": "bool"
            }
          ],
          "internalType": "struct VenusLens.GovProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract GovernorAlpha",
          "name": "governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "proposalIds",
          "type": "uint256[]"
        }
      ],
      "name": "getGovReceipts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct VenusLens.GovReceipt[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract XVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "blockNumbers",
          "type": "uint32[]"
        }
      ],
      "name": "getVenusVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VenusVotes[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract XVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getXVSBalanceMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct VenusLens.XVSBalanceMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract XVS",
          "name": "xvs",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getXVSBalanceMetadataExt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocated",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.XVSBalanceMetadataExt",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "distributorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalRewards",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "vTokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct VenusLens.PendingReward[]",
              "name": "pendingRewards",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct VenusLens.RewardSummary",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vTokenBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenBalances",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "vTokenBalancesAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowBalanceCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOfUnderlying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAllowance",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenBalances[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "vTokenMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusSupplySpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusBorrowSpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailySupplyXvs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyBorrowXvs",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "vTokenMetadataAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateCurrent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRatePerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBorrows",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCash",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isListed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "underlyingAssetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusSupplySpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "venusBorrowSpeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailySupplyXvs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dailyBorrowXvs",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract VToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "vTokenUnderlyingPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenUnderlyingPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "contract VToken[]",
          "name": "vTokens",
          "type": "address[]"
        }
      ],
      "name": "vTokenUnderlyingPriceAll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "underlyingPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct VenusLens.VTokenUnderlyingPrice[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb3851fab7fec7d29be309403d4921f9fc298d243b7a946f3e98eadc41ded4bd",
  "receipt": {
    "to": null,
    "from": "0x8BDA9f9E1fEF0DFd404Fef338D9fE4c543d172e1",
    "contractAddress": "0x11c8dC3DcA87E8205ec01e6d79Be9442d31701d3",
    "transactionIndex": 1,
    "gasUsed": "4371940",
    "logsBloom": "0x
    "blockHash": "0x88202efa2208235c205b8bd39bb13628b82d7bd0bc804b7139ea4a7eecde6d0a",
    "transactionHash": "0xeb3851fab7fec7d29be309403d4921f9fc298d243b7a946f3e98eadc41ded4bd",
    "logs": [],
    "blockNumber": 26856298,
    "cumulativeGasUsed": "4472008",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "22d3f87b80f71a5ad7eb4adf16d8988d",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"contract VToken[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortfall\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.AccountLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptrollerAddress\",\"type\":\"address\"}],\"name\":\"getDailyXVS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct VenusLens.GovProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract GovernorAlpha\",\"name\":\"governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"proposalIds\",\"type\":\"uint256[]\"}],\"name\":\"getGovReceipts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct VenusLens.GovReceipt[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract XVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"blockNumbers\",\"type\":\"uint32[]\"}],\"name\":\"getVenusVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VenusVotes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract XVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getXVSBalanceMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct VenusLens.XVSBalanceMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract XVS\",\"name\":\"xvs\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getXVSBalanceMetadataExt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.XVSBalanceMetadataExt\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.PendingReward[]\",\"name\":\"pendingRewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct VenusLens.RewardSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenBalances\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vTokenBalancesAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalanceCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfUnderlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"vTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusBorrowSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailySupplyXvs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyBorrowXvs\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"vTokenMetadataAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCash\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"venusBorrowSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailySupplyXvs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyBorrowXvs\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract VToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"vTokenUnderlyingPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenUnderlyingPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract VToken[]\",\"name\":\"vTokens\",\"type\":\"address[]\"}],\"name\":\"vTokenUnderlyingPriceAll\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusLens.VTokenUnderlyingPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getAccountLimits(address,address)\":{\"params\":{\"account\":\"Address of the account to query\",\"comptroller\":\"Address of comptroller proxy\"},\"return\":\"Struct with markets user has entered, liquidity, and shortfall of the account\"},\"getDailyXVS(address,address)\":{\"params\":{\"account\":\"Address of account to fetch the daily XVS distribution\",\"comptrollerAddress\":\"Address of the comptroller proxy\"},\"return\":\"Amount of XVS distributed daily to an account\"},\"getGovProposals(address,uint256[])\":{\"params\":{\"governor\":\"Address of governor contract\",\"proposalIds\":\"Array of proposal Ids\"},\"return\":\"GovProposal structs for provided proposal Ids\"},\"getGovReceipts(address,address,uint256[])\":{\"params\":{\"governor\":\"Governor address\",\"proposalIds\":\"Array of proposal ids\",\"voter\":\"Voter address\"},\"return\":\"Array of governor receipts\"},\"getVenusVotes(address,address,uint32[])\":{\"params\":{\"account\":\"Address of the account\",\"blockNumbers\":\"Array of blocks to query\",\"xvs\":\"XVS contract address\"},\"return\":\"Array of VenusVotes structs with block number and vote count\"},\"getXVSBalanceMetadata(address,address)\":{\"params\":{\"account\":\"Account address\",\"xvs\":\"XVS contract address\"},\"return\":\"Struct with XVS balance and voter details\"},\"getXVSBalanceMetadataExt(address,address,address)\":{\"params\":{\"account\":\"Account address\",\"comptroller\":\"Comptroller proxy contract address\",\"xvs\":\"XVS contract address\"},\"return\":\"Struct with XVS balance and voter details and XVS allocation\"},\"pendingRewards(address,address)\":{\"params\":{\"comptroller\":\"Address of the comptroller\",\"holder\":\"Account to query pending XVS\"},\"return\":\"Reward object contraining the totalRewards and pending rewards for each market\"},\"vTokenBalances(address,address)\":{\"params\":{\"account\":\"Account address to fetch the balance of\",\"vToken\":\"Address of the token to check the balance of\"},\"return\":\"VTokenBalances with token balance information\"},\"vTokenBalancesAll(address[],address)\":{\"params\":{\"account\":\"Account address to fetch the balance of\",\"vTokens\":\"Addresses of the tokens to check the balance of\"},\"return\":\"VTokenBalances Array with token balance information\"},\"vTokenMetadata(address)\":{\"params\":{\"vToken\":\"The address of the vToken to fetch VTokenMetadata\"},\"return\":\"VTokenMetadata struct with vToken supply and borrow information.\"},\"vTokenMetadataAll(address[])\":{\"params\":{\"vTokens\":\"Array of vToken addresses to fetch VTokenMetadata\"},\"return\":\"Array of structs with vToken supply and borrow information.\"},\"vTokenUnderlyingPrice(address)\":{\"params\":{\"vToken\":\"address of the vToken\"},\"return\":\"response struct with underlyingPrice info of vToken\"},\"vTokenUnderlyingPriceAll(address[])\":{\"params\":{\"vTokens\":\"Array of vToken addresses\"},\"return\":\"array of response structs with underlying price information of vTokens\"}}},\"userdoc\":{\"methods\":{\"getAccountLimits(address,address)\":{\"notice\":\"Query the account liquidity and shortfall of an account\"},\"getDailyXVS(address,address)\":{\"notice\":\"Get amount of XVS distributed daily to an account\"},\"getGovProposals(address,uint256[])\":{\"notice\":\"Query the details of a list of governance proposals\"},\"getGovReceipts(address,address,uint256[])\":{\"notice\":\"Query the voting information of an account for a list of governance proposals\"},\"getVenusVotes(address,address,uint32[])\":{\"notice\":\"Query the voting power for an account at a specific list of block numbers\"},\"getXVSBalanceMetadata(address,address)\":{\"notice\":\"Query the XVSBalance info of an account\"},\"getXVSBalanceMetadataExt(address,address,address)\":{\"notice\":\"Query the XVSBalance extended info of an account\"},\"pendingRewards(address,address)\":{\"notice\":\"Calculate the total XVS tokens pending and accrued by a user account\"},\"vTokenBalances(address,address)\":{\"notice\":\"Get the current vToken balance (outstanding borrows) for an account\"},\"vTokenBalancesAll(address[],address)\":{\"notice\":\"Get the current vToken balances (outstanding borrows) for all vTokens on an account\"},\"vTokenMetadata(address)\":{\"notice\":\"Query the metadata of a vToken by its address\"},\"vTokenMetadataAll(address[])\":{\"notice\":\"Get VTokenMetadata for an array of vToken addresses\"},\"vTokenUnderlyingPrice(address)\":{\"notice\":\"Get the price for the underlying asset of a vToken\"},\"vTokenUnderlyingPriceAll(address[])\":{\"notice\":\"Query the underlyingPrice of an array of vTokens\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Lens/VenusLens.sol\":\"VenusLens\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Comptroller/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport \\\"../Oracle/PriceOracle.sol\\\";\\n\\ncontract ComptrollerInterfaceG1 {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n}\\n\\ncontract ComptrollerInterfaceG2 is ComptrollerInterfaceG1 {\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n}\\n\\ncontract ComptrollerInterfaceG3 is ComptrollerInterfaceG2 {\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n}\\n\\ncontract ComptrollerInterfaceG4 is ComptrollerInterfaceG3 {\\n    function getXVSAddress() public view returns (address);\\n}\\n\\ncontract ComptrollerInterface is ComptrollerInterfaceG4 {\\n    function markets(address) external view returns (bool, uint);\\n\\n    function oracle() external view returns (PriceOracle);\\n\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\n\\n    function claimVenus(address) external;\\n\\n    function venusAccrued(address) external view returns (uint);\\n\\n    function venusSupplySpeeds(address) external view returns (uint);\\n\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n\\n    function getAllMarkets() external view returns (VToken[] memory);\\n\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n\\n    function venusInitialIndex() external view returns (uint224);\\n\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n}\\n\\ninterface IVAIVault {\\n    function updatePendingRewards() external;\\n}\\n\\ninterface IComptroller {\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    /*** Treasury Data ***/\\n    function treasuryAddress() external view returns (address);\\n\\n    function treasuryPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa4d058a1e1332e05178c3942ec1c044cb388b29ae374b6bba92c86fcd6846e71\"},\"contracts/Governance/GovernorAlpha.sol\":{\"content\":\"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\ncontract GovernorAlpha {\\n    /// @notice The name of this contract\\n    string public constant name = \\\"Venus Governor Alpha\\\";\\n\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n    function quorumVotes() public pure returns (uint) {\\n        return 600000e18;\\n    } // 600,000 = 2% of XVS\\n\\n    /// @notice The number of votes required in order for a voter to become a proposer\\n    function proposalThreshold() public pure returns (uint) {\\n        return 300000e18;\\n    } // 300,000 = 1% of XVS\\n\\n    /// @notice The maximum number of actions that can be included in a proposal\\n    function proposalMaxOperations() public pure returns (uint) {\\n        return 10;\\n    } // 10 actions\\n\\n    /// @notice The delay before voting on a proposal may take place, once proposed\\n    function votingDelay() public pure returns (uint) {\\n        return 1;\\n    } // 1 block\\n\\n    /// @notice The duration of voting on a proposal, in blocks\\n    function votingPeriod() public pure returns (uint) {\\n        return (60 * 60 * 24 * 3) / 3;\\n    } // ~3 days in blocks (assuming 3s blocks)\\n\\n    /// @notice The address of the Venus Protocol Timelock\\n    TimelockInterface public timelock;\\n\\n    /// @notice The address of the Venus governance token\\n    XVSInterface public xvs;\\n\\n    /// @notice The address of the Governor Guardian\\n    address public guardian;\\n\\n    /// @notice The total number of proposals\\n    uint public proposalCount;\\n\\n    struct Proposal {\\n        /// @notice Unique id for looking up a proposal\\n        uint id;\\n        /// @notice Creator of the proposal\\n        address proposer;\\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint eta;\\n        /// @notice the ordered list of target addresses for calls to be made\\n        address[] targets;\\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n        uint[] values;\\n        /// @notice The ordered list of function signatures to be called\\n        string[] signatures;\\n        /// @notice The ordered list of calldata to be passed to each call\\n        bytes[] calldatas;\\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\n        uint startBlock;\\n        /// @notice The block at which voting ends: votes must be cast prior to this block\\n        uint endBlock;\\n        /// @notice Current number of votes in favor of this proposal\\n        uint forVotes;\\n        /// @notice Current number of votes in opposition to this proposal\\n        uint againstVotes;\\n        /// @notice Flag marking whether the proposal has been canceled\\n        bool canceled;\\n        /// @notice Flag marking whether the proposal has been executed\\n        bool executed;\\n        /// @notice Receipts of ballots for the entire set of voters\\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        /// @notice Whether or not a vote has been cast\\n        bool hasVoted;\\n        /// @notice Whether or not the voter supports the proposal\\n        bool support;\\n        /// @notice The number of votes the voter had, which were cast\\n        uint96 votes;\\n    }\\n\\n    /// @notice Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /// @notice The official record of all proposals ever proposed\\n    mapping(uint => Proposal) public proposals;\\n\\n    /// @notice The latest proposal for each proposer\\n    mapping(address => uint) public latestProposalIds;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\n\\n    /// @notice An event emitted when a new proposal is created\\n    event ProposalCreated(\\n        uint id,\\n        address proposer,\\n        address[] targets,\\n        uint[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint startBlock,\\n        uint endBlock,\\n        string description\\n    );\\n\\n    /// @notice An event emitted when a vote has been cast on a proposal\\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\\n\\n    /// @notice An event emitted when a proposal has been canceled\\n    event ProposalCanceled(uint id);\\n\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\n    event ProposalQueued(uint id, uint eta);\\n\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\n    event ProposalExecuted(uint id);\\n\\n    constructor(address timelock_, address xvs_, address guardian_) public {\\n        timelock = TimelockInterface(timelock_);\\n        xvs = XVSInterface(xvs_);\\n        guardian = guardian_;\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public returns (uint) {\\n        require(\\n            xvs.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(),\\n            \\\"GovernorAlpha::propose: proposer votes below proposal threshold\\\"\\n        );\\n        require(\\n            targets.length == values.length &&\\n                targets.length == signatures.length &&\\n                targets.length == calldatas.length,\\n            \\\"GovernorAlpha::propose: proposal function information arity mismatch\\\"\\n        );\\n        require(targets.length != 0, \\\"GovernorAlpha::propose: must provide actions\\\");\\n        require(targets.length <= proposalMaxOperations(), \\\"GovernorAlpha::propose: too many actions\\\");\\n\\n        uint latestProposalId = latestProposalIds[msg.sender];\\n        if (latestProposalId != 0) {\\n            ProposalState proposersLatestProposalState = state(latestProposalId);\\n            require(\\n                proposersLatestProposalState != ProposalState.Active,\\n                \\\"GovernorAlpha::propose: found an already active proposal\\\"\\n            );\\n            require(\\n                proposersLatestProposalState != ProposalState.Pending,\\n                \\\"GovernorAlpha::propose: found an already pending proposal\\\"\\n            );\\n        }\\n\\n        uint startBlock = add256(block.number, votingDelay());\\n        uint endBlock = add256(startBlock, votingPeriod());\\n\\n        proposalCount++;\\n        Proposal memory newProposal = Proposal({\\n            id: proposalCount,\\n            proposer: msg.sender,\\n            eta: 0,\\n            targets: targets,\\n            values: values,\\n            signatures: signatures,\\n            calldatas: calldatas,\\n            startBlock: startBlock,\\n            endBlock: endBlock,\\n            forVotes: 0,\\n            againstVotes: 0,\\n            canceled: false,\\n            executed: false\\n        });\\n\\n        proposals[newProposal.id] = newProposal;\\n        latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n        emit ProposalCreated(\\n            newProposal.id,\\n            msg.sender,\\n            targets,\\n            values,\\n            signatures,\\n            calldatas,\\n            startBlock,\\n            endBlock,\\n            description\\n        );\\n        return newProposal.id;\\n    }\\n\\n    function queue(uint proposalId) public {\\n        require(\\n            state(proposalId) == ProposalState.Succeeded,\\n            \\\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        uint eta = add256(block.timestamp, timelock.delay());\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\n        }\\n        proposal.eta = eta;\\n        emit ProposalQueued(proposalId, eta);\\n    }\\n\\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\\n        require(\\n            !timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))),\\n            \\\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\\\"\\n        );\\n        timelock.queueTransaction(target, value, signature, data, eta);\\n    }\\n\\n    function execute(uint proposalId) public payable {\\n        require(\\n            state(proposalId) == ProposalState.Queued,\\n            \\\"GovernorAlpha::execute: proposal can only be executed if it is queued\\\"\\n        );\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            timelock.executeTransaction.value(proposal.values[i])(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    function cancel(uint proposalId) public {\\n        ProposalState state = state(proposalId);\\n        require(state != ProposalState.Executed, \\\"GovernorAlpha::cancel: cannot cancel executed proposal\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        require(\\n            msg.sender == guardian ||\\n                xvs.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(),\\n            \\\"GovernorAlpha::cancel: proposer above threshold\\\"\\n        );\\n\\n        proposal.canceled = true;\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            timelock.cancelTransaction(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n\\n        emit ProposalCanceled(proposalId);\\n    }\\n\\n    function getActions(\\n        uint proposalId\\n    )\\n        public\\n        view\\n        returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas)\\n    {\\n        Proposal storage p = proposals[proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\\n        return proposals[proposalId].receipts[voter];\\n    }\\n\\n    function state(uint proposalId) public view returns (ProposalState) {\\n        require(proposalCount >= proposalId && proposalId > 0, \\\"GovernorAlpha::state: invalid proposal id\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        } else if (block.number <= proposal.startBlock) {\\n            return ProposalState.Pending;\\n        } else if (block.number <= proposal.endBlock) {\\n            return ProposalState.Active;\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\\n            return ProposalState.Defeated;\\n        } else if (proposal.eta == 0) {\\n            return ProposalState.Succeeded;\\n        } else if (proposal.executed) {\\n            return ProposalState.Executed;\\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\n            return ProposalState.Expired;\\n        } else {\\n            return ProposalState.Queued;\\n        }\\n    }\\n\\n    function castVote(uint proposalId, bool support) public {\\n        return _castVote(msg.sender, proposalId, support);\\n    }\\n\\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"GovernorAlpha::castVoteBySig: invalid signature\\\");\\n        return _castVote(signatory, proposalId, support);\\n    }\\n\\n    function _castVote(address voter, uint proposalId, bool support) internal {\\n        require(state(proposalId) == ProposalState.Active, \\\"GovernorAlpha::_castVote: voting is closed\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[voter];\\n        require(receipt.hasVoted == false, \\\"GovernorAlpha::_castVote: voter already voted\\\");\\n        uint96 votes = xvs.getPriorVotes(voter, proposal.startBlock);\\n\\n        if (support) {\\n            proposal.forVotes = add256(proposal.forVotes, votes);\\n        } else {\\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.support = support;\\n        receipt.votes = votes;\\n\\n        emit VoteCast(voter, proposalId, support, votes);\\n    }\\n\\n    function __acceptAdmin() public {\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__acceptAdmin: sender must be gov guardian\\\");\\n        timelock.acceptAdmin();\\n    }\\n\\n    function __abdicate() public {\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__abdicate: sender must be gov guardian\\\");\\n        guardian = address(0);\\n    }\\n\\n    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\\\");\\n        timelock.queueTransaction(address(timelock), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\n    }\\n\\n    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\n        require(msg.sender == guardian, \\\"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\\\");\\n        timelock.executeTransaction(address(timelock), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\n    }\\n\\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\\ninterface TimelockInterface {\\n    function delay() external view returns (uint);\\n\\n    function GRACE_PERIOD() external view returns (uint);\\n\\n    function acceptAdmin() external;\\n\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n    function queueTransaction(\\n        address target,\\n        uint value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint eta\\n    ) external returns (bytes32);\\n\\n    function cancelTransaction(\\n        address target,\\n        uint value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint eta\\n    ) external;\\n\\n    function executeTransaction(\\n        address target,\\n        uint value,\\n        string calldata signature,\\n        bytes calldata data,\\n        uint eta\\n    ) external payable returns (bytes memory);\\n}\\n\\ninterface XVSInterface {\\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\\n}\\n\",\"keccak256\":\"0x9b3959b209c99146aedda6bdcc0791744f8decf56a3172c7022a3366341b5a34\"},\"contracts/InterestRateModels/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Venus's InterestRateModel Interface\\n * @author Venus\\n */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves,\\n        uint reserveFactorMantissa\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x7896290ed5d98f1b744676c0cf5cb0bc656befdd8a79ae4cd2d9f90d83aaa52d\"},\"contracts/Lens/VenusLens.sol\":{\"content\":\"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Tokens/VTokens/VBep20.sol\\\";\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport \\\"../Oracle/PriceOracle.sol\\\";\\nimport \\\"../Tokens/EIP20Interface.sol\\\";\\nimport \\\"../Governance/GovernorAlpha.sol\\\";\\nimport \\\"../Tokens/XVS/XVS.sol\\\";\\nimport \\\"../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../Utils/SafeMath.sol\\\";\\n\\ncontract VenusLens is ExponentialNoError {\\n    using SafeMath for uint;\\n\\n    /// @notice Blocks Per Day\\n    uint public constant BLOCKS_PER_DAY = 28800;\\n\\n    struct VenusMarketState {\\n        uint224 index;\\n        uint32 block;\\n    }\\n\\n    struct VTokenMetadata {\\n        address vToken;\\n        uint exchangeRateCurrent;\\n        uint supplyRatePerBlock;\\n        uint borrowRatePerBlock;\\n        uint reserveFactorMantissa;\\n        uint totalBorrows;\\n        uint totalReserves;\\n        uint totalSupply;\\n        uint totalCash;\\n        bool isListed;\\n        uint collateralFactorMantissa;\\n        address underlyingAssetAddress;\\n        uint vTokenDecimals;\\n        uint underlyingDecimals;\\n        uint venusSupplySpeed;\\n        uint venusBorrowSpeed;\\n        uint dailySupplyXvs;\\n        uint dailyBorrowXvs;\\n    }\\n\\n    struct VTokenBalances {\\n        address vToken;\\n        uint balanceOf;\\n        uint borrowBalanceCurrent;\\n        uint balanceOfUnderlying;\\n        uint tokenBalance;\\n        uint tokenAllowance;\\n    }\\n\\n    struct VTokenUnderlyingPrice {\\n        address vToken;\\n        uint underlyingPrice;\\n    }\\n\\n    struct AccountLimits {\\n        VToken[] markets;\\n        uint liquidity;\\n        uint shortfall;\\n    }\\n\\n    struct GovReceipt {\\n        uint proposalId;\\n        bool hasVoted;\\n        bool support;\\n        uint96 votes;\\n    }\\n\\n    struct GovProposal {\\n        uint proposalId;\\n        address proposer;\\n        uint eta;\\n        address[] targets;\\n        uint[] values;\\n        string[] signatures;\\n        bytes[] calldatas;\\n        uint startBlock;\\n        uint endBlock;\\n        uint forVotes;\\n        uint againstVotes;\\n        bool canceled;\\n        bool executed;\\n    }\\n\\n    struct XVSBalanceMetadata {\\n        uint balance;\\n        uint votes;\\n        address delegate;\\n    }\\n\\n    struct XVSBalanceMetadataExt {\\n        uint balance;\\n        uint votes;\\n        address delegate;\\n        uint allocated;\\n    }\\n\\n    struct VenusVotes {\\n        uint blockNumber;\\n        uint votes;\\n    }\\n\\n    struct ClaimVenusLocalVariables {\\n        uint totalRewards;\\n        uint224 borrowIndex;\\n        uint32 borrowBlock;\\n        uint224 supplyIndex;\\n        uint32 supplyBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for Pending Rewards for per market\\n     */\\n    struct PendingReward {\\n        address vTokenAddress;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Struct for Reward of a single reward token.\\n     */\\n    struct RewardSummary {\\n        address distributorAddress;\\n        address rewardTokenAddress;\\n        uint256 totalRewards;\\n        PendingReward[] pendingRewards;\\n    }\\n\\n    /**\\n     * @notice Query the metadata of a vToken by its address\\n     * @param vToken The address of the vToken to fetch VTokenMetadata\\n     * @return VTokenMetadata struct with vToken supply and borrow information.\\n     */\\n    function vTokenMetadata(VToken vToken) public returns (VTokenMetadata memory) {\\n        uint exchangeRateCurrent = vToken.exchangeRateCurrent();\\n        address comptrollerAddress = address(vToken.comptroller());\\n        ComptrollerInterface comptroller = ComptrollerInterface(comptrollerAddress);\\n        (bool isListed, uint collateralFactorMantissa) = comptroller.markets(address(vToken));\\n        address underlyingAssetAddress;\\n        uint underlyingDecimals;\\n\\n        if (compareStrings(vToken.symbol(), \\\"vBNB\\\")) {\\n            underlyingAssetAddress = address(0);\\n            underlyingDecimals = 18;\\n        } else {\\n            VBep20 vBep20 = VBep20(address(vToken));\\n            underlyingAssetAddress = vBep20.underlying();\\n            underlyingDecimals = EIP20Interface(vBep20.underlying()).decimals();\\n        }\\n\\n        uint venusSupplySpeedPerBlock = comptroller.venusSupplySpeeds(address(vToken));\\n        uint venusBorrowSpeedPerBlock = comptroller.venusBorrowSpeeds(address(vToken));\\n\\n        return\\n            VTokenMetadata({\\n                vToken: address(vToken),\\n                exchangeRateCurrent: exchangeRateCurrent,\\n                supplyRatePerBlock: vToken.supplyRatePerBlock(),\\n                borrowRatePerBlock: vToken.borrowRatePerBlock(),\\n                reserveFactorMantissa: vToken.reserveFactorMantissa(),\\n                totalBorrows: vToken.totalBorrows(),\\n                totalReserves: vToken.totalReserves(),\\n                totalSupply: vToken.totalSupply(),\\n                totalCash: vToken.getCash(),\\n                isListed: isListed,\\n                collateralFactorMantissa: collateralFactorMantissa,\\n                underlyingAssetAddress: underlyingAssetAddress,\\n                vTokenDecimals: vToken.decimals(),\\n                underlyingDecimals: underlyingDecimals,\\n                venusSupplySpeed: venusSupplySpeedPerBlock,\\n                venusBorrowSpeed: venusBorrowSpeedPerBlock,\\n                dailySupplyXvs: venusSupplySpeedPerBlock.mul(BLOCKS_PER_DAY),\\n                dailyBorrowXvs: venusBorrowSpeedPerBlock.mul(BLOCKS_PER_DAY)\\n            });\\n    }\\n\\n    /**\\n     * @notice Get VTokenMetadata for an array of vToken addresses\\n     * @param vTokens Array of vToken addresses to fetch VTokenMetadata\\n     * @return Array of structs with vToken supply and borrow information.\\n     */\\n    function vTokenMetadataAll(VToken[] calldata vTokens) external returns (VTokenMetadata[] memory) {\\n        uint vTokenCount = vTokens.length;\\n        VTokenMetadata[] memory res = new VTokenMetadata[](vTokenCount);\\n        for (uint i = 0; i < vTokenCount; i++) {\\n            res[i] = vTokenMetadata(vTokens[i]);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Get amount of XVS distributed daily to an account\\n     * @param account Address of account to fetch the daily XVS distribution\\n     * @param comptrollerAddress Address of the comptroller proxy\\n     * @return Amount of XVS distributed daily to an account\\n     */\\n    function getDailyXVS(address payable account, address comptrollerAddress) external returns (uint) {\\n        ComptrollerInterface comptrollerInstance = ComptrollerInterface(comptrollerAddress);\\n        VToken[] memory vTokens = comptrollerInstance.getAllMarkets();\\n        uint dailyXvsPerAccount = 0;\\n\\n        for (uint i = 0; i < vTokens.length; i++) {\\n            VToken vToken = vTokens[i];\\n            if (!compareStrings(vToken.symbol(), \\\"vUST\\\") && !compareStrings(vToken.symbol(), \\\"vLUNA\\\")) {\\n                VTokenMetadata memory metaDataItem = vTokenMetadata(vToken);\\n\\n                //get balanceOfUnderlying and borrowBalanceCurrent from vTokenBalance\\n                VTokenBalances memory vTokenBalanceInfo = vTokenBalances(vToken, account);\\n\\n                VTokenUnderlyingPrice memory underlyingPriceResponse = vTokenUnderlyingPrice(vToken);\\n                uint underlyingPrice = underlyingPriceResponse.underlyingPrice;\\n                Exp memory underlyingPriceMantissa = Exp({ mantissa: underlyingPrice });\\n\\n                //get dailyXvsSupplyMarket\\n                uint dailyXvsSupplyMarket = 0;\\n                uint supplyInUsd = mul_ScalarTruncate(underlyingPriceMantissa, vTokenBalanceInfo.balanceOfUnderlying);\\n                uint marketTotalSupply = (metaDataItem.totalSupply.mul(metaDataItem.exchangeRateCurrent)).div(1e18);\\n                uint marketTotalSupplyInUsd = mul_ScalarTruncate(underlyingPriceMantissa, marketTotalSupply);\\n\\n                if (marketTotalSupplyInUsd > 0) {\\n                    dailyXvsSupplyMarket = (metaDataItem.dailySupplyXvs.mul(supplyInUsd)).div(marketTotalSupplyInUsd);\\n                }\\n\\n                //get dailyXvsBorrowMarket\\n                uint dailyXvsBorrowMarket = 0;\\n                uint borrowsInUsd = mul_ScalarTruncate(underlyingPriceMantissa, vTokenBalanceInfo.borrowBalanceCurrent);\\n                uint marketTotalBorrowsInUsd = mul_ScalarTruncate(underlyingPriceMantissa, metaDataItem.totalBorrows);\\n\\n                if (marketTotalBorrowsInUsd > 0) {\\n                    dailyXvsBorrowMarket = (metaDataItem.dailyBorrowXvs.mul(borrowsInUsd)).div(marketTotalBorrowsInUsd);\\n                }\\n\\n                dailyXvsPerAccount += dailyXvsSupplyMarket + dailyXvsBorrowMarket;\\n            }\\n        }\\n\\n        return dailyXvsPerAccount;\\n    }\\n\\n    /**\\n     * @notice Get the current vToken balance (outstanding borrows) for an account\\n     * @param vToken Address of the token to check the balance of\\n     * @param account Account address to fetch the balance of\\n     * @return VTokenBalances with token balance information\\n     */\\n    function vTokenBalances(VToken vToken, address payable account) public returns (VTokenBalances memory) {\\n        uint balanceOf = vToken.balanceOf(account);\\n        uint borrowBalanceCurrent = vToken.borrowBalanceCurrent(account);\\n        uint balanceOfUnderlying = vToken.balanceOfUnderlying(account);\\n        uint tokenBalance;\\n        uint tokenAllowance;\\n\\n        if (compareStrings(vToken.symbol(), \\\"vBNB\\\")) {\\n            tokenBalance = account.balance;\\n            tokenAllowance = account.balance;\\n        } else {\\n            VBep20 vBep20 = VBep20(address(vToken));\\n            EIP20Interface underlying = EIP20Interface(vBep20.underlying());\\n            tokenBalance = underlying.balanceOf(account);\\n            tokenAllowance = underlying.allowance(account, address(vToken));\\n        }\\n\\n        return\\n            VTokenBalances({\\n                vToken: address(vToken),\\n                balanceOf: balanceOf,\\n                borrowBalanceCurrent: borrowBalanceCurrent,\\n                balanceOfUnderlying: balanceOfUnderlying,\\n                tokenBalance: tokenBalance,\\n                tokenAllowance: tokenAllowance\\n            });\\n    }\\n\\n    /**\\n     * @notice Get the current vToken balances (outstanding borrows) for all vTokens on an account\\n     * @param vTokens Addresses of the tokens to check the balance of\\n     * @param account Account address to fetch the balance of\\n     * @return VTokenBalances Array with token balance information\\n     */\\n    function vTokenBalancesAll(\\n        VToken[] calldata vTokens,\\n        address payable account\\n    ) external returns (VTokenBalances[] memory) {\\n        uint vTokenCount = vTokens.length;\\n        VTokenBalances[] memory res = new VTokenBalances[](vTokenCount);\\n        for (uint i = 0; i < vTokenCount; i++) {\\n            res[i] = vTokenBalances(vTokens[i], account);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Get the price for the underlying asset of a vToken\\n     * @param vToken address of the vToken\\n     * @return response struct with underlyingPrice info of vToken\\n     */\\n    function vTokenUnderlyingPrice(VToken vToken) public view returns (VTokenUnderlyingPrice memory) {\\n        ComptrollerInterface comptroller = ComptrollerInterface(address(vToken.comptroller()));\\n        PriceOracle priceOracle = comptroller.oracle();\\n\\n        return\\n            VTokenUnderlyingPrice({ vToken: address(vToken), underlyingPrice: priceOracle.getUnderlyingPrice(vToken) });\\n    }\\n\\n    /**\\n     * @notice Query the underlyingPrice of an array of vTokens\\n     * @param vTokens Array of vToken addresses\\n     * @return array of response structs with underlying price information of vTokens\\n     */\\n    function vTokenUnderlyingPriceAll(\\n        VToken[] calldata vTokens\\n    ) external view returns (VTokenUnderlyingPrice[] memory) {\\n        uint vTokenCount = vTokens.length;\\n        VTokenUnderlyingPrice[] memory res = new VTokenUnderlyingPrice[](vTokenCount);\\n        for (uint i = 0; i < vTokenCount; i++) {\\n            res[i] = vTokenUnderlyingPrice(vTokens[i]);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Query the account liquidity and shortfall of an account\\n     * @param comptroller Address of comptroller proxy\\n     * @param account Address of the account to query\\n     * @return Struct with markets user has entered, liquidity, and shortfall of the account\\n     */\\n    function getAccountLimits(\\n        ComptrollerInterface comptroller,\\n        address account\\n    ) public view returns (AccountLimits memory) {\\n        (uint errorCode, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(account);\\n        require(errorCode == 0, \\\"account liquidity error\\\");\\n\\n        return AccountLimits({ markets: comptroller.getAssetsIn(account), liquidity: liquidity, shortfall: shortfall });\\n    }\\n\\n    /**\\n     * @notice Query the voting information of an account for a list of governance proposals\\n     * @param governor Governor address\\n     * @param voter Voter address\\n     * @param proposalIds Array of proposal ids\\n     * @return Array of governor receipts\\n     */\\n    function getGovReceipts(\\n        GovernorAlpha governor,\\n        address voter,\\n        uint[] memory proposalIds\\n    ) public view returns (GovReceipt[] memory) {\\n        uint proposalCount = proposalIds.length;\\n        GovReceipt[] memory res = new GovReceipt[](proposalCount);\\n        for (uint i = 0; i < proposalCount; i++) {\\n            GovernorAlpha.Receipt memory receipt = governor.getReceipt(proposalIds[i], voter);\\n            res[i] = GovReceipt({\\n                proposalId: proposalIds[i],\\n                hasVoted: receipt.hasVoted,\\n                support: receipt.support,\\n                votes: receipt.votes\\n            });\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Given a GovProposal struct, fetches and sets proposal data\\n     * @param res GovernProposal struct\\n     * @param governor Governor address\\n     * @param proposalId Id of a proposal\\n     */\\n    function setProposal(GovProposal memory res, GovernorAlpha governor, uint proposalId) internal view {\\n        (\\n            ,\\n            address proposer,\\n            uint eta,\\n            uint startBlock,\\n            uint endBlock,\\n            uint forVotes,\\n            uint againstVotes,\\n            bool canceled,\\n            bool executed\\n        ) = governor.proposals(proposalId);\\n        res.proposalId = proposalId;\\n        res.proposer = proposer;\\n        res.eta = eta;\\n        res.startBlock = startBlock;\\n        res.endBlock = endBlock;\\n        res.forVotes = forVotes;\\n        res.againstVotes = againstVotes;\\n        res.canceled = canceled;\\n        res.executed = executed;\\n    }\\n\\n    /**\\n     * @notice Query the details of a list of governance proposals\\n     * @param governor Address of governor contract\\n     * @param proposalIds Array of proposal Ids\\n     * @return GovProposal structs for provided proposal Ids\\n     */\\n    function getGovProposals(\\n        GovernorAlpha governor,\\n        uint[] calldata proposalIds\\n    ) external view returns (GovProposal[] memory) {\\n        GovProposal[] memory res = new GovProposal[](proposalIds.length);\\n        for (uint i = 0; i < proposalIds.length; i++) {\\n            (\\n                address[] memory targets,\\n                uint[] memory values,\\n                string[] memory signatures,\\n                bytes[] memory calldatas\\n            ) = governor.getActions(proposalIds[i]);\\n            res[i] = GovProposal({\\n                proposalId: 0,\\n                proposer: address(0),\\n                eta: 0,\\n                targets: targets,\\n                values: values,\\n                signatures: signatures,\\n                calldatas: calldatas,\\n                startBlock: 0,\\n                endBlock: 0,\\n                forVotes: 0,\\n                againstVotes: 0,\\n                canceled: false,\\n                executed: false\\n            });\\n            setProposal(res[i], governor, proposalIds[i]);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Query the XVSBalance info of an account\\n     * @param xvs XVS contract address\\n     * @param account Account address\\n     * @return Struct with XVS balance and voter details\\n     */\\n    function getXVSBalanceMetadata(XVS xvs, address account) external view returns (XVSBalanceMetadata memory) {\\n        return\\n            XVSBalanceMetadata({\\n                balance: xvs.balanceOf(account),\\n                votes: uint256(xvs.getCurrentVotes(account)),\\n                delegate: xvs.delegates(account)\\n            });\\n    }\\n\\n    /**\\n     * @notice Query the XVSBalance extended info of an account\\n     * @param xvs XVS contract address\\n     * @param comptroller Comptroller proxy contract address\\n     * @param account Account address\\n     * @return Struct with XVS balance and voter details and XVS allocation\\n     */\\n    function getXVSBalanceMetadataExt(\\n        XVS xvs,\\n        ComptrollerInterface comptroller,\\n        address account\\n    ) external returns (XVSBalanceMetadataExt memory) {\\n        uint balance = xvs.balanceOf(account);\\n        comptroller.claimVenus(account);\\n        uint newBalance = xvs.balanceOf(account);\\n        uint accrued = comptroller.venusAccrued(account);\\n        uint total = add_(accrued, newBalance, \\\"sum xvs total\\\");\\n        uint allocated = sub_(total, balance, \\\"sub allocated\\\");\\n\\n        return\\n            XVSBalanceMetadataExt({\\n                balance: balance,\\n                votes: uint256(xvs.getCurrentVotes(account)),\\n                delegate: xvs.delegates(account),\\n                allocated: allocated\\n            });\\n    }\\n\\n    /**\\n     * @notice Query the voting power for an account at a specific list of block numbers\\n     * @param xvs XVS contract address\\n     * @param account Address of the account\\n     * @param blockNumbers Array of blocks to query\\n     * @return Array of VenusVotes structs with block number and vote count\\n     */\\n    function getVenusVotes(\\n        XVS xvs,\\n        address account,\\n        uint32[] calldata blockNumbers\\n    ) external view returns (VenusVotes[] memory) {\\n        VenusVotes[] memory res = new VenusVotes[](blockNumbers.length);\\n        for (uint i = 0; i < blockNumbers.length; i++) {\\n            res[i] = VenusVotes({\\n                blockNumber: uint256(blockNumbers[i]),\\n                votes: uint256(xvs.getPriorVotes(account, blockNumbers[i]))\\n            });\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Queries the current supply to calculate rewards for an account\\n     * @param supplyState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param comptroller Address of the comptroller proxy\\n     */\\n    function updateVenusSupplyIndex(\\n        VenusMarketState memory supplyState,\\n        address vToken,\\n        ComptrollerInterface comptroller\\n    ) internal view {\\n        uint supplySpeed = comptroller.venusSupplySpeeds(vToken);\\n        uint blockNumber = block.number;\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint supplyTokens = VToken(vToken).totalSupply();\\n            uint venusAccrued = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0 ? fraction(venusAccrued, supplyTokens) : Double({ mantissa: 0 });\\n            Double memory index = add_(Double({ mantissa: supplyState.index }), ratio);\\n            supplyState.index = safe224(index.mantissa, \\\"new index overflows\\\");\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        } else if (deltaBlocks > 0) {\\n            supplyState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Queries the current borrow to calculate rewards for an account\\n     * @param borrowState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param comptroller Address of the comptroller proxy\\n     */\\n    function updateVenusBorrowIndex(\\n        VenusMarketState memory borrowState,\\n        address vToken,\\n        Exp memory marketBorrowIndex,\\n        ComptrollerInterface comptroller\\n    ) internal view {\\n        uint borrowSpeed = comptroller.venusBorrowSpeeds(vToken);\\n        uint blockNumber = block.number;\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint borrowAmount = div_(VToken(vToken).totalBorrows(), marketBorrowIndex);\\n            uint venusAccrued = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0 ? fraction(venusAccrued, borrowAmount) : Double({ mantissa: 0 });\\n            Double memory index = add_(Double({ mantissa: borrowState.index }), ratio);\\n            borrowState.index = safe224(index.mantissa, \\\"new index overflows\\\");\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        } else if (deltaBlocks > 0) {\\n            borrowState.block = safe32(blockNumber, \\\"block number overflows\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate available rewards for an account's supply\\n     * @param supplyState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param supplier Address of the account supplying\\n     * @param comptroller Address of the comptroller proxy\\n     * @return Undistributed earned XVS from supplies\\n     */\\n    function distributeSupplierVenus(\\n        VenusMarketState memory supplyState,\\n        address vToken,\\n        address supplier,\\n        ComptrollerInterface comptroller\\n    ) internal view returns (uint) {\\n        Double memory supplyIndex = Double({ mantissa: supplyState.index });\\n        Double memory supplierIndex = Double({ mantissa: comptroller.venusSupplierIndex(vToken, supplier) });\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            supplierIndex.mantissa = comptroller.venusInitialIndex();\\n        }\\n\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n        uint supplierTokens = VToken(vToken).balanceOf(supplier);\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n        return supplierDelta;\\n    }\\n\\n    /**\\n     * @dev Calculate available rewards for an account's borrows\\n     * @param borrowState VenusMarketState struct\\n     * @param vToken Address of a vToken\\n     * @param borrower Address of the account borrowing\\n     * @param marketBorrowIndex vToken Borrow index\\n     * @param comptroller Address of the comptroller proxy\\n     * @return Undistributed earned XVS from borrows\\n     */\\n    function distributeBorrowerVenus(\\n        VenusMarketState memory borrowState,\\n        address vToken,\\n        address borrower,\\n        Exp memory marketBorrowIndex,\\n        ComptrollerInterface comptroller\\n    ) internal view returns (uint) {\\n        Double memory borrowIndex = Double({ mantissa: borrowState.index });\\n        Double memory borrowerIndex = Double({ mantissa: comptroller.venusBorrowerIndex(vToken, borrower) });\\n        if (borrowerIndex.mantissa > 0) {\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n            uint borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n            return borrowerDelta;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate the total XVS tokens pending and accrued by a user account\\n     * @param holder Account to query pending XVS\\n     * @param comptroller Address of the comptroller\\n     * @return Reward object contraining the totalRewards and pending rewards for each market\\n     */\\n    function pendingRewards(\\n        address holder,\\n        ComptrollerInterface comptroller\\n    ) external view returns (RewardSummary memory) {\\n        VToken[] memory vTokens = comptroller.getAllMarkets();\\n        ClaimVenusLocalVariables memory vars;\\n        RewardSummary memory rewardSummary;\\n        rewardSummary.distributorAddress = address(comptroller);\\n        rewardSummary.rewardTokenAddress = comptroller.getXVSAddress();\\n        rewardSummary.totalRewards = comptroller.venusAccrued(holder);\\n        rewardSummary.pendingRewards = new PendingReward[](vTokens.length);\\n        for (uint i; i < vTokens.length; ++i) {\\n            (vars.borrowIndex, vars.borrowBlock) = comptroller.venusBorrowState(address(vTokens[i]));\\n            VenusMarketState memory borrowState = VenusMarketState({\\n                index: vars.borrowIndex,\\n                block: vars.borrowBlock\\n            });\\n\\n            (vars.supplyIndex, vars.supplyBlock) = comptroller.venusSupplyState(address(vTokens[i]));\\n            VenusMarketState memory supplyState = VenusMarketState({\\n                index: vars.supplyIndex,\\n                block: vars.supplyBlock\\n            });\\n\\n            Exp memory borrowIndex = Exp({ mantissa: vTokens[i].borrowIndex() });\\n\\n            PendingReward memory marketReward;\\n            marketReward.vTokenAddress = address(vTokens[i]);\\n\\n            updateVenusBorrowIndex(borrowState, address(vTokens[i]), borrowIndex, comptroller);\\n            uint256 borrowReward = distributeBorrowerVenus(\\n                borrowState,\\n                address(vTokens[i]),\\n                holder,\\n                borrowIndex,\\n                comptroller\\n            );\\n\\n            updateVenusSupplyIndex(supplyState, address(vTokens[i]), comptroller);\\n            uint256 supplyReward = distributeSupplierVenus(supplyState, address(vTokens[i]), holder, comptroller);\\n\\n            marketReward.amount = add_(borrowReward, supplyReward);\\n            rewardSummary.pendingRewards[i] = marketReward;\\n        }\\n        return rewardSummary;\\n    }\\n\\n    // utilities\\n    /**\\n     * @notice Compares if two strings are equal\\n     * @param a First string to compare\\n     * @param b Second string to compare\\n     * @return Boolean depending on if the strings are equal\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x19a48b012b2c0ced5a18c6108dd1c741822845cf09e894988acdd62b779fe479\"},\"contracts/Oracle/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * @notice Get the underlying price of a vToken asset\\n     * @param vToken The vToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(VToken vToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x0f68d0e07decba8fb9a77df1659170f310b487cc0b650f53ca6aa55ed62b28de\"},\"contracts/Tokens/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title BEP 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return success whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x7e89ffa9c0d432c4db8bd5388ff68e33934dcdb1d038d74bbed3b2fdae3eb532\"},\"contracts/Tokens/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of BEP20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance of the owner\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the BEP-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the BEP-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x05a3a7d5ab47de3964c95d706dcc18fe7583b1d064dbb74808c0f2774f347afa\"},\"contracts/Tokens/VTokens/VBep20.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./VToken.sol\\\";\\n\\n/**\\n * @title Venus's VBep20 Contract\\n * @notice vTokens which wrap an EIP-20 underlying\\n * @author Venus\\n */\\ncontract VBep20 is VToken, VBep20Interface {\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    // @custom:event Emits Mint event\\n    function mint(uint mintAmount) external returns (uint) {\\n        (uint err, ) = mintInternal(mintAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    // @custom:event Emits MintBehalf event\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint) {\\n        (uint err, ) = mintBehalfInternal(receiver, mintAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Redeem event on success\\n    // @custom:event Emits Transfer event on success\\n    // @custom:event Emits RedeemFee when fee is charged by the treasury\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        return redeemInternal(redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Redeem event on success\\n    // @custom:event Emits Transfer event on success\\n    // @custom:event Emits RedeemFee when fee is charged by the treasury\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        return redeemUnderlyingInternal(redeemAmount);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Borrow event on success\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        return borrowInternal(borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits RepayBorrow event on success\\n    function repayBorrow(uint repayAmount) external returns (uint) {\\n        (uint err, ) = repayBorrowInternal(repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits RepayBorrow event on success\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\\n        (uint err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emit LiquidateBorrow event on success\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint) {\\n        (uint err, ) = liquidateBorrowInternal(borrower, repayAmount, vTokenCollateral);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice The sender adds to reserves.\\n     * @param addAmount The amount of underlying tokens to add as reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesAdded event\\n    function _addReserves(uint addAmount) external returns (uint) {\\n        return _addReservesInternal(addAmount);\\n    }\\n\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ BEP-20 name of this token\\n     * @param symbol_ BEP-20 symbol of this token\\n     * @param decimals_ BEP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        address underlying_,\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        // VToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        EIP20Interface(underlying).totalSupply();\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n     *      This will revert due to insufficient balance or insufficient allowance.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     *\\n     *      Note: This wrapper safely handles non-standard BEP-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint) {\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n        token.transferFrom(from, address(this), amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard BEP-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant BEP-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant BEP-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n     *      it is >= amount, this should not revert in normal conditions.\\n     *\\n     *      Note: This wrapper safely handles non-standard BEP-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferOut(address payable to, uint amount) internal {\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        token.transfer(to, amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard BEP-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint BEP-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant BEP-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint) {\\n        EIP20Interface token = EIP20Interface(underlying);\\n        return token.balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf7a833f2fb1338d20a7afadbb1d4feb4da4c426d36d24e3e2fd5c468d7984c3d\"},\"contracts/Tokens/VTokens/VToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../Utils/ErrorReporter.sol\\\";\\nimport \\\"../../Utils/Exponential.sol\\\";\\nimport \\\"../../Tokens/EIP20Interface.sol\\\";\\nimport \\\"../../Tokens/EIP20NonStandardInterface.sol\\\";\\nimport \\\"../../InterestRateModels/InterestRateModel.sol\\\";\\nimport \\\"./VTokenInterfaces.sol\\\";\\n\\n/**\\n * @title Venus's vToken Contract\\n * @notice Abstract base for vTokens\\n * @author Venus\\n */\\ncontract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\n    struct MintLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    struct RedeemLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    // @custom:event Emits Approval event on successful approve\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewPendingAdmin event with old and new admin addresses\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewAdmin event on successful acceptance\\n    // @custom:event Emits NewPendingAdmin event with null new pending admin\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using `_setReserveFactorFresh`\\n     * @dev Admin function to accrue interest and set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewReserveFactor event\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesReduced event\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint vTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), vTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this vToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this vToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    // @custom:event Emits AccrueInterest event\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({ mantissa: reserveFactorMantissa }),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewComptroller event\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel The new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Transfers `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srvTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srvTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mint failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The address of the account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mintBehalf failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param payer The address of the account which is paying the underlying token\\n     * @param receiver The address of the account which is receiving vToken\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\n        require(receiver != address(0), \\\"receiver is invalid\\\");\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[receiver] = vars.accountTokensNew;\\n\\n        /* We emit a MintBehalf event, and a Transfer event */\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice User redeems vTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({ mantissa: vars.exchangeRateMantissa }),\\n                redeemTokensIn\\n            );\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                revert(\\\"math error\\\");\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({ mantissa: vars.exchangeRateMantissa })\\n            );\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                revert(\\\"math error\\\");\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n\\n        uint feeAmount;\\n        uint remainedAmount;\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\n            (vars.mathErr, feeAmount) = mulUInt(\\n                vars.redeemAmount,\\n                IComptroller(address(comptroller)).treasuryPercent()\\n            );\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                revert(\\\"math error\\\");\\n            }\\n\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                revert(\\\"math error\\\");\\n            }\\n\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                revert(\\\"math error\\\");\\n            }\\n\\n            doTransferOut(address(uint160(IComptroller(address(comptroller)).treasuryAddress())), feeAmount);\\n\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\n        } else {\\n            remainedAmount = vars.redeemAmount;\\n        }\\n\\n        doTransferOut(redeemer, remainedAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Users borrow assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer The account paying off the borrow\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount\\n        );\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(vTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another vToken.\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (requires fresh interest accrual)\\n     * @dev Admin function to set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and adds reserves by transferring from `msg.sender`\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return Tuple of error code and the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the vToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Tuple of error code and calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n}\\n\",\"keccak256\":\"0x6ba9bbd2f60f5cc0508e174789e11f8f25be6e10ae7423768fddf6f3baca7abe\"},\"contracts/Tokens/VTokens/VTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../InterestRateModels/InterestRateModel.sol\\\";\\n\\ncontract VTokenStorage {\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-vToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract VTokenInterface is VTokenStorage {\\n    /**\\n     * @notice Indicator that this is a vToken contract (for inspection)\\n     */\\n    bool public constant isVToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\n     */\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed and fee is transferred\\n     */\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin has been updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n\\n    function totalBorrowsCurrent() external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _acceptAdmin() external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view returns (uint);\\n\\n    function supplyRatePerBlock() external view returns (uint);\\n\\n    function getCash() external view returns (uint);\\n\\n    function exchangeRateCurrent() public returns (uint);\\n\\n    function accrueInterest() public returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n\\n    function borrowBalanceStored(address account) public view returns (uint);\\n\\n    function exchangeRateStored() public view returns (uint);\\n}\\n\\ncontract VBep20Storage {\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract VBep20Interface is VBep20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract VDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract VDelegatorInterface is VDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) public;\\n}\\n\\ncontract VDelegateInterface is VDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0x4a8c8d9ff20e32a97dd51ba4ac9607b45ac5a1f25d09864c4f8ca2120167a69f\"},\"contracts/Tokens/XVS/XVS.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Utils/Tokenlock.sol\\\";\\n\\ncontract XVS is Tokenlock {\\n    /// @notice BEP-20 token name for this token\\n    string public constant name = \\\"Venus\\\";\\n\\n    /// @notice BEP-20 token symbol for this token\\n    string public constant symbol = \\\"XVS\\\";\\n\\n    /// @notice BEP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint public constant totalSupply = 30000000e18; // 30 million XVS\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard BEP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard BEP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new XVS token\\n     * @param account The initial account to grant all the tokens\\n     */\\n    constructor(address account) public {\\n        balances[account] = uint96(totalSupply);\\n        emit Transfer(address(0), account, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external validLock returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"XVS::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external validLock returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"XVS::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external validLock returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"XVS::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(\\n                spenderAllowance,\\n                amount,\\n                \\\"XVS::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public validLock {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public validLock {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"XVS::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"XVS::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"XVS::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"XVS::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"XVS::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"XVS::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"XVS::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"XVS::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"XVS::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"XVS::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"XVS::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2 ** 96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x3f49a827ff4b36c07ad573116306a303f6531bd78fc1aa9494be58156e1250ee\"},\"contracts/Utils/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Careful Math\\n * @author Venus\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x5bd84fb723641b98d0559272323b90ce42595f025af89cfb214d8c064c9ee3c3\"},\"contracts/Utils/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        INSUFFICIENT_BALANCE_FOR_VAI\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        SET_VAI_MINT_RATE_CHECK,\\n        SET_VAICONTROLLER_OWNER_CHECK,\\n        SET_MINTED_VAI_REJECTION,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        TOKEN_PRICE_ERROR\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\n        REPAY_VAI_FRESHNESS_CHECK,\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_FEE_CALCULATION_FAILED\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract VAIControllerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        PRICE_ERROR,\\n        MATH_ERROR,\\n        INSUFFICIENT_BALANCE_FOR_VAI\\n    }\\n\\n    enum FailureInfo {\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        VAI_MINT_REJECTION,\\n        VAI_BURN_REJECTION,\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_FEE_CALCULATION_FAILED,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8a135a2c35a0545ce6f20f065ae43e71a24ab3b132598d379310684580924d\"},\"contracts/Utils/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Venus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x92a68e9f6de3a70b103aa0ddb68faa8e60c443b1268e03853d5054171fe8e290\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0x237e63d9ad2bf232d70f854b8867a465913cab4d2033d295ec7736bf618ca302\"},\"contracts/Utils/Owned.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract Owned {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Should be owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        owner = newOwner;\\n        emit OwnershipTransferred(owner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x1564e2130341a86ccc19f26e017eb4ccc6bb090200985f3cd74b72dc8de1daa5\"},\"contracts/Utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(a, b, \\\"SafeMath: addition overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9431fd772ed4abc038cdfe9ce6c0066897bd1685ad45848748d1952935d5b8ef\"},\"contracts/Utils/Tokenlock.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./Owned.sol\\\";\\n\\ncontract Tokenlock is Owned {\\n    /// @notice Indicates if token is locked\\n    uint8 internal isLocked = 0;\\n\\n    event Freezed();\\n    event UnFreezed();\\n\\n    modifier validLock() {\\n        require(isLocked == 0, \\\"Token is locked\\\");\\n        _;\\n    }\\n\\n    function freeze() public onlyOwner {\\n        isLocked = 1;\\n\\n        emit Freezed();\\n    }\\n\\n    function unfreeze() public onlyOwner {\\n        isLocked = 0;\\n\\n        emit UnFreezed();\\n    }\\n}\\n\",\"keccak256\":\"0x2fa851e9baece8d2ed1a985688d3f9ecfe44f6975728d809683594ebf00f6e47\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614e26806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063995ed99f11610097578063e09744c611610066578063e09744c61461024b578063e0a67f111461026b578063f40c27771461028b578063fbd88b46146102ab576100f5565b8063995ed99f146101d8578063aa5dbd23146101f8578063b312423914610218578063b814a8a614610238576100f5565b80637c84e3b3116100d35780637c84e3b3146101585780637dd8f6d91461017857806380ac82281461019857806396994869146101b8576100f5565b80631f884fdf146100fa5780636bb987fe146101235780637c51b64214610138575b600080fd5b61010d610108366004613baf565b6102cb565b60405161011a9190614b85565b60405180910390f35b61012b610367565b60405161011a9190614c4f565b61014b610146366004613bf0565b61036d565b60405161011a9190614b63565b61016b610166366004613d94565b610410565b60405161011a9190614c25565b61018b610186366004613cc6565b6105a2565b60405161011a9190614be6565b6101ab6101a6366004613ac3565b6106fa565b60405161011a9190614bf7565b6101cb6101c6366004613d3f565b610c2e565b60405161011a9190614b41565b6101eb6101e6366004613ce5565b610dea565b60405161011a9190614b52565b61020b610206366004613d94565b610f44565b60405161011a9190614c16565b61022b610226366004613cc6565b61180e565b60405161011a9190614c08565b61012b610246366004613a89565b611bae565b61025e610259366004613e19565b611edb565b60405161011a9190614c33565b61027e610279366004613baf565b612261565b60405161011a9190614b74565b61029e610299366004613cc6565b6122f2565b60405161011a9190614c41565b6102be6102b9366004613db2565b61249b565b60405161011a9190614b96565b6040805182815260208084028201019091526060908290829082801561030b57816020015b6102f86133be565b8152602001906001900390816102f05790505b50905060005b8281101561035c5761033d86868381811061032857fe5b90506020020160206101669190810190613d94565b82828151811061034957fe5b6020908102919091010152600101610311565b509150505b92915050565b61708081565b604080518381526020808502820101909152606090839082908280156103ad57816020015b61039a6133d5565b8152602001906001900390816103925790505b50905060005b82811015610404576103e58787838181106103ca57fe5b90506020020160206103df9190810190613d94565b8661180e565b8282815181106103f157fe5b60209081029190910101526001016103b3565b509150505b9392505050565b6104186133be565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061048b9190810190613ca8565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c857600080fd5b505afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105009190810190613ca8565b90506040518060400160405280856001600160a01b03168152602001826001600160a01b031663fc57d4df876040518263ffffffff1660e01b81526004016105489190614ba7565b60206040518083038186803b15801561056057600080fd5b505afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105989190810190613efc565b9052949350505050565b6105aa613414565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b81526004016105db9190614ae1565b60606040518083038186803b1580156105f357600080fd5b505afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061062b9190810190613fde565b9250925092508260001461065a5760405162461bcd60e51b815260040161065190614bc6565b60405180910390fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc61068e8960648501614ae1565b60006040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e29190810190613c44565b81526020810193909352604090920152949350505050565b610702613435565b6060826001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561073d57600080fd5b505afa158015610751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107799190810190613c44565b905061078361345b565b61078b613435565b6001600160a01b0385168082526040805163bf32442d60e01b8152905163bf32442d91600480820192602092909190829003018186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108069190810190613a6b565b6001600160a01b039081166020830152604051638a7dc16560e01b815290861690638a7dc1659061083b908990600401614ae1565b60206040518083038186803b15801561085357600080fd5b505afa158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061088b9190810190613efc565b81604001818152505082516040519080825280602002602001820160405280156108cf57816020015b6108bc6133be565b8152602001906001900390816108b45790505b50606082015260005b8351811015610c2457856001600160a01b031663e37d4b798583815181106108fc57fe5b60200260200101516040518263ffffffff1660e01b81526004016109209190614ae1565b604080518083038186803b15801561093757600080fd5b505afa15801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061096f9190810190613ecc565b63ffffffff1660408501526001600160e01b031660208401526109906133be565b604051806040016040528085602001516001600160e01b03168152602001856040015163ffffffff168152509050866001600160a01b031663b8324c7c8684815181106109d957fe5b60200260200101516040518263ffffffff1660e01b81526004016109fd9190614ae1565b604080518083038186803b158015610a1457600080fd5b505afa158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a4c9190810190613ecc565b63ffffffff1660808601526001600160e01b03166060850152610a6d6133be565b506040805180820190915260608501516001600160e01b03168152608085015163ffffffff166020820152610aa0613489565b6040518060200160405280888681518110610ab757fe5b60200260200101516001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b2f9190810190613efc565b90529050610b3b6133be565b878581518110610b4757fe5b60209081029190910101516001600160a01b031681528751610b809085908a9088908110610b7157fe5b6020026020010151848d6125e9565b6000610ba2858a8881518110610b9257fe5b60200260200101518e868f612869565b9050610bc2848a8881518110610bb457fe5b60200260200101518d6129eb565b6000610be3858b8981518110610bd457fe5b60200260200101518f8f612c61565b9050610bef8282612e55565b60208401526060880151805184919089908110610c0857fe5b60200260200101819052505050505050508060010190506108d8565b5095945050505050565b60608083839050604051908082528060200260200182016040528015610c6e57816020015b610c5b61349c565b815260200190600190039081610c535790505b50905060005b83811015610de157606080606080896001600160a01b031663328dd9828a8a88818110610c9d57fe5b905060200201356040518263ffffffff1660e01b8152600401610cc09190614c4f565b60006040518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d149190810190613af3565b9350935093509350604051806101a001604052806000815260200160006001600160a01b03168152602001600081526020018581526020018481526020018381526020018281526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815250868681518110610d9657fe5b6020026020010181905250610dd1868681518110610db057fe5b60200260200101518b8b8b89818110610dc557fe5b90506020020135612e8b565b505060019092019150610c749050565b50949350505050565b6060600082519050606081604051908082528060200260200182016040528015610e2e57816020015b610e1b613511565b815260200190600190039081610e135790505b50905060005b8281101561040457610e44613538565b876001600160a01b031663e23a9a52878481518110610e5f57fe5b6020026020010151896040518363ffffffff1660e01b8152600401610e85929190614c5d565b60606040518083038186803b158015610e9d57600080fd5b505afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ed59190810190613e90565b90506040518060800160405280878481518110610eee57fe5b6020026020010151815260200182600001511515815260200182602001511515815260200182604001516001600160601b0316815250838381518110610f3057fe5b602090810291909101015250600101610e34565b610f4c613558565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fc19190810190613efc565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffe57600080fd5b505afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110369190810190613ca8565b604051638e8f294b60e01b8152909150819060009081906001600160a01b03841690638e8f294b9061106c908a90600401614ae1565b604080518083038186803b15801561108357600080fd5b505afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110bb9190810190613c78565b9150915060008061115c896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110fe57600080fd5b505afa158015611112573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261113a9190810190613e5c565b604051806040016040528060048152602001633b21272160e11b815250612fb1565b1561116d57506000905060126112cd565b6000899050806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ab57600080fd5b505afa1580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111e39190810190613a6b565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561121e57600080fd5b505afa158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112569190810190613a6b565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561128e57600080fd5b505afa1580156112a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c6919081019061403f565b60ff169150505b604051635dd3fc9d60e01b81526000906001600160a01b03871690635dd3fc9d906112fc908d90600401614ae1565b60206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061134c9190810190613efc565b90506000866001600160a01b031663bbb8864a8c6040518263ffffffff1660e01b815260040161137c9190614ae1565b60206040518083038186803b15801561139457600080fd5b505afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113cc9190810190613efc565b90506040518061024001604052808c6001600160a01b031681526020018a81526020018c6001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561142857600080fd5b505afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114609190810190613efc565b81526020018c6001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b15801561149e57600080fd5b505afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114d69190810190613efc565b81526020018c6001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561151457600080fd5b505afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061154c9190810190613efc565b81526020018c6001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561158a57600080fd5b505afa15801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115c29190810190613efc565b81526020018c6001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561160057600080fd5b505afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116389190810190613efc565b81526020018c6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561167657600080fd5b505afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ae9190810190613efc565b81526020018c6001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ec57600080fd5b505afa158015611700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117249190810190613efc565b81526020018715158152602001868152602001856001600160a01b031681526020018c6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561177f57600080fd5b505afa158015611793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117b7919081019061403f565b60ff1681526020018481526020018381526020018281526020016117e66170808561300a90919063ffffffff16565b81526020016117fd8361708063ffffffff61300a16565b90529b9a5050505050505050505050565b6118166133d5565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190611845908690600401614aef565b60206040518083038186803b15801561185d57600080fd5b505afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118959190810190613efc565b90506000846001600160a01b03166317bfdfbc856040518263ffffffff1660e01b81526004016118c59190614aef565b602060405180830381600087803b1580156118df57600080fd5b505af11580156118f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119179190810190613efc565b90506000856001600160a01b0316633af9e669866040518263ffffffff1660e01b81526004016119479190614aef565b602060405180830381600087803b15801561196157600080fd5b505af1158015611975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119999190810190613efc565b90506000806119da886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110fe57600080fd5b156119f45750506001600160a01b03851680319031611b71565b60008890506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3457600080fd5b505afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a6c9190810190613a6b565b6040516370a0823160e01b81529091506001600160a01b038216906370a0823190611a9b908c90600401614aef565b60206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611aeb9190810190613efc565b604051636eb1769f60e11b81529094506001600160a01b0382169063dd62ed3e90611b1c908c908e90600401614afd565b60206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b6c9190810190613efc565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b6000808290506060816001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611bef57600080fd5b505afa158015611c03573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c2b9190810190613c44565b90506000805b8251811015610c24576000838281518110611c4857fe5b60200260200101519050611cec816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611c8e57600080fd5b505afa158015611ca2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cca9190810190613e5c565b604051806040016040528060048152602001631d9554d560e21b815250612fb1565b158015611d915750611d8f816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611d3057600080fd5b505afa158015611d44573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d6c9190810190613e5c565b60405180604001604052806005815260200164764c554e4160d81b815250612fb1565b155b15611ed257611d9e613558565b611da782610f44565b9050611db16133d5565b611dbb838b61180e565b9050611dc56133be565b611dce84610410565b6020810151909150611dde613489565b604051806020016040528083815250905060008090506000611e04838760600151613044565b90506000611e3b670de0b6b3a7640000611e2f8a602001518b60e0015161300a90919063ffffffff16565b9063ffffffff61306b16565b90506000611e498583613044565b90508015611e7057611e6d81611e2f858c610200015161300a90919063ffffffff16565b93505b60008090506000611e85878b60400151613044565b90506000611e97888d60a00151613044565b90508015611ebe57611ebb81611e2f848f610220015161300a90919063ffffffff16565b92505b8287018f019e505050505050505050505050505b50600101611c31565b611ee36135f7565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611f12908690600401614ae1565b60206040518083038186803b158015611f2a57600080fd5b505afa158015611f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f629190810190613efc565b60405163adcd5fb960e01b81529091506001600160a01b0385169063adcd5fb990611f91908690600401614ae1565b600060405180830381600087803b158015611fab57600080fd5b505af1158015611fbf573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03881691506370a0823190611ff2908790600401614ae1565b60206040518083038186803b15801561200a57600080fd5b505afa15801561201e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120429190810190613efc565b90506000856001600160a01b0316638a7dc165866040518263ffffffff1660e01b81526004016120729190614ae1565b60206040518083038186803b15801561208a57600080fd5b505afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120c29190810190613efc565b905060006120f682846040518060400160405280600d81526020016c1cdd5b481e1d9cc81d1bdd185b609a1b8152506130ad565b9050600061212a82866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b8152506130d4565b905060405180608001604052808681526020018a6001600160a01b031663b4b5ea578a6040518263ffffffff1660e01b81526004016121699190614ae1565b60206040518083038186803b15801561218157600080fd5b505afa158015612195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121b9919081019061405d565b6001600160601b031681526020018a6001600160a01b031663587cde1e8a6040518263ffffffff1660e01b81526004016121f39190614ae1565b60206040518083038186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122439190810190613a6b565b6001600160a01b031681526020019190915298975050505050505050565b604080518281526020808402820101909152606090829082908280156122a157816020015b61228e613558565b8152602001906001900390816122865790505b50905060005b8281101561035c576122d38686838181106122be57fe5b90506020020160206102069190810190613d94565b8282815181106122df57fe5b60209081029190910101526001016122a7565b6122fa613628565b6040805160608101918290526370a0823160e01b909152806001600160a01b0385166370a0823161232e8660648501614ae1565b60206040518083038186803b15801561234657600080fd5b505afa15801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061237e9190810190613efc565b8152602001846001600160a01b031663b4b5ea57856040518263ffffffff1660e01b81526004016123af9190614ae1565b60206040518083038186803b1580156123c757600080fd5b505afa1580156123db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123ff919081019061405d565b6001600160601b03168152602001846001600160a01b031663587cde1e856040518263ffffffff1660e01b81526004016124399190614ae1565b60206040518083038186803b15801561245157600080fd5b505afa158015612465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124899190810190613a6b565b6001600160a01b031690529392505050565b606080838390506040519080825280602002602001820160405280156124db57816020015b6124c8613652565b8152602001906001900390816124c05790505b50905060005b83811015610c2457604051806040016040528086868481811061250057fe5b90506020020160206125159190810190614021565b63ffffffff168152602001886001600160a01b031663782d6fe18989898781811061253c57fe5b90506020020160206125519190810190614021565b6040518363ffffffff1660e01b815260040161256e929190614b26565b60206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125be919081019061405d565b6001600160601b03168152508282815181106125d657fe5b60209081029190910101526001016124e1565b604051635ddc432560e11b81526000906001600160a01b0383169063bbb8864a90612618908790600401614ae1565b60206040518083038186803b15801561263057600080fd5b505afa158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126689190810190613efc565b90506000439050600061268582886020015163ffffffff16613100565b90506000811180156126975750600083115b15612816576000612718876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156126da57600080fd5b505afa1580156126ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127129190810190613efc565b8761313a565b905060006127268386613158565b9050612730613489565b6000831161274d5760405180602001604052806000815250612757565b612757828461319a565b9050612761613489565b60408051602081019091528b516001600160e01b0316815261278390836131d8565b90506127be8160000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b8152506131fd565b6001600160e01b03168b52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b602082015261280190879061322c565b63ffffffff1660208c01525061286092505050565b8015612860576128548260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b81525061322c565b63ffffffff1660208801525b50505050505050565b6000612873613489565b50604080516020810190915286516001600160e01b03168152612894613489565b604080516020810191829052630238089760e21b909152806001600160a01b0386166308e0225c6128c98b8b60248601614b18565b60206040518083038186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129199190810190613efc565b90528051909150156129db5761292d613489565b6129378383613254565b905060006129c0896001600160a01b03166395dd91938a6040518263ffffffff1660e01b815260040161296a9190614ae1565b60206040518083038186803b15801561298257600080fd5b505afa158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129ba9190810190613efc565b8861313a565b905060006129ce8284613279565b95506129e2945050505050565b6000925050505b95945050505050565b604051635dd3fc9d60e01b81526000906001600160a01b03831690635dd3fc9d90612a1a908690600401614ae1565b60206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a6a9190810190613efc565b905060004390506000612a8782876020015163ffffffff16613100565b9050600081118015612a995750600083115b15612c0f576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad957600080fd5b505afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b119190810190613efc565b90506000612b1f8386613158565b9050612b29613489565b60008311612b465760405180602001604052806000815250612b50565b612b50828461319a565b9050612b5a613489565b60408051602081019091528a516001600160e01b03168152612b7c90836131d8565b9050612bb78160000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b8152506131fd565b6001600160e01b03168a52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612bfa90879061322c565b63ffffffff1660208b015250612c5992505050565b8015612c5957612c4d8260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b81525061322c565b63ffffffff1660208701525b505050505050565b6000612c6b613489565b50604080516020810190915285516001600160e01b03168152612c8c613489565b604080516020810191829052631068634b60e21b909152806001600160a01b0386166341a18d2c612cc18a8a60248601614b18565b60206040518083038186803b158015612cd957600080fd5b505afa158015612ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d119190810190613efc565b90528051909150158015612d255750815115155b15612da757836001600160a01b031663c5b4db556040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6357600080fd5b505afa158015612d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d9b9190810190613eae565b6001600160e01b031681525b612daf613489565b612db98383613254565b90506000876001600160a01b03166370a08231886040518263ffffffff1660e01b8152600401612de99190614ae1565b60206040518083038186803b158015612e0157600080fd5b505afa158015612e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e399190810190613efc565b90506000612e478284613279565b9a9950505050505050505050565b60006104098383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506130ad565b600080600080600080600080896001600160a01b031663013cf08b8a6040518263ffffffff1660e01b8152600401612ec39190614c4f565b6101206040518083038186803b158015612edc57600080fd5b505afa158015612ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f149190810190613f1a565b9850985098509850985098509850985050888b6000018181525050878b602001906001600160a01b031690816001600160a01b031681525050868b6040018181525050858b60e0018181525050848b610100018181525050838b610120018181525050828b610140018181525050818b610160019015159081151581525050808b6101800190151590811515815250505050505050505050505050565b600081604051602001612fc49190614ad5565b6040516020818303038152906040528051906020012083604051602001612feb9190614ad5565b6040516020818303038152906040528051906020012014905092915050565b60008261301957506000610361565b8282028284828161302657fe5b04146104095760405162461bcd60e51b815260040161065190614bd6565b600061304e613489565b61305884846132a8565b9050613063816132c9565b949350505050565b600061040983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506132d8565b60008383018285821015610de15760405162461bcd60e51b81526004016106519190614bb5565b600081848411156130f85760405162461bcd60e51b81526004016106519190614bb5565b505050900390565b60006104098383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506130d4565b600061040961315184670de0b6b3a7640000613158565b835161330f565b600061040983836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613342565b6131a2613489565b60405180602001604052806131cf6131c9866ec097ce7bc90715b34b9f1000000000613158565b8561330f565b90529392505050565b6131e0613489565b60405180602001604052806131cf85600001518560000151612e55565b600081600160e01b84106132245760405162461bcd60e51b81526004016106519190614bb5565b509192915050565b60008164010000000084106132245760405162461bcd60e51b81526004016106519190614bb5565b61325c613489565b60405180602001604052806131cf85600001518560000151613100565b60006ec097ce7bc90715b34b9f1000000000613299848460000151613158565b816132a057fe5b049392505050565b6132b0613489565b60405180602001604052806131cf856000015185613158565b51670de0b6b3a7640000900490565b600081836132f95760405162461bcd60e51b81526004016106519190614bb5565b50600083858161330557fe5b0495945050505050565b600061040983836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525061338a565b600083158061334f575082155b1561335c57506000610409565b8383028385828161336957fe5b04148390610de15760405162461bcd60e51b81526004016106519190614bb5565b600081836133ab5760405162461bcd60e51b81526004016106519190614bb5565b508284816133b557fe5b04949350505050565b604080518082019091526000808252602082015290565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600081525090565b604080516080810182526000808252602082018190529181019190915260608082015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060200160405280600081525090565b604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b60405180610240016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001600081525090565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b604051806040016040528060008152602001600081525090565b803561036181614d8d565b805161036181614d8d565b600082601f83011261369357600080fd5b81516136a66136a182614c91565b614c6b565b915081818352602084019350602081019050838560208402820111156136cb57600080fd5b60005b838110156136f757816136e18882613677565b84525060209283019291909101906001016136ce565b5050505092915050565b600082601f83011261371257600080fd5b81516137206136a182614c91565b81815260209384019390925082018360005b838110156136f75781518601613748888261395e565b8452506020928301929190910190600101613732565b60008083601f84011261377057600080fd5b5081356001600160401b0381111561378757600080fd5b60208301915083602082028301111561379f57600080fd5b9250929050565b600082601f8301126137b757600080fd5b81516137c56136a182614c91565b915081818352602084019350602081019050838560208402820111156137ea57600080fd5b60005b838110156136f7578161380088826139b8565b84525060209283019291909101906001016137ed565b600082601f83011261382757600080fd5b81516138356136a182614c91565b81815260209384019390925082018360005b838110156136f7578151860161385d888261395e565b8452506020928301929190910190600101613847565b600082601f83011261388457600080fd5b81356138926136a182614c91565b915081818352602084019350602081019050838560208402820111156138b757600080fd5b60005b838110156136f757816138cd8882613a29565b84525060209283019291909101906001016138ba565b600082601f8301126138f457600080fd5b81516139026136a182614c91565b9150818183526020840193506020810190508385602084028201111561392757600080fd5b60005b838110156136f7578161393d8882613a34565b845250602092830192919091019060010161392a565b805161036181614da4565b600082601f83011261396f57600080fd5b815161397d6136a182614cb1565b9150808252602083016020830185838301111561399957600080fd5b6139a4838284614d57565b50505092915050565b803561036181614dad565b805161036181614dad565b6000606082840312156139d557600080fd5b6139df6060614c6b565b905060006139ed8484613953565b82525060206139fe84848301613953565b6020830152506040613a1284828501613a60565b60408301525092915050565b805161036181614db6565b803561036181614dbf565b805161036181614dbf565b803561036181614dc8565b805161036181614dc8565b805161036181614dd1565b805161036181614dda565b600060208284031215613a7d57600080fd5b60006130638484613677565b60008060408385031215613a9c57600080fd5b6000613aa8858561366c565b9250506020613ab98582860161366c565b9150509250929050565b60008060408385031215613ad657600080fd5b6000613ae2858561366c565b9250506020613ab9858286016139ad565b60008060008060808587031215613b0957600080fd5b84516001600160401b03811115613b1f57600080fd5b613b2b87828801613682565b94505060208501516001600160401b03811115613b4757600080fd5b613b53878288016138e3565b93505060408501516001600160401b03811115613b6f57600080fd5b613b7b87828801613816565b92505060608501516001600160401b03811115613b9757600080fd5b613ba387828801613701565b91505092959194509250565b60008060208385031215613bc257600080fd5b82356001600160401b03811115613bd857600080fd5b613be48582860161375e565b92509250509250929050565b600080600060408486031215613c0557600080fd5b83356001600160401b03811115613c1b57600080fd5b613c278682870161375e565b93509350506020613c3a8682870161366c565b9150509250925092565b600060208284031215613c5657600080fd5b81516001600160401b03811115613c6c57600080fd5b613063848285016137a6565b60008060408385031215613c8b57600080fd5b6000613c978585613953565b9250506020613ab985828601613a34565b600060208284031215613cba57600080fd5b600061306384846139b8565b60008060408385031215613cd957600080fd5b6000613aa885856139ad565b600080600060608486031215613cfa57600080fd5b6000613d0686866139ad565b9350506020613d178682870161366c565b92505060408401356001600160401b03811115613d3357600080fd5b613c3a86828701613873565b600080600060408486031215613d5457600080fd5b6000613d6086866139ad565b93505060208401356001600160401b03811115613d7c57600080fd5b613d888682870161375e565b92509250509250925092565b600060208284031215613da657600080fd5b600061306384846139ad565b60008060008060608587031215613dc857600080fd5b6000613dd487876139ad565b9450506020613de58782880161366c565b93505060408501356001600160401b03811115613e0157600080fd5b613e0d8782880161375e565b95989497509550505050565b600080600060608486031215613e2e57600080fd5b6000613e3a86866139ad565b9350506020613e4b868287016139ad565b9250506040613c3a8682870161366c565b600060208284031215613e6e57600080fd5b81516001600160401b03811115613e8457600080fd5b6130638482850161395e565b600060608284031215613ea257600080fd5b600061306384846139c3565b600060208284031215613ec057600080fd5b60006130638484613a1e565b60008060408385031215613edf57600080fd5b6000613eeb8585613a1e565b9250506020613ab985828601613a4a565b600060208284031215613f0e57600080fd5b60006130638484613a34565b60008060008060008060008060006101208a8c031215613f3957600080fd5b6000613f458c8c613a34565b9950506020613f568c828d01613677565b9850506040613f678c828d01613a34565b9750506060613f788c828d01613a34565b9650506080613f898c828d01613a34565b95505060a0613f9a8c828d01613a34565b94505060c0613fab8c828d01613a34565b93505060e0613fbc8c828d01613953565b925050610100613fce8c828d01613953565b9150509295985092959850929598565b600080600060608486031215613ff357600080fd5b6000613fff8686613a34565b935050602061401086828701613a34565b9250506040613c3a86828701613a34565b60006020828403121561403357600080fd5b60006130638484613a3f565b60006020828403121561405157600080fd5b60006130638484613a55565b60006020828403121561406f57600080fd5b60006130638484613a60565b6000614087838361412b565b505060200190565b60006104098383614536565b6000614087838361456e565b6000610409838361466a565b60006140bf8383614789565b505060800190565b60006140d383836147d9565b505060400190565b60006140e7838361484f565b505060c00190565b60006140fb83836148bf565b50506102400190565b60006140d38383614a28565b60006140878383614aba565b61412581614d41565b82525050565b61412581614cf0565b600061413f82614cde565b6141498185614ce2565b935061415483614cd8565b8060005b8381101561418257815161416c888261407b565b975061417783614cd8565b925050600101614158565b509495945050505050565b600061419882614cde565b6141a28185614ce2565b9350836020820285016141b485614cd8565b8060005b858110156141ee57848403895281516141d1858261408f565b94506141dc83614cd8565b60209a909a01999250506001016141b8565b5091979650505050505050565b600061420682614cde565b6142108185614ce2565b935061421b83614cd8565b8060005b83811015614182578151614233888261409b565b975061423e83614cd8565b92505060010161421f565b600061425482614cde565b61425e8185614ce2565b93508360208202850161427085614cd8565b8060005b858110156141ee578484038952815161428d858261408f565b945061429883614cd8565b60209a909a0199925050600101614274565b60006142b582614cde565b6142bf8185614ce2565b9350836020820285016142d185614cd8565b8060005b858110156141ee57848403895281516142ee85826140a7565b94506142f983614cd8565b60209a909a01999250506001016142d5565b600061431682614cde565b6143208185614ce2565b935061432b83614cd8565b8060005b8381101561418257815161434388826140b3565b975061434e83614cd8565b92505060010161432f565b600061436482614cde565b61436e8185614ce2565b935061437983614cd8565b8060005b8381101561418257815161439188826140c7565b975061439c83614cd8565b92505060010161437d565b60006143b282614cde565b6143bc8185614ce2565b93506143c783614cd8565b8060005b838110156141825781516143df88826140db565b97506143ea83614cd8565b9250506001016143cb565b600061440082614cde565b61440a8185614ce2565b935061441583614cd8565b8060005b8381101561418257815161442d88826140ef565b975061443883614cd8565b925050600101614419565b600061444e82614cde565b6144588185614ce2565b935061446383614cd8565b8060005b8381101561418257815161447b88826140c7565b975061448683614cd8565b925050600101614467565b600061449c82614cde565b6144a68185614ce2565b93506144b183614cd8565b8060005b838110156141825781516144c98882614104565b97506144d483614cd8565b9250506001016144b5565b60006144ea82614cde565b6144f48185614ce2565b93506144ff83614cd8565b8060005b838110156141825781516145178882614110565b975061452283614cd8565b925050600101614503565b61412581614cfb565b600061454182614cde565b61454b8185614ce2565b935061455b818560208601614d57565b61456481614d83565b9093019392505050565b61412581614d00565b600061458282614cde565b61458c8185614ceb565b935061459c818560208601614d57565b9290920192915050565b60006145b3601783614ce2565b7f6163636f756e74206c6971756964697479206572726f72000000000000000000815260200192915050565b60006145ec602183614ce2565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b805160608084526000919084019061463a82826141fb565b915050602083015161464f6020860182614aba565b5060408301516146626040860182614aba565b509392505050565b80516000906101a084019061467f8582614aba565b506020830151614692602086018261412b565b5060408301516146a56040860182614aba565b50606083015184820360608601526146bd8282614134565b915050608083015184820360808601526146d782826144df565b91505060a083015184820360a08601526146f18282614249565b91505060c083015184820360c086015261470b828261418d565b91505060e083015161472060e0860182614aba565b50610100830151614735610100860182614aba565b5061012083015161474a610120860182614aba565b5061014083015161475f610140860182614aba565b5061016083015161477461016086018261452d565b5061018083015161466261018086018261452d565b8051608083019061479a8482614aba565b5060208201516147ad602085018261452d565b5060408201516147c0604085018261452d565b5060608201516147d36060850182614acc565b50505050565b805160408301906147ea848261412b565b5060208201516147d36020850182614aba565b80516000906080840190614811858261412b565b506020830151614824602086018261412b565b5060408301516148376040860182614aba565b50606083015184820360608601526129e28282614359565b805160c0830190614860848261412b565b5060208201516148736020850182614aba565b5060408201516148866040850182614aba565b5060608201516148996060850182614aba565b5060808201516148ac6080850182614aba565b5060a08201516147d360a0850182614aba565b80516102408301906148d1848261412b565b5060208201516148e46020850182614aba565b5060408201516148f76040850182614aba565b50606082015161490a6060850182614aba565b50608082015161491d6080850182614aba565b5060a082015161493060a0850182614aba565b5060c082015161494360c0850182614aba565b5060e082015161495660e0850182614aba565b5061010082015161496b610100850182614aba565b5061012082015161498061012085018261452d565b50610140820151614995610140850182614aba565b506101608201516149aa61016085018261412b565b506101808201516149bf610180850182614aba565b506101a08201516149d46101a0850182614aba565b506101c08201516149e96101c0850182614aba565b506101e08201516149fe6101e0850182614aba565b50610200820151614a13610200850182614aba565b506102208201516147d3610220850182614aba565b805160408301906147ea8482614aba565b80516080830190614a4a8482614aba565b506020820151614a5d6020850182614aba565b506040820151614a70604085018261412b565b5060608201516147d36060850182614aba565b80516060830190614a948482614aba565b506020820151614aa76020850182614aba565b5060408201516147d3604085018261412b565b61412581614d23565b61412581614d4c565b61412581614d35565b60006104098284614577565b60208101610361828461412b565b60208101610361828461411c565b60408101614b0b828561411c565b610409602083018461412b565b60408101614b0b828561412b565b60408101614b34828561412b565b6104096020830184614ac3565b6020808252810161040981846142aa565b60208082528101610409818461430b565b6020808252810161040981846143a7565b6020808252810161040981846143f5565b602080825281016104098184614443565b602080825281016104098184614491565b60208101610361828461456e565b602080825281016104098184614536565b60208082528101610361816145a6565b60208082528101610361816145df565b602080825281016104098184614622565b6020808252810161040981846147fd565b60c08101610361828461484f565b610240810161036182846148bf565b6040810161036182846147d9565b608081016103618284614a39565b606081016103618284614a83565b602081016103618284614aba565b60408101614b0b8285614aba565b6040518181016001600160401b0381118282101715614c8957600080fd5b604052919050565b60006001600160401b03821115614ca757600080fd5b5060209081020190565b60006001600160401b03821115614cc757600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061036182614d0b565b151590565b600061036182614cf0565b6001600160a01b031690565b6001600160e01b031690565b90565b63ffffffff1690565b60ff1690565b6001600160601b031690565b600061036182614d00565b600061036182614d26565b60005b83811015614d72578181015183820152602001614d5a565b838111156147d35750506000910152565b601f01601f191690565b614d9681614cf0565b8114614da157600080fd5b50565b614d9681614cfb565b614d9681614d00565b614d9681614d17565b614d9681614d23565b614d9681614d26565b614d9681614d2f565b614d9681614d3556fea365627a7a7231582084f00b9fa1ac40919c2b36bc24333a3258b4a23dcdfb6f07ac8e7e8a76dbfffd6c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063995ed99f11610097578063e09744c611610066578063e09744c61461024b578063e0a67f111461026b578063f40c27771461028b578063fbd88b46146102ab576100f5565b8063995ed99f146101d8578063aa5dbd23146101f8578063b312423914610218578063b814a8a614610238576100f5565b80637c84e3b3116100d35780637c84e3b3146101585780637dd8f6d91461017857806380ac82281461019857806396994869146101b8576100f5565b80631f884fdf146100fa5780636bb987fe146101235780637c51b64214610138575b600080fd5b61010d610108366004613baf565b6102cb565b60405161011a9190614b85565b60405180910390f35b61012b610367565b60405161011a9190614c4f565b61014b610146366004613bf0565b61036d565b60405161011a9190614b63565b61016b610166366004613d94565b610410565b60405161011a9190614c25565b61018b610186366004613cc6565b6105a2565b60405161011a9190614be6565b6101ab6101a6366004613ac3565b6106fa565b60405161011a9190614bf7565b6101cb6101c6366004613d3f565b610c2e565b60405161011a9190614b41565b6101eb6101e6366004613ce5565b610dea565b60405161011a9190614b52565b61020b610206366004613d94565b610f44565b60405161011a9190614c16565b61022b610226366004613cc6565b61180e565b60405161011a9190614c08565b61012b610246366004613a89565b611bae565b61025e610259366004613e19565b611edb565b60405161011a9190614c33565b61027e610279366004613baf565b612261565b60405161011a9190614b74565b61029e610299366004613cc6565b6122f2565b60405161011a9190614c41565b6102be6102b9366004613db2565b61249b565b60405161011a9190614b96565b6040805182815260208084028201019091526060908290829082801561030b57816020015b6102f86133be565b8152602001906001900390816102f05790505b50905060005b8281101561035c5761033d86868381811061032857fe5b90506020020160206101669190810190613d94565b82828151811061034957fe5b6020908102919091010152600101610311565b509150505b92915050565b61708081565b604080518381526020808502820101909152606090839082908280156103ad57816020015b61039a6133d5565b8152602001906001900390816103925790505b50905060005b82811015610404576103e58787838181106103ca57fe5b90506020020160206103df9190810190613d94565b8661180e565b8282815181106103f157fe5b60209081029190910101526001016103b3565b509150505b9392505050565b6104186133be565b6000826001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061048b9190810190613ca8565b90506000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c857600080fd5b505afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105009190810190613ca8565b90506040518060400160405280856001600160a01b03168152602001826001600160a01b031663fc57d4df876040518263ffffffff1660e01b81526004016105489190614ba7565b60206040518083038186803b15801561056057600080fd5b505afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105989190810190613efc565b9052949350505050565b6105aa613414565b6000806000856001600160a01b0316635ec88c79866040518263ffffffff1660e01b81526004016105db9190614ae1565b60606040518083038186803b1580156105f357600080fd5b505afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061062b9190810190613fde565b9250925092508260001461065a5760405162461bcd60e51b815260040161065190614bc6565b60405180910390fd5b604080516060810191829052632aff3bff60e21b909152806001600160a01b03881663abfceffc61068e8960648501614ae1565b60006040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e29190810190613c44565b81526020810193909352604090920152949350505050565b610702613435565b6060826001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561073d57600080fd5b505afa158015610751573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107799190810190613c44565b905061078361345b565b61078b613435565b6001600160a01b0385168082526040805163bf32442d60e01b8152905163bf32442d91600480820192602092909190829003018186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108069190810190613a6b565b6001600160a01b039081166020830152604051638a7dc16560e01b815290861690638a7dc1659061083b908990600401614ae1565b60206040518083038186803b15801561085357600080fd5b505afa158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061088b9190810190613efc565b81604001818152505082516040519080825280602002602001820160405280156108cf57816020015b6108bc6133be565b8152602001906001900390816108b45790505b50606082015260005b8351811015610c2457856001600160a01b031663e37d4b798583815181106108fc57fe5b60200260200101516040518263ffffffff1660e01b81526004016109209190614ae1565b604080518083038186803b15801561093757600080fd5b505afa15801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061096f9190810190613ecc565b63ffffffff1660408501526001600160e01b031660208401526109906133be565b604051806040016040528085602001516001600160e01b03168152602001856040015163ffffffff168152509050866001600160a01b031663b8324c7c8684815181106109d957fe5b60200260200101516040518263ffffffff1660e01b81526004016109fd9190614ae1565b604080518083038186803b158015610a1457600080fd5b505afa158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a4c9190810190613ecc565b63ffffffff1660808601526001600160e01b03166060850152610a6d6133be565b506040805180820190915260608501516001600160e01b03168152608085015163ffffffff166020820152610aa0613489565b6040518060200160405280888681518110610ab757fe5b60200260200101516001600160a01b031663aa5af0fd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610af757600080fd5b505afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b2f9190810190613efc565b90529050610b3b6133be565b878581518110610b4757fe5b60209081029190910101516001600160a01b031681528751610b809085908a9088908110610b7157fe5b6020026020010151848d6125e9565b6000610ba2858a8881518110610b9257fe5b60200260200101518e868f612869565b9050610bc2848a8881518110610bb457fe5b60200260200101518d6129eb565b6000610be3858b8981518110610bd457fe5b60200260200101518f8f612c61565b9050610bef8282612e55565b60208401526060880151805184919089908110610c0857fe5b60200260200101819052505050505050508060010190506108d8565b5095945050505050565b60608083839050604051908082528060200260200182016040528015610c6e57816020015b610c5b61349c565b815260200190600190039081610c535790505b50905060005b83811015610de157606080606080896001600160a01b031663328dd9828a8a88818110610c9d57fe5b905060200201356040518263ffffffff1660e01b8152600401610cc09190614c4f565b60006040518083038186803b158015610cd857600080fd5b505afa158015610cec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d149190810190613af3565b9350935093509350604051806101a001604052806000815260200160006001600160a01b03168152602001600081526020018581526020018481526020018381526020018281526020016000815260200160008152602001600081526020016000815260200160001515815260200160001515815250868681518110610d9657fe5b6020026020010181905250610dd1868681518110610db057fe5b60200260200101518b8b8b89818110610dc557fe5b90506020020135612e8b565b505060019092019150610c749050565b50949350505050565b6060600082519050606081604051908082528060200260200182016040528015610e2e57816020015b610e1b613511565b815260200190600190039081610e135790505b50905060005b8281101561040457610e44613538565b876001600160a01b031663e23a9a52878481518110610e5f57fe5b6020026020010151896040518363ffffffff1660e01b8152600401610e85929190614c5d565b60606040518083038186803b158015610e9d57600080fd5b505afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ed59190810190613e90565b90506040518060800160405280878481518110610eee57fe5b6020026020010151815260200182600001511515815260200182602001511515815260200182604001516001600160601b0316815250838381518110610f3057fe5b602090810291909101015250600101610e34565b610f4c613558565b6000826001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fc19190810190613efc565b90506000836001600160a01b0316635fe3b5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ffe57600080fd5b505afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110369190810190613ca8565b604051638e8f294b60e01b8152909150819060009081906001600160a01b03841690638e8f294b9061106c908a90600401614ae1565b604080518083038186803b15801561108357600080fd5b505afa158015611097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110bb9190810190613c78565b9150915060008061115c896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110fe57600080fd5b505afa158015611112573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261113a9190810190613e5c565b604051806040016040528060048152602001633b21272160e11b815250612fb1565b1561116d57506000905060126112cd565b6000899050806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ab57600080fd5b505afa1580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111e39190810190613a6b565b9250806001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561121e57600080fd5b505afa158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112569190810190613a6b565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561128e57600080fd5b505afa1580156112a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c6919081019061403f565b60ff169150505b604051635dd3fc9d60e01b81526000906001600160a01b03871690635dd3fc9d906112fc908d90600401614ae1565b60206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061134c9190810190613efc565b90506000866001600160a01b031663bbb8864a8c6040518263ffffffff1660e01b815260040161137c9190614ae1565b60206040518083038186803b15801561139457600080fd5b505afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113cc9190810190613efc565b90506040518061024001604052808c6001600160a01b031681526020018a81526020018c6001600160a01b031663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b15801561142857600080fd5b505afa15801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114609190810190613efc565b81526020018c6001600160a01b031663f8f9da286040518163ffffffff1660e01b815260040160206040518083038186803b15801561149e57600080fd5b505afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114d69190810190613efc565b81526020018c6001600160a01b031663173b99046040518163ffffffff1660e01b815260040160206040518083038186803b15801561151457600080fd5b505afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061154c9190810190613efc565b81526020018c6001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b15801561158a57600080fd5b505afa15801561159e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115c29190810190613efc565b81526020018c6001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561160057600080fd5b505afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116389190810190613efc565b81526020018c6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561167657600080fd5b505afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ae9190810190613efc565b81526020018c6001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ec57600080fd5b505afa158015611700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117249190810190613efc565b81526020018715158152602001868152602001856001600160a01b031681526020018c6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561177f57600080fd5b505afa158015611793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117b7919081019061403f565b60ff1681526020018481526020018381526020018281526020016117e66170808561300a90919063ffffffff16565b81526020016117fd8361708063ffffffff61300a16565b90529b9a5050505050505050505050565b6118166133d5565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190611845908690600401614aef565b60206040518083038186803b15801561185d57600080fd5b505afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118959190810190613efc565b90506000846001600160a01b03166317bfdfbc856040518263ffffffff1660e01b81526004016118c59190614aef565b602060405180830381600087803b1580156118df57600080fd5b505af11580156118f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119179190810190613efc565b90506000856001600160a01b0316633af9e669866040518263ffffffff1660e01b81526004016119479190614aef565b602060405180830381600087803b15801561196157600080fd5b505af1158015611975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119999190810190613efc565b90506000806119da886001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110fe57600080fd5b156119f45750506001600160a01b03851680319031611b71565b60008890506000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3457600080fd5b505afa158015611a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a6c9190810190613a6b565b6040516370a0823160e01b81529091506001600160a01b038216906370a0823190611a9b908c90600401614aef565b60206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611aeb9190810190613efc565b604051636eb1769f60e11b81529094506001600160a01b0382169063dd62ed3e90611b1c908c908e90600401614afd565b60206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b6c9190810190613efc565b925050505b6040805160c0810182526001600160a01b039990991689526020890195909552938701929092526060860152608085015260a08401525090919050565b6000808290506060816001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611bef57600080fd5b505afa158015611c03573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c2b9190810190613c44565b90506000805b8251811015610c24576000838281518110611c4857fe5b60200260200101519050611cec816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611c8e57600080fd5b505afa158015611ca2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cca9190810190613e5c565b604051806040016040528060048152602001631d9554d560e21b815250612fb1565b158015611d915750611d8f816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611d3057600080fd5b505afa158015611d44573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d6c9190810190613e5c565b60405180604001604052806005815260200164764c554e4160d81b815250612fb1565b155b15611ed257611d9e613558565b611da782610f44565b9050611db16133d5565b611dbb838b61180e565b9050611dc56133be565b611dce84610410565b6020810151909150611dde613489565b604051806020016040528083815250905060008090506000611e04838760600151613044565b90506000611e3b670de0b6b3a7640000611e2f8a602001518b60e0015161300a90919063ffffffff16565b9063ffffffff61306b16565b90506000611e498583613044565b90508015611e7057611e6d81611e2f858c610200015161300a90919063ffffffff16565b93505b60008090506000611e85878b60400151613044565b90506000611e97888d60a00151613044565b90508015611ebe57611ebb81611e2f848f610220015161300a90919063ffffffff16565b92505b8287018f019e505050505050505050505050505b50600101611c31565b611ee36135f7565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190611f12908690600401614ae1565b60206040518083038186803b158015611f2a57600080fd5b505afa158015611f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f629190810190613efc565b60405163adcd5fb960e01b81529091506001600160a01b0385169063adcd5fb990611f91908690600401614ae1565b600060405180830381600087803b158015611fab57600080fd5b505af1158015611fbf573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03881691506370a0823190611ff2908790600401614ae1565b60206040518083038186803b15801561200a57600080fd5b505afa15801561201e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120429190810190613efc565b90506000856001600160a01b0316638a7dc165866040518263ffffffff1660e01b81526004016120729190614ae1565b60206040518083038186803b15801561208a57600080fd5b505afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120c29190810190613efc565b905060006120f682846040518060400160405280600d81526020016c1cdd5b481e1d9cc81d1bdd185b609a1b8152506130ad565b9050600061212a82866040518060400160405280600d81526020016c1cdd5888185b1b1bd8d85d1959609a1b8152506130d4565b905060405180608001604052808681526020018a6001600160a01b031663b4b5ea578a6040518263ffffffff1660e01b81526004016121699190614ae1565b60206040518083038186803b15801561218157600080fd5b505afa158015612195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121b9919081019061405d565b6001600160601b031681526020018a6001600160a01b031663587cde1e8a6040518263ffffffff1660e01b81526004016121f39190614ae1565b60206040518083038186803b15801561220b57600080fd5b505afa15801561221f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122439190810190613a6b565b6001600160a01b031681526020019190915298975050505050505050565b604080518281526020808402820101909152606090829082908280156122a157816020015b61228e613558565b8152602001906001900390816122865790505b50905060005b8281101561035c576122d38686838181106122be57fe5b90506020020160206102069190810190613d94565b8282815181106122df57fe5b60209081029190910101526001016122a7565b6122fa613628565b6040805160608101918290526370a0823160e01b909152806001600160a01b0385166370a0823161232e8660648501614ae1565b60206040518083038186803b15801561234657600080fd5b505afa15801561235a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061237e9190810190613efc565b8152602001846001600160a01b031663b4b5ea57856040518263ffffffff1660e01b81526004016123af9190614ae1565b60206040518083038186803b1580156123c757600080fd5b505afa1580156123db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123ff919081019061405d565b6001600160601b03168152602001846001600160a01b031663587cde1e856040518263ffffffff1660e01b81526004016124399190614ae1565b60206040518083038186803b15801561245157600080fd5b505afa158015612465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124899190810190613a6b565b6001600160a01b031690529392505050565b606080838390506040519080825280602002602001820160405280156124db57816020015b6124c8613652565b8152602001906001900390816124c05790505b50905060005b83811015610c2457604051806040016040528086868481811061250057fe5b90506020020160206125159190810190614021565b63ffffffff168152602001886001600160a01b031663782d6fe18989898781811061253c57fe5b90506020020160206125519190810190614021565b6040518363ffffffff1660e01b815260040161256e929190614b26565b60206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125be919081019061405d565b6001600160601b03168152508282815181106125d657fe5b60209081029190910101526001016124e1565b604051635ddc432560e11b81526000906001600160a01b0383169063bbb8864a90612618908790600401614ae1565b60206040518083038186803b15801561263057600080fd5b505afa158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126689190810190613efc565b90506000439050600061268582886020015163ffffffff16613100565b90506000811180156126975750600083115b15612816576000612718876001600160a01b03166347bd37186040518163ffffffff1660e01b815260040160206040518083038186803b1580156126da57600080fd5b505afa1580156126ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127129190810190613efc565b8761313a565b905060006127268386613158565b9050612730613489565b6000831161274d5760405180602001604052806000815250612757565b612757828461319a565b9050612761613489565b60408051602081019091528b516001600160e01b0316815261278390836131d8565b90506127be8160000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b8152506131fd565b6001600160e01b03168b52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b602082015261280190879061322c565b63ffffffff1660208c01525061286092505050565b8015612860576128548260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b81525061322c565b63ffffffff1660208801525b50505050505050565b6000612873613489565b50604080516020810190915286516001600160e01b03168152612894613489565b604080516020810191829052630238089760e21b909152806001600160a01b0386166308e0225c6128c98b8b60248601614b18565b60206040518083038186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129199190810190613efc565b90528051909150156129db5761292d613489565b6129378383613254565b905060006129c0896001600160a01b03166395dd91938a6040518263ffffffff1660e01b815260040161296a9190614ae1565b60206040518083038186803b15801561298257600080fd5b505afa158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129ba9190810190613efc565b8861313a565b905060006129ce8284613279565b95506129e2945050505050565b6000925050505b95945050505050565b604051635dd3fc9d60e01b81526000906001600160a01b03831690635dd3fc9d90612a1a908690600401614ae1565b60206040518083038186803b158015612a3257600080fd5b505afa158015612a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a6a9190810190613efc565b905060004390506000612a8782876020015163ffffffff16613100565b9050600081118015612a995750600083115b15612c0f576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad957600080fd5b505afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b119190810190613efc565b90506000612b1f8386613158565b9050612b29613489565b60008311612b465760405180602001604052806000815250612b50565b612b50828461319a565b9050612b5a613489565b60408051602081019091528a516001600160e01b03168152612b7c90836131d8565b9050612bb78160000151604051806040016040528060138152602001726e657720696e646578206f766572666c6f777360681b8152506131fd565b6001600160e01b03168a52604080518082019091526016815275626c6f636b206e756d626572206f766572666c6f777360501b6020820152612bfa90879061322c565b63ffffffff1660208b015250612c5992505050565b8015612c5957612c4d8260405180604001604052806016815260200175626c6f636b206e756d626572206f766572666c6f777360501b81525061322c565b63ffffffff1660208701525b505050505050565b6000612c6b613489565b50604080516020810190915285516001600160e01b03168152612c8c613489565b604080516020810191829052631068634b60e21b909152806001600160a01b0386166341a18d2c612cc18a8a60248601614b18565b60206040518083038186803b158015612cd957600080fd5b505afa158015612ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d119190810190613efc565b90528051909150158015612d255750815115155b15612da757836001600160a01b031663c5b4db556040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6357600080fd5b505afa158015612d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d9b9190810190613eae565b6001600160e01b031681525b612daf613489565b612db98383613254565b90506000876001600160a01b03166370a08231886040518263ffffffff1660e01b8152600401612de99190614ae1565b60206040518083038186803b158015612e0157600080fd5b505afa158015612e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e399190810190613efc565b90506000612e478284613279565b9a9950505050505050505050565b60006104098383604051806040016040528060118152602001706164646974696f6e206f766572666c6f7760781b8152506130ad565b600080600080600080600080896001600160a01b031663013cf08b8a6040518263ffffffff1660e01b8152600401612ec39190614c4f565b6101206040518083038186803b158015612edc57600080fd5b505afa158015612ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f149190810190613f1a565b9850985098509850985098509850985050888b6000018181525050878b602001906001600160a01b031690816001600160a01b031681525050868b6040018181525050858b60e0018181525050848b610100018181525050838b610120018181525050828b610140018181525050818b610160019015159081151581525050808b6101800190151590811515815250505050505050505050505050565b600081604051602001612fc49190614ad5565b6040516020818303038152906040528051906020012083604051602001612feb9190614ad5565b6040516020818303038152906040528051906020012014905092915050565b60008261301957506000610361565b8282028284828161302657fe5b04146104095760405162461bcd60e51b815260040161065190614bd6565b600061304e613489565b61305884846132a8565b9050613063816132c9565b949350505050565b600061040983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506132d8565b60008383018285821015610de15760405162461bcd60e51b81526004016106519190614bb5565b600081848411156130f85760405162461bcd60e51b81526004016106519190614bb5565b505050900390565b60006104098383604051806040016040528060158152602001747375627472616374696f6e20756e646572666c6f7760581b8152506130d4565b600061040961315184670de0b6b3a7640000613158565b835161330f565b600061040983836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250613342565b6131a2613489565b60405180602001604052806131cf6131c9866ec097ce7bc90715b34b9f1000000000613158565b8561330f565b90529392505050565b6131e0613489565b60405180602001604052806131cf85600001518560000151612e55565b600081600160e01b84106132245760405162461bcd60e51b81526004016106519190614bb5565b509192915050565b60008164010000000084106132245760405162461bcd60e51b81526004016106519190614bb5565b61325c613489565b60405180602001604052806131cf85600001518560000151613100565b60006ec097ce7bc90715b34b9f1000000000613299848460000151613158565b816132a057fe5b049392505050565b6132b0613489565b60405180602001604052806131cf856000015185613158565b51670de0b6b3a7640000900490565b600081836132f95760405162461bcd60e51b81526004016106519190614bb5565b50600083858161330557fe5b0495945050505050565b600061040983836040518060400160405280600e81526020016d646976696465206279207a65726f60901b81525061338a565b600083158061334f575082155b1561335c57506000610409565b8383028385828161336957fe5b04148390610de15760405162461bcd60e51b81526004016106519190614bb5565b600081836133ab5760405162461bcd60e51b81526004016106519190614bb5565b508284816133b557fe5b04949350505050565b604080518082019091526000808252602082015290565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160008152602001600081525090565b604080516080810182526000808252602082018190529181019190915260608082015290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b6040518060200160405280600081525090565b604051806101a001604052806000815260200160006001600160a01b031681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b60405180610240016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001600081525090565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b604051806040016040528060008152602001600081525090565b803561036181614d8d565b805161036181614d8d565b600082601f83011261369357600080fd5b81516136a66136a182614c91565b614c6b565b915081818352602084019350602081019050838560208402820111156136cb57600080fd5b60005b838110156136f757816136e18882613677565b84525060209283019291909101906001016136ce565b5050505092915050565b600082601f83011261371257600080fd5b81516137206136a182614c91565b81815260209384019390925082018360005b838110156136f75781518601613748888261395e565b8452506020928301929190910190600101613732565b60008083601f84011261377057600080fd5b5081356001600160401b0381111561378757600080fd5b60208301915083602082028301111561379f57600080fd5b9250929050565b600082601f8301126137b757600080fd5b81516137c56136a182614c91565b915081818352602084019350602081019050838560208402820111156137ea57600080fd5b60005b838110156136f7578161380088826139b8565b84525060209283019291909101906001016137ed565b600082601f83011261382757600080fd5b81516138356136a182614c91565b81815260209384019390925082018360005b838110156136f7578151860161385d888261395e565b8452506020928301929190910190600101613847565b600082601f83011261388457600080fd5b81356138926136a182614c91565b915081818352602084019350602081019050838560208402820111156138b757600080fd5b60005b838110156136f757816138cd8882613a29565b84525060209283019291909101906001016138ba565b600082601f8301126138f457600080fd5b81516139026136a182614c91565b9150818183526020840193506020810190508385602084028201111561392757600080fd5b60005b838110156136f7578161393d8882613a34565b845250602092830192919091019060010161392a565b805161036181614da4565b600082601f83011261396f57600080fd5b815161397d6136a182614cb1565b9150808252602083016020830185838301111561399957600080fd5b6139a4838284614d57565b50505092915050565b803561036181614dad565b805161036181614dad565b6000606082840312156139d557600080fd5b6139df6060614c6b565b905060006139ed8484613953565b82525060206139fe84848301613953565b6020830152506040613a1284828501613a60565b60408301525092915050565b805161036181614db6565b803561036181614dbf565b805161036181614dbf565b803561036181614dc8565b805161036181614dc8565b805161036181614dd1565b805161036181614dda565b600060208284031215613a7d57600080fd5b60006130638484613677565b60008060408385031215613a9c57600080fd5b6000613aa8858561366c565b9250506020613ab98582860161366c565b9150509250929050565b60008060408385031215613ad657600080fd5b6000613ae2858561366c565b9250506020613ab9858286016139ad565b60008060008060808587031215613b0957600080fd5b84516001600160401b03811115613b1f57600080fd5b613b2b87828801613682565b94505060208501516001600160401b03811115613b4757600080fd5b613b53878288016138e3565b93505060408501516001600160401b03811115613b6f57600080fd5b613b7b87828801613816565b92505060608501516001600160401b03811115613b9757600080fd5b613ba387828801613701565b91505092959194509250565b60008060208385031215613bc257600080fd5b82356001600160401b03811115613bd857600080fd5b613be48582860161375e565b92509250509250929050565b600080600060408486031215613c0557600080fd5b83356001600160401b03811115613c1b57600080fd5b613c278682870161375e565b93509350506020613c3a8682870161366c565b9150509250925092565b600060208284031215613c5657600080fd5b81516001600160401b03811115613c6c57600080fd5b613063848285016137a6565b60008060408385031215613c8b57600080fd5b6000613c978585613953565b9250506020613ab985828601613a34565b600060208284031215613cba57600080fd5b600061306384846139b8565b60008060408385031215613cd957600080fd5b6000613aa885856139ad565b600080600060608486031215613cfa57600080fd5b6000613d0686866139ad565b9350506020613d178682870161366c565b92505060408401356001600160401b03811115613d3357600080fd5b613c3a86828701613873565b600080600060408486031215613d5457600080fd5b6000613d6086866139ad565b93505060208401356001600160401b03811115613d7c57600080fd5b613d888682870161375e565b92509250509250925092565b600060208284031215613da657600080fd5b600061306384846139ad565b60008060008060608587031215613dc857600080fd5b6000613dd487876139ad565b9450506020613de58782880161366c565b93505060408501356001600160401b03811115613e0157600080fd5b613e0d8782880161375e565b95989497509550505050565b600080600060608486031215613e2e57600080fd5b6000613e3a86866139ad565b9350506020613e4b868287016139ad565b9250506040613c3a8682870161366c565b600060208284031215613e6e57600080fd5b81516001600160401b03811115613e8457600080fd5b6130638482850161395e565b600060608284031215613ea257600080fd5b600061306384846139c3565b600060208284031215613ec057600080fd5b60006130638484613a1e565b60008060408385031215613edf57600080fd5b6000613eeb8585613a1e565b9250506020613ab985828601613a4a565b600060208284031215613f0e57600080fd5b60006130638484613a34565b60008060008060008060008060006101208a8c031215613f3957600080fd5b6000613f458c8c613a34565b9950506020613f568c828d01613677565b9850506040613f678c828d01613a34565b9750506060613f788c828d01613a34565b9650506080613f898c828d01613a34565b95505060a0613f9a8c828d01613a34565b94505060c0613fab8c828d01613a34565b93505060e0613fbc8c828d01613953565b925050610100613fce8c828d01613953565b9150509295985092959850929598565b600080600060608486031215613ff357600080fd5b6000613fff8686613a34565b935050602061401086828701613a34565b9250506040613c3a86828701613a34565b60006020828403121561403357600080fd5b60006130638484613a3f565b60006020828403121561405157600080fd5b60006130638484613a55565b60006020828403121561406f57600080fd5b60006130638484613a60565b6000614087838361412b565b505060200190565b60006104098383614536565b6000614087838361456e565b6000610409838361466a565b60006140bf8383614789565b505060800190565b60006140d383836147d9565b505060400190565b60006140e7838361484f565b505060c00190565b60006140fb83836148bf565b50506102400190565b60006140d38383614a28565b60006140878383614aba565b61412581614d41565b82525050565b61412581614cf0565b600061413f82614cde565b6141498185614ce2565b935061415483614cd8565b8060005b8381101561418257815161416c888261407b565b975061417783614cd8565b925050600101614158565b509495945050505050565b600061419882614cde565b6141a28185614ce2565b9350836020820285016141b485614cd8565b8060005b858110156141ee57848403895281516141d1858261408f565b94506141dc83614cd8565b60209a909a01999250506001016141b8565b5091979650505050505050565b600061420682614cde565b6142108185614ce2565b935061421b83614cd8565b8060005b83811015614182578151614233888261409b565b975061423e83614cd8565b92505060010161421f565b600061425482614cde565b61425e8185614ce2565b93508360208202850161427085614cd8565b8060005b858110156141ee578484038952815161428d858261408f565b945061429883614cd8565b60209a909a0199925050600101614274565b60006142b582614cde565b6142bf8185614ce2565b9350836020820285016142d185614cd8565b8060005b858110156141ee57848403895281516142ee85826140a7565b94506142f983614cd8565b60209a909a01999250506001016142d5565b600061431682614cde565b6143208185614ce2565b935061432b83614cd8565b8060005b8381101561418257815161434388826140b3565b975061434e83614cd8565b92505060010161432f565b600061436482614cde565b61436e8185614ce2565b935061437983614cd8565b8060005b8381101561418257815161439188826140c7565b975061439c83614cd8565b92505060010161437d565b60006143b282614cde565b6143bc8185614ce2565b93506143c783614cd8565b8060005b838110156141825781516143df88826140db565b97506143ea83614cd8565b9250506001016143cb565b600061440082614cde565b61440a8185614ce2565b935061441583614cd8565b8060005b8381101561418257815161442d88826140ef565b975061443883614cd8565b925050600101614419565b600061444e82614cde565b6144588185614ce2565b935061446383614cd8565b8060005b8381101561418257815161447b88826140c7565b975061448683614cd8565b925050600101614467565b600061449c82614cde565b6144a68185614ce2565b93506144b183614cd8565b8060005b838110156141825781516144c98882614104565b97506144d483614cd8565b9250506001016144b5565b60006144ea82614cde565b6144f48185614ce2565b93506144ff83614cd8565b8060005b838110156141825781516145178882614110565b975061452283614cd8565b925050600101614503565b61412581614cfb565b600061454182614cde565b61454b8185614ce2565b935061455b818560208601614d57565b61456481614d83565b9093019392505050565b61412581614d00565b600061458282614cde565b61458c8185614ceb565b935061459c818560208601614d57565b9290920192915050565b60006145b3601783614ce2565b7f6163636f756e74206c6971756964697479206572726f72000000000000000000815260200192915050565b60006145ec602183614ce2565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b805160608084526000919084019061463a82826141fb565b915050602083015161464f6020860182614aba565b5060408301516146626040860182614aba565b509392505050565b80516000906101a084019061467f8582614aba565b506020830151614692602086018261412b565b5060408301516146a56040860182614aba565b50606083015184820360608601526146bd8282614134565b915050608083015184820360808601526146d782826144df565b91505060a083015184820360a08601526146f18282614249565b91505060c083015184820360c086015261470b828261418d565b91505060e083015161472060e0860182614aba565b50610100830151614735610100860182614aba565b5061012083015161474a610120860182614aba565b5061014083015161475f610140860182614aba565b5061016083015161477461016086018261452d565b5061018083015161466261018086018261452d565b8051608083019061479a8482614aba565b5060208201516147ad602085018261452d565b5060408201516147c0604085018261452d565b5060608201516147d36060850182614acc565b50505050565b805160408301906147ea848261412b565b5060208201516147d36020850182614aba565b80516000906080840190614811858261412b565b506020830151614824602086018261412b565b5060408301516148376040860182614aba565b50606083015184820360608601526129e28282614359565b805160c0830190614860848261412b565b5060208201516148736020850182614aba565b5060408201516148866040850182614aba565b5060608201516148996060850182614aba565b5060808201516148ac6080850182614aba565b5060a08201516147d360a0850182614aba565b80516102408301906148d1848261412b565b5060208201516148e46020850182614aba565b5060408201516148f76040850182614aba565b50606082015161490a6060850182614aba565b50608082015161491d6080850182614aba565b5060a082015161493060a0850182614aba565b5060c082015161494360c0850182614aba565b5060e082015161495660e0850182614aba565b5061010082015161496b610100850182614aba565b5061012082015161498061012085018261452d565b50610140820151614995610140850182614aba565b506101608201516149aa61016085018261412b565b506101808201516149bf610180850182614aba565b506101a08201516149d46101a0850182614aba565b506101c08201516149e96101c0850182614aba565b506101e08201516149fe6101e0850182614aba565b50610200820151614a13610200850182614aba565b506102208201516147d3610220850182614aba565b805160408301906147ea8482614aba565b80516080830190614a4a8482614aba565b506020820151614a5d6020850182614aba565b506040820151614a70604085018261412b565b5060608201516147d36060850182614aba565b80516060830190614a948482614aba565b506020820151614aa76020850182614aba565b5060408201516147d3604085018261412b565b61412581614d23565b61412581614d4c565b61412581614d35565b60006104098284614577565b60208101610361828461412b565b60208101610361828461411c565b60408101614b0b828561411c565b610409602083018461412b565b60408101614b0b828561412b565b60408101614b34828561412b565b6104096020830184614ac3565b6020808252810161040981846142aa565b60208082528101610409818461430b565b6020808252810161040981846143a7565b6020808252810161040981846143f5565b602080825281016104098184614443565b602080825281016104098184614491565b60208101610361828461456e565b602080825281016104098184614536565b60208082528101610361816145a6565b60208082528101610361816145df565b602080825281016104098184614622565b6020808252810161040981846147fd565b60c08101610361828461484f565b610240810161036182846148bf565b6040810161036182846147d9565b608081016103618284614a39565b606081016103618284614a83565b602081016103618284614aba565b60408101614b0b8285614aba565b6040518181016001600160401b0381118282101715614c8957600080fd5b604052919050565b60006001600160401b03821115614ca757600080fd5b5060209081020190565b60006001600160401b03821115614cc757600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061036182614d0b565b151590565b600061036182614cf0565b6001600160a01b031690565b6001600160e01b031690565b90565b63ffffffff1690565b60ff1690565b6001600160601b031690565b600061036182614d00565b600061036182614d26565b60005b83811015614d72578181015183820152602001614d5a565b838111156147d35750506000910152565b601f01601f191690565b614d9681614cf0565b8114614da157600080fd5b50565b614d9681614cfb565b614d9681614d00565b614d9681614d17565b614d9681614d23565b614d9681614d26565b614d9681614d2f565b614d9681614d3556fea365627a7a7231582084f00b9fa1ac40919c2b36bc24333a3258b4a23dcdfb6f07ac8e7e8a76dbfffd6c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "methods": {
      "getAccountLimits(address,address)": {
        "params": {
          "account": "Address of the account to query",
          "comptroller": "Address of comptroller proxy"
        },
        "return": "Struct with markets user has entered, liquidity, and shortfall of the account"
      },
      "getDailyXVS(address,address)": {
        "params": {
          "account": "Address of account to fetch the daily XVS distribution",
          "comptrollerAddress": "Address of the comptroller proxy"
        },
        "return": "Amount of XVS distributed daily to an account"
      },
      "getGovProposals(address,uint256[])": {
        "params": {
          "governor": "Address of governor contract",
          "proposalIds": "Array of proposal Ids"
        },
        "return": "GovProposal structs for provided proposal Ids"
      },
      "getGovReceipts(address,address,uint256[])": {
        "params": {
          "governor": "Governor address",
          "proposalIds": "Array of proposal ids",
          "voter": "Voter address"
        },
        "return": "Array of governor receipts"
      },
      "getVenusVotes(address,address,uint32[])": {
        "params": {
          "account": "Address of the account",
          "blockNumbers": "Array of blocks to query",
          "xvs": "XVS contract address"
        },
        "return": "Array of VenusVotes structs with block number and vote count"
      },
      "getXVSBalanceMetadata(address,address)": {
        "params": {
          "account": "Account address",
          "xvs": "XVS contract address"
        },
        "return": "Struct with XVS balance and voter details"
      },
      "getXVSBalanceMetadataExt(address,address,address)": {
        "params": {
          "account": "Account address",
          "comptroller": "Comptroller proxy contract address",
          "xvs": "XVS contract address"
        },
        "return": "Struct with XVS balance and voter details and XVS allocation"
      },
      "pendingRewards(address,address)": {
        "params": {
          "comptroller": "Address of the comptroller",
          "holder": "Account to query pending XVS"
        },
        "return": "Reward object contraining the totalRewards and pending rewards for each market"
      },
      "vTokenBalances(address,address)": {
        "params": {
          "account": "Account address to fetch the balance of",
          "vToken": "Address of the token to check the balance of"
        },
        "return": "VTokenBalances with token balance information"
      },
      "vTokenBalancesAll(address[],address)": {
        "params": {
          "account": "Account address to fetch the balance of",
          "vTokens": "Addresses of the tokens to check the balance of"
        },
        "return": "VTokenBalances Array with token balance information"
      },
      "vTokenMetadata(address)": {
        "params": {
          "vToken": "The address of the vToken to fetch VTokenMetadata"
        },
        "return": "VTokenMetadata struct with vToken supply and borrow information."
      },
      "vTokenMetadataAll(address[])": {
        "params": {
          "vTokens": "Array of vToken addresses to fetch VTokenMetadata"
        },
        "return": "Array of structs with vToken supply and borrow information."
      },
      "vTokenUnderlyingPrice(address)": {
        "params": {
          "vToken": "address of the vToken"
        },
        "return": "response struct with underlyingPrice info of vToken"
      },
      "vTokenUnderlyingPriceAll(address[])": {
        "params": {
          "vTokens": "Array of vToken addresses"
        },
        "return": "array of response structs with underlying price information of vTokens"
      }
    }
  },
  "userdoc": {
    "methods": {
      "getAccountLimits(address,address)": {
        "notice": "Query the account liquidity and shortfall of an account"
      },
      "getDailyXVS(address,address)": {
        "notice": "Get amount of XVS distributed daily to an account"
      },
      "getGovProposals(address,uint256[])": {
        "notice": "Query the details of a list of governance proposals"
      },
      "getGovReceipts(address,address,uint256[])": {
        "notice": "Query the voting information of an account for a list of governance proposals"
      },
      "getVenusVotes(address,address,uint32[])": {
        "notice": "Query the voting power for an account at a specific list of block numbers"
      },
      "getXVSBalanceMetadata(address,address)": {
        "notice": "Query the XVSBalance info of an account"
      },
      "getXVSBalanceMetadataExt(address,address,address)": {
        "notice": "Query the XVSBalance extended info of an account"
      },
      "pendingRewards(address,address)": {
        "notice": "Calculate the total XVS tokens pending and accrued by a user account"
      },
      "vTokenBalances(address,address)": {
        "notice": "Get the current vToken balance (outstanding borrows) for an account"
      },
      "vTokenBalancesAll(address[],address)": {
        "notice": "Get the current vToken balances (outstanding borrows) for all vTokens on an account"
      },
      "vTokenMetadata(address)": {
        "notice": "Query the metadata of a vToken by its address"
      },
      "vTokenMetadataAll(address[])": {
        "notice": "Get VTokenMetadata for an array of vToken addresses"
      },
      "vTokenUnderlyingPrice(address)": {
        "notice": "Get the price for the underlying asset of a vToken"
      },
      "vTokenUnderlyingPriceAll(address[])": {
        "notice": "Query the underlyingPrice of an array of vTokens"
      }
    }
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
