{
  "address": "0x8439932C45e646FcC1009690417A65BF48f68Ce7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrower_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApproveFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "BorrowFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "BorrowNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ComptrollerMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "RepaymentFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "RepaymentNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vTokenToBorrow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "BorrowAllowedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalBorrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vTokenRepaid",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vTokenBorrowed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowedAmount",
          "type": "uint256"
        }
      ],
      "name": "DebtMoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vTokenToRepay",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "originalBorrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "RepaymentAllowedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SweptTokens",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ANY_USER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVBep20",
          "name": "vTokenToRepay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "originalBorrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IVBep20",
          "name": "vTokenToBorrow",
          "type": "address"
        }
      ],
      "name": "moveDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newBorrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "repaymentAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenToBorrow",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "setBorrowAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vTokenToRepay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "originalBorrower",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "setRepaymentAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "sweepTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58ff57999d0d1e70a9662e3a010abade460bafa8923e0a15e0a4305fb0734111",
  "receipt": {
    "to": null,
    "from": "0x55A9f5374Af30E3045FB491f1da3C2E8a74d168D",
    "contractAddress": "0x8439932C45e646FcC1009690417A65BF48f68Ce7",
    "transactionIndex": 93,
    "gasUsed": "1435926",
    "logsBloom": "0x
    "blockHash": "0xa8733af3eddaa2484d7bab176298733fd335682f44a1f4d6e900afd34e6025b9",
    "transactionHash": "0x58ff57999d0d1e70a9662e3a010abade460bafa8923e0a15e0a4305fb0734111",
    "logs": [
      {
        "transactionIndex": 93,
        "blockNumber": 34774664,
        "transactionHash": "0x58ff57999d0d1e70a9662e3a010abade460bafa8923e0a15e0a4305fb0734111",
        "address": "0x8439932C45e646FcC1009690417A65BF48f68Ce7",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 286,
        "blockHash": "0xa8733af3eddaa2484d7bab176298733fd335682f44a1f4d6e900afd34e6025b9"
      }
    ],
    "blockNumber": 34774664,
    "cumulativeGasUsed": "14078117",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x489A8756C18C0b8B24EC2a2b9FF3D4d447F79BEc"],
  "numDeployments": 2,
  "solcInputHash": "1dff3b4c1e459128170e9af3e75c7e17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrower_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"BorrowFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"BorrowNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ComptrollerMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RepaymentFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"RepaymentNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vTokenToBorrow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"BorrowAllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalBorrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vTokenRepaid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vTokenBorrowed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"name\":\"DebtMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vTokenToRepay\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalBorrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"RepaymentAllowedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SweptTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANY_USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVBep20\",\"name\":\"vTokenToRepay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originalBorrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IVBep20\",\"name\":\"vTokenToBorrow\",\"type\":\"address\"}],\"name\":\"moveDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBorrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"repaymentAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenToBorrow\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setBorrowAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vTokenToRepay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originalBorrower\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setRepaymentAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"params\":{\"newBorrower_\":\"User to borrow on behalf of\"}},\"moveDebt(address,address,uint256,address)\":{\"params\":{\"originalBorrower\":\"The address of the borrower, whose debt to repay\",\"repayAmount\":\"The amount to repay in terms of vTokenToRepay.underlying()\",\"vTokenToBorrow\":\"VToken to borrow from\",\"vTokenToRepay\":\"VToken to repay to on behalf of originalBorrower\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBorrowAllowed(address,bool)\":{\"params\":{\"allow\":\"Whether to allow borrowing from the corresponding vToken\",\"vTokenToBorrow\":\"VToken to borrow from\"}},\"setRepaymentAllowed(address,address,bool)\":{\"params\":{\"allow\":\"Whether to allow repaying to the corresponding vToken on behalf of originalBorrower\",\"originalBorrower\":\"The address of the borrower, whose debt to repay (or ANY_USER to allow   repayments for all users in the market, e.g. if the market is going to be deprecated soon)\",\"vTokenToRepay\":\"VToken to repay to\"}},\"sweepTokens(address)\":{\"params\":{\"token\":\"ERC-20 token to sweep\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"NO_ERROR\":{\"details\":\"VToken return value signalling about successful execution\"},\"newBorrower\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApproveFailed()\":[{\"notice\":\"Thrown if a contract is unable to approve a transfer\"}],\"BorrowFailed(uint256)\":[{\"notice\":\"Thrown if borrow fails with an error code\"}],\"BorrowNotAllowed(address)\":[{\"notice\":\"Thrown if borrowing from the corresponding vToken is not allowed\"}],\"ComptrollerMismatch()\":[{\"notice\":\"Thrown if VTokens' comptrollers are not equal\"}],\"RepaymentFailed(uint256)\":[{\"notice\":\"Thrown if repayment fails with an error code\"}],\"RepaymentNotAllowed(address,address)\":[{\"notice\":\"Thrown if repaying the debts of the borrower to the corresponding vToken is not allowed\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"BorrowAllowedSet(address,bool)\":{\"notice\":\"Emitted when vToken is allowed or denied to be borrowed from\"},\"DebtMoved(address,address,uint256,address,address,uint256)\":{\"notice\":\"Emitted if debt is swapped successfully\"},\"RepaymentAllowedSet(address,address,bool)\":{\"notice\":\"Emitted when vToken is allowed or denied to be borrowed from\"},\"SweptTokens(address,uint256)\":{\"notice\":\"Emitted when the owner transfers tokens, accidentially sent to this contract,   to their account\"}},\"kind\":\"user\",\"methods\":{\"ANY_USER()\":{\"notice\":\"A wildcard indicating that repayment is allowed for _any_ user in the market\"},\"borrowAllowed(address)\":{\"notice\":\"Whether to allow borrowing from the corresponding vToken\"},\"constructor\":{\"notice\":\"Constructor for the implementation contract. Sets immutable variables.\"},\"moveDebt(address,address,uint256,address)\":{\"notice\":\"Repays originalBorrower's borrow in vTokenToRepay.underlying() and borrows   vTokenToBorrow.underlying() on behalf of newBorrower.\"},\"newBorrower()\":{\"notice\":\"User to borrow on behalf of\"},\"repaymentAllowed(address,address)\":{\"notice\":\"Whether to allow repaying to the corresponding vToken on behalf of   a certain user. Use ANY_USER to check if repayment is allowed for any user.\"},\"setBorrowAllowed(address,bool)\":{\"notice\":\"Allows or denies borrowing from the corresponding vToken\"},\"setRepaymentAllowed(address,address,bool)\":{\"notice\":\"Allows or denies repaying the debts of originalBorrower to the corresponding vToken\"},\"sweepTokens(address)\":{\"notice\":\"Transfers tokens, accidentially sent to this contract, to the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DelegateBorrowers/MoveDebtDelegate.sol\":\"MoveDebtDelegate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface OracleInterface {\\n    function getPrice(address asset) external view returns (uint256);\\n}\\n\\ninterface ResilientOracleInterface is OracleInterface {\\n    function updatePrice(address vToken) external;\\n\\n    function updateAssetPrice(address asset) external;\\n\\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\\n}\\n\\ninterface TwapInterface is OracleInterface {\\n    function updateTwap(address asset) external returns (uint256);\\n}\\n\\ninterface BoundValidatorInterface {\\n    function validatePriceWithAnchorPrice(\\n        address asset,\\n        uint256 reporterPrice,\\n        uint256 anchorPrice\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x40031b19684ca0c912e794d08c2c0b0d8be77d3c1bdc937830a0658eff899650\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x909eb76841ebd57d8f53686b76b1a09da7bbbbcddb29510c41674d5aa84c713e\",\"license\":\"BSD-3-Clause\"},\"contracts/DelegateBorrowers/MoveDebtDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.8.13;\\n\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\n\\nimport { approveOrRevert } from \\\"../lib/approveOrRevert.sol\\\";\\nimport { IVBep20, IComptroller } from \\\"../InterfacesV8.sol\\\";\\n\\ncontract MoveDebtDelegate is Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\\n    /// @dev VToken return value signalling about successful execution\\n    uint256 internal constant NO_ERROR = 0;\\n\\n    /// @notice A wildcard indicating that repayment is allowed for _any_ user in the market\\n    address public constant ANY_USER = address(1);\\n\\n    /// @notice User to borrow on behalf of\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable newBorrower;\\n\\n    /// @notice Whether to allow borrowing from the corresponding vToken\\n    mapping(address => bool) public borrowAllowed;\\n\\n    /// @notice Whether to allow repaying to the corresponding vToken on behalf of\\n    ///   a certain user. Use ANY_USER to check if repayment is allowed for any user.\\n    mapping(address => mapping(address => bool)) public repaymentAllowed;\\n\\n    /// @notice Emitted when vToken is allowed or denied to be borrowed from\\n    event BorrowAllowedSet(address indexed vTokenToBorrow, bool allowed);\\n\\n    /// @notice Emitted when vToken is allowed or denied to be borrowed from\\n    event RepaymentAllowedSet(address indexed vTokenToRepay, address indexed originalBorrower, bool allowed);\\n\\n    /// @notice Emitted if debt is swapped successfully\\n    event DebtMoved(\\n        address indexed originalBorrower,\\n        address indexed vTokenRepaid,\\n        uint256 repaidAmount,\\n        address newBorrower,\\n        address indexed vTokenBorrowed,\\n        uint256 borrowedAmount\\n    );\\n\\n    /// @notice Emitted when the owner transfers tokens, accidentially sent to this contract,\\n    ///   to their account\\n    event SweptTokens(address indexed token, uint256 amount);\\n\\n    /// @notice Thrown if VTokens' comptrollers are not equal\\n    error ComptrollerMismatch();\\n\\n    /// @notice Thrown if repayment fails with an error code\\n    error RepaymentFailed(uint256 errorCode);\\n\\n    /// @notice Thrown if borrow fails with an error code\\n    error BorrowFailed(uint256 errorCode);\\n\\n    /// @notice Thrown if borrowing from the corresponding vToken is not allowed\\n    error BorrowNotAllowed(address vToken);\\n\\n    /// @notice Thrown if repaying the debts of the borrower to the corresponding vToken is not allowed\\n    error RepaymentNotAllowed(address vToken, address borrower);\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Constructor for the implementation contract. Sets immutable variables.\\n    /// @param newBorrower_ User to borrow on behalf of\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address newBorrower_) {\\n        newBorrower = newBorrower_;\\n        _disableInitializers();\\n    }\\n\\n    function initialize() external initializer {\\n        __Ownable2Step_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**\\n     * @notice Repays originalBorrower's borrow in vTokenToRepay.underlying() and borrows\\n     *   vTokenToBorrow.underlying() on behalf of newBorrower.\\n     *\\n     * @param originalBorrower The address of the borrower, whose debt to repay\\n     * @param vTokenToRepay VToken to repay to on behalf of originalBorrower\\n     * @param repayAmount The amount to repay in terms of vTokenToRepay.underlying()\\n     * @param vTokenToBorrow VToken to borrow from\\n     */\\n    function moveDebt(\\n        IVBep20 vTokenToRepay,\\n        address originalBorrower,\\n        uint256 repayAmount,\\n        IVBep20 vTokenToBorrow\\n    ) external nonReentrant {\\n        if (!borrowAllowed[address(vTokenToBorrow)]) {\\n            revert BorrowNotAllowed(address(vTokenToBorrow));\\n        }\\n\\n        mapping(address => bool) storage repaymentAllowedFor = repaymentAllowed[address(vTokenToRepay)];\\n        if (!repaymentAllowedFor[ANY_USER] && !repaymentAllowedFor[originalBorrower]) {\\n            revert RepaymentNotAllowed(address(vTokenToRepay), originalBorrower);\\n        }\\n\\n        uint256 actualRepaymentAmount = _repay(vTokenToRepay, originalBorrower, repayAmount);\\n        uint256 amountToBorrow = _convert(vTokenToRepay, vTokenToBorrow, actualRepaymentAmount);\\n        _borrow(vTokenToBorrow, amountToBorrow);\\n        emit DebtMoved(\\n            originalBorrower,\\n            address(vTokenToRepay),\\n            actualRepaymentAmount,\\n            newBorrower,\\n            address(vTokenToBorrow),\\n            amountToBorrow\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows or denies borrowing from the corresponding vToken\\n     * @param vTokenToBorrow VToken to borrow from\\n     * @param allow Whether to allow borrowing from the corresponding vToken\\n     */\\n    function setBorrowAllowed(address vTokenToBorrow, bool allow) external onlyOwner {\\n        ensureNonzeroAddress(vTokenToBorrow);\\n        if (borrowAllowed[vTokenToBorrow] != allow) {\\n            borrowAllowed[vTokenToBorrow] = allow;\\n            emit BorrowAllowedSet(vTokenToBorrow, allow);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows or denies repaying the debts of originalBorrower to the corresponding vToken\\n     * @param vTokenToRepay VToken to repay to\\n     * @param originalBorrower The address of the borrower, whose debt to repay (or ANY_USER to allow\\n     *   repayments for all users in the market, e.g. if the market is going to be deprecated soon)\\n     * @param allow Whether to allow repaying to the corresponding vToken on behalf of originalBorrower\\n     */\\n    function setRepaymentAllowed(address vTokenToRepay, address originalBorrower, bool allow) external onlyOwner {\\n        ensureNonzeroAddress(vTokenToRepay);\\n        ensureNonzeroAddress(originalBorrower);\\n        if (repaymentAllowed[vTokenToRepay][originalBorrower] != allow) {\\n            repaymentAllowed[vTokenToRepay][originalBorrower] = allow;\\n            emit RepaymentAllowedSet(vTokenToRepay, originalBorrower, allow);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers tokens, accidentially sent to this contract, to the owner\\n     * @param token ERC-20 token to sweep\\n     */\\n    function sweepTokens(IERC20Upgradeable token) external onlyOwner {\\n        uint256 amount = token.balanceOf(address(this));\\n        token.safeTransfer(owner(), amount);\\n        emit SweptTokens(address(token), amount);\\n    }\\n\\n    /**\\n     * @dev Transfers the funds from the sender and repays a borrow in vToken on behalf of the borrower\\n     * @param vTokenToRepay VToken to repay to\\n     * @param borrower The address of the borrower, whose debt to repay\\n     * @param repayAmount The amount to repay in terms of underlying\\n     */\\n    function _repay(\\n        IVBep20 vTokenToRepay,\\n        address borrower,\\n        uint256 repayAmount\\n    ) internal returns (uint256 actualRepaymentAmount) {\\n        IERC20Upgradeable underlying = IERC20Upgradeable(vTokenToRepay.underlying());\\n        uint256 balanceBefore = underlying.balanceOf(address(this));\\n        underlying.safeTransferFrom(msg.sender, address(this), repayAmount);\\n        uint256 balanceAfter = underlying.balanceOf(address(this));\\n        uint256 repayAmountMinusFee = balanceAfter - balanceBefore;\\n\\n        uint256 borrowBalanceBefore = vTokenToRepay.borrowBalanceCurrent(borrower);\\n        approveOrRevert(underlying, address(vTokenToRepay), repayAmountMinusFee);\\n        uint256 err = vTokenToRepay.repayBorrowBehalf(borrower, repayAmountMinusFee);\\n        if (err != NO_ERROR) {\\n            revert RepaymentFailed(err);\\n        }\\n        approveOrRevert(underlying, address(vTokenToRepay), 0);\\n        uint256 borrowBalanceAfter = vTokenToRepay.borrowBalanceCurrent(borrower);\\n        return borrowBalanceBefore - borrowBalanceAfter;\\n    }\\n\\n    /**\\n     * @dev Borrows in vToken on behalf of the borrower and transfers the funds to the sender\\n     * @param vTokenToBorrow VToken to borrow from\\n     * @param borrowAmount The amount to borrow in terms of underlying\\n     */\\n    function _borrow(IVBep20 vTokenToBorrow, uint256 borrowAmount) internal {\\n        IERC20Upgradeable underlying = IERC20Upgradeable(vTokenToBorrow.underlying());\\n        uint256 balanceBefore = underlying.balanceOf(address(this));\\n        uint256 err = vTokenToBorrow.borrowBehalf(newBorrower, borrowAmount);\\n        if (err != NO_ERROR) {\\n            revert BorrowFailed(err);\\n        }\\n        uint256 balanceAfter = underlying.balanceOf(address(this));\\n        uint256 actualBorrowedAmount = balanceAfter - balanceBefore;\\n        underlying.safeTransfer(msg.sender, actualBorrowedAmount);\\n    }\\n\\n    /**\\n     * @dev Converts the value expressed in convertFrom.underlying() to a value\\n     *   in convertTo.underlying(), using the oracle price\\n     * @param convertFrom VToken to convert from\\n     * @param convertTo VToken to convert to\\n     * @param amount The amount in convertFrom.underlying()\\n     */\\n    function _convert(IVBep20 convertFrom, IVBep20 convertTo, uint256 amount) internal view returns (uint256) {\\n        IComptroller comptroller = convertFrom.comptroller();\\n        if (comptroller != convertTo.comptroller()) {\\n            revert ComptrollerMismatch();\\n        }\\n        ResilientOracleInterface oracle = comptroller.oracle();\\n\\n        // Decimals are accounted for in the oracle contract\\n        uint256 scaledUsdValue = oracle.getUnderlyingPrice(address(convertFrom)) * amount; // the USD value here has 36 decimals\\n        return scaledUsdValue / oracle.getUnderlyingPrice(address(convertTo));\\n    }\\n}\\n\",\"keccak256\":\"0xc9ab88bcfcf1e09ff8adcb551028daedfa501ee256cb1b39b09d03849fb1b616\",\"license\":\"BSD-3-Clause\"},\"contracts/InterfacesV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { ResilientOracleInterface } from \\\"@venusprotocol/oracle/contracts/interfaces/OracleInterface.sol\\\";\\n\\ninterface IVToken is IERC20Upgradeable {\\n    function borrowBalanceCurrent(address borrower) external returns (uint256);\\n\\n    function comptroller() external view returns (IComptroller);\\n}\\n\\ninterface IVBep20 is IVToken {\\n    function borrowBehalf(address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external returns (uint256);\\n\\n    function underlying() external view returns (address);\\n}\\n\\ninterface IVBNB is IVToken {\\n    function liquidateBorrow(address borrower, IVToken vTokenCollateral) external payable;\\n}\\n\\ninterface IVAIController {\\n    function liquidateVAI(\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external returns (uint256, uint256);\\n\\n    function getVAIAddress() external view returns (address);\\n}\\n\\ninterface IComptroller {\\n    enum Action {\\n        MINT,\\n        REDEEM,\\n        BORROW,\\n        REPAY,\\n        SEIZE,\\n        LIQUIDATE,\\n        TRANSFER,\\n        ENTER_MARKET,\\n        EXIT_MARKET\\n    }\\n\\n    function _setActionsPaused(address[] calldata markets_, Action[] calldata actions_, bool paused_) external;\\n\\n    function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n    function vaiController() external view returns (IVAIController);\\n\\n    function liquidatorContract() external view returns (address);\\n\\n    function oracle() external view returns (ResilientOracleInterface);\\n}\\n\\ninterface ILiquidator {\\n    function restrictLiquidation(address borrower) external;\\n\\n    function unrestrictLiquidation(address borrower) external;\\n\\n    function addToAllowlist(address borrower, address liquidator) external;\\n\\n    function removeFromAllowlist(address borrower, address liquidator) external;\\n\\n    function liquidateBorrow(\\n        address vToken,\\n        address borrower,\\n        uint256 repayAmount,\\n        IVToken vTokenCollateral\\n    ) external payable;\\n\\n    function setTreasuryPercent(uint256 newTreasuryPercentMantissa) external;\\n\\n    function treasuryPercentMantissa() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x468c9bb749fb8a243db9230a735ad6e0da01aa653b862dd7666edd1936844b09\",\"license\":\"BSD-3-Clause\"},\"contracts/lib/approveOrRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @notice Thrown if a contract is unable to approve a transfer\\nerror ApproveFailed();\\n\\n/// @notice Approves a transfer, ensuring that it is successful. This function supports non-compliant\\n/// tokens like the ones that don't return a boolean value on success. Thus, such approve call supports\\n/// three different kinds of tokens:\\n///   * Compliant tokens that revert on failure\\n///   * Compliant tokens that return false on failure\\n///   * Non-compliant tokens that don't return a value\\n/// @param token The contract address of the token which will be transferred\\n/// @param spender The spender contract address\\n/// @param amount The value of the transfer\\nfunction approveOrRevert(IERC20Upgradeable token, address spender, uint256 amount) {\\n    bytes memory callData = abi.encodeCall(token.approve, (spender, amount));\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = address(token).call(callData);\\n\\n    if (!success || (result.length != 0 && !abi.decode(result, (bool)))) {\\n        revert ApproveFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x7d6cb3fd3f7627a01203257e54c344265b56fc1e8fb4f03a54500091ca99bb34\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620019f0380380620019f0833981016040819052620000349162000113565b6001600160a01b0381166080526200004b62000052565b5062000145565b600054610100900460ff1615620000bf5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000111576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012657600080fd5b81516001600160a01b03811681146200013e57600080fd5b9392505050565b6080516118816200016f6000396000818161011c015281816103420152610eae01526118816000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638129fc1c1161008c578063e30c397811610066578063e30c3978146101d2578063f1e3c547146101e3578063f2fde38b14610211578063f5f6d3af1461022457600080fd5b80638129fc1c146101a65780638da5cb5b146101ae578063929f0e4b146101bf57600080fd5b806346b119a4116100c857806346b119a41461015b578063715018a61461018e57806379ba5097146101965780637d0ed4da1461019e57600080fd5b806311cbba09146100ef578063227661cb146101045780634162771414610117575b600080fd5b6101026100fd36600461158d565b610237565b005b6101026101123660046115ee565b6103ba565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017e610169366004611627565b60c96020526000908152604090205460ff1681565b6040519015158152602001610152565b610102610452565b610102610466565b61013e600181565b6101026104e0565b6033546001600160a01b031661013e565b6101026101cd36600461164b565b6105f8565b6065546001600160a01b031661013e565b61017e6101f1366004611696565b60ca60209081526000928352604080842090915290825290205460ff1681565b61010261021f366004611627565b6106b3565b610102610232366004611627565b610724565b61023f6107fa565b6001600160a01b038116600090815260c9602052604090205460ff16610288576040516312ee446d60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b038416600090815260ca6020908152604080832060018452918290529091205460ff161580156102d857506001600160a01b03841660009081526020829052604090205460ff16155b156103095760405163cf3aeddd60e01b81526001600160a01b0380871660048301528516602482015260440161027f565b6000610316868686610853565b90506000610325878584610b67565b90506103318482610dc5565b604080518381526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660208301529181018390528582169189811691908916907f833ea3dd2030d9e59d6339e1396b89485751296c537f1f863e5aa23d17f29d589060600160405180910390a45050506103b46001609755565b50505050565b6103c2610ff3565b6103cb8261104d565b6001600160a01b038216600090815260c9602052604090205460ff1615158115151461044e576001600160a01b038216600081815260c96020908152604091829020805460ff191685151590811790915591519182527f6c91f18e23863dbfc4ad61ae0f28a4e746dcc4faefa2ec384020e9728c3754b291015b60405180910390a25b5050565b61045a610ff3565b6104646000611074565b565b60655433906001600160a01b031681146104d45760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161027f565b6104dd81611074565b50565b600054610100900460ff16158080156105005750600054600160ff909116105b8061051a5750303b15801561051a575060005460ff166001145b61057d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161027f565b6000805460ff1916600117905580156105a0576000805461ff0019166101001790555b6105a861108d565b6105b06110bc565b80156104dd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b610600610ff3565b6106098361104d565b6106128261104d565b6001600160a01b03808416600090815260ca602090815260408083209386168352929052205460ff161515811515146106ae576001600160a01b03838116600081815260ca6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f011e47116ecd03b7ff3432b8c64a99ef03fedfcfc9c8e637e6d31b5a20d6b109910160405180910390a35b505050565b6106bb610ff3565b606580546001600160a01b0383166001600160a01b031990911681179091556106ec6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b61072c610ff3565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079791906116c4565b90506107bf6107ae6033546001600160a01b031690565b6001600160a01b03841690836110eb565b816001600160a01b03167ff1156aae74417f7d02b9defe4b9aaf1190f2c7412655278e6bf3ee42fce77c558260405161044591815260200190565b60026097540361084c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161027f565b6002609755565b600080846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b891906116dd565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092691906116c4565b905061093d6001600160a01b03831633308761114e565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a891906116c4565b905060006109b68383611710565b6040516305eff7ef60e21b81526001600160a01b0389811660048301529192506000918a16906317bfdfbc906024016020604051808303816000875af1158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2891906116c4565b9050610a35858a84611186565b6040516304c11f0360e31b81526001600160a01b03898116600483015260248201849052600091908b1690632608f818906044016020604051808303816000875af1158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac91906116c4565b90508015610ad05760405163259aff3560e01b81526004810182905260240161027f565b610adc868b6000611186565b6040516305eff7ef60e21b81526001600160a01b038a81166004830152600091908c16906317bfdfbc906024016020604051808303816000875af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c91906116c4565b9050610b588184611710565b9b9a5050505050505050505050565b600080846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc91906116dd565b9050836001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3091906116dd565b6001600160a01b0316816001600160a01b031614610c6157604051630c73eb0560e01b815260040160405180910390fd5b6000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc591906116dd565b60405163fc57d4df60e01b81526001600160a01b03888116600483015291925060009186919084169063fc57d4df90602401602060405180830381865afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3891906116c4565b610d429190611727565b60405163fc57d4df60e01b81526001600160a01b0388811660048301529192509083169063fc57d4df90602401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db091906116c4565b610dba9082611746565b979650505050505050565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2991906116dd565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9791906116c4565b60405163856e5bb360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905291925060009186169063856e5bb3906044016020604051808303816000875af1158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3091906116c4565b90508015610f545760405163158f1c0f60e01b81526004810182905260240161027f565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906116c4565b90506000610fcd8483611710565b9050610fe36001600160a01b03861633836110eb565b50505050505050565b6001609755565b6033546001600160a01b031633146104645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027f565b6001600160a01b0381166104dd576040516342bcdf7f60e11b815260040160405180910390fd5b606580546001600160a01b03191690556104dd8161127a565b600054610100900460ff166110b45760405162461bcd60e51b815260040161027f90611768565b6104646112cc565b600054610100900460ff166110e35760405162461bcd60e51b815260040161027f90611768565b6104646112fc565b6040516001600160a01b0383166024820152604481018290526106ae90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611323565b6040516001600160a01b03808516602483015283166044820152606481018290526103b49085906323b872dd60e01b90608401611117565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151909160009182918716906111e49085906117df565b6000604051808303816000865af19150503d8060008114611221576040519150601f19603f3d011682016040523d82523d6000602084013e611226565b606091505b5091509150811580611254575080511580159061125457508080602001905181019061125291906117fb565b155b1561127257604051633e3f8f7360e01b815260040160405180910390fd5b505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112f35760405162461bcd60e51b815260040161027f90611768565b61046433611074565b600054610100900460ff16610fec5760405162461bcd60e51b815260040161027f90611768565b6000611378826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113f89092919063ffffffff16565b905080516000148061139957508080602001905181019061139991906117fb565b6106ae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161027f565b6060611407848460008561140f565b949350505050565b6060824710156114705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161027f565b600080866001600160a01b0316858760405161148c91906117df565b60006040518083038185875af1925050503d80600081146114c9576040519150601f19603f3d011682016040523d82523d6000602084013e6114ce565b606091505b5091509150610dba8783838760608315611549578251600003611542576001600160a01b0385163b6115425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027f565b5081611407565b611407838381511561155e5781518083602001fd5b8060405162461bcd60e51b815260040161027f9190611818565b6001600160a01b03811681146104dd57600080fd5b600080600080608085870312156115a357600080fd5b84356115ae81611578565b935060208501356115be81611578565b92506040850135915060608501356115d581611578565b939692955090935050565b80151581146104dd57600080fd5b6000806040838503121561160157600080fd5b823561160c81611578565b9150602083013561161c816115e0565b809150509250929050565b60006020828403121561163957600080fd5b813561164481611578565b9392505050565b60008060006060848603121561166057600080fd5b833561166b81611578565b9250602084013561167b81611578565b9150604084013561168b816115e0565b809150509250925092565b600080604083850312156116a957600080fd5b82356116b481611578565b9150602083013561161c81611578565b6000602082840312156116d657600080fd5b5051919050565b6000602082840312156116ef57600080fd5b815161164481611578565b634e487b7160e01b600052601160045260246000fd5b600082821015611722576117226116fa565b500390565b6000816000190483118215151615611741576117416116fa565b500290565b60008261176357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156117ce5781810151838201526020016117b6565b838111156103b45750506000910152565b600082516117f18184602087016117b3565b9190910192915050565b60006020828403121561180d57600080fd5b8151611644816115e0565b60208152600082518060208401526118378160408501602087016117b3565b601f01601f1916919091016040019291505056fea2646970667358221220a47705f55271e76cced4c09ecbb9e9fb3e92b2c5dfc6cd16d4176258da2fa06964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638129fc1c1161008c578063e30c397811610066578063e30c3978146101d2578063f1e3c547146101e3578063f2fde38b14610211578063f5f6d3af1461022457600080fd5b80638129fc1c146101a65780638da5cb5b146101ae578063929f0e4b146101bf57600080fd5b806346b119a4116100c857806346b119a41461015b578063715018a61461018e57806379ba5097146101965780637d0ed4da1461019e57600080fd5b806311cbba09146100ef578063227661cb146101045780634162771414610117575b600080fd5b6101026100fd36600461158d565b610237565b005b6101026101123660046115ee565b6103ba565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017e610169366004611627565b60c96020526000908152604090205460ff1681565b6040519015158152602001610152565b610102610452565b610102610466565b61013e600181565b6101026104e0565b6033546001600160a01b031661013e565b6101026101cd36600461164b565b6105f8565b6065546001600160a01b031661013e565b61017e6101f1366004611696565b60ca60209081526000928352604080842090915290825290205460ff1681565b61010261021f366004611627565b6106b3565b610102610232366004611627565b610724565b61023f6107fa565b6001600160a01b038116600090815260c9602052604090205460ff16610288576040516312ee446d60e21b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b038416600090815260ca6020908152604080832060018452918290529091205460ff161580156102d857506001600160a01b03841660009081526020829052604090205460ff16155b156103095760405163cf3aeddd60e01b81526001600160a01b0380871660048301528516602482015260440161027f565b6000610316868686610853565b90506000610325878584610b67565b90506103318482610dc5565b604080518381526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660208301529181018390528582169189811691908916907f833ea3dd2030d9e59d6339e1396b89485751296c537f1f863e5aa23d17f29d589060600160405180910390a45050506103b46001609755565b50505050565b6103c2610ff3565b6103cb8261104d565b6001600160a01b038216600090815260c9602052604090205460ff1615158115151461044e576001600160a01b038216600081815260c96020908152604091829020805460ff191685151590811790915591519182527f6c91f18e23863dbfc4ad61ae0f28a4e746dcc4faefa2ec384020e9728c3754b291015b60405180910390a25b5050565b61045a610ff3565b6104646000611074565b565b60655433906001600160a01b031681146104d45760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161027f565b6104dd81611074565b50565b600054610100900460ff16158080156105005750600054600160ff909116105b8061051a5750303b15801561051a575060005460ff166001145b61057d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161027f565b6000805460ff1916600117905580156105a0576000805461ff0019166101001790555b6105a861108d565b6105b06110bc565b80156104dd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b610600610ff3565b6106098361104d565b6106128261104d565b6001600160a01b03808416600090815260ca602090815260408083209386168352929052205460ff161515811515146106ae576001600160a01b03838116600081815260ca6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f011e47116ecd03b7ff3432b8c64a99ef03fedfcfc9c8e637e6d31b5a20d6b109910160405180910390a35b505050565b6106bb610ff3565b606580546001600160a01b0383166001600160a01b031990911681179091556106ec6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b61072c610ff3565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079791906116c4565b90506107bf6107ae6033546001600160a01b031690565b6001600160a01b03841690836110eb565b816001600160a01b03167ff1156aae74417f7d02b9defe4b9aaf1190f2c7412655278e6bf3ee42fce77c558260405161044591815260200190565b60026097540361084c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161027f565b6002609755565b600080846001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610894573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b891906116dd565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610902573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092691906116c4565b905061093d6001600160a01b03831633308761114e565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a891906116c4565b905060006109b68383611710565b6040516305eff7ef60e21b81526001600160a01b0389811660048301529192506000918a16906317bfdfbc906024016020604051808303816000875af1158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2891906116c4565b9050610a35858a84611186565b6040516304c11f0360e31b81526001600160a01b03898116600483015260248201849052600091908b1690632608f818906044016020604051808303816000875af1158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac91906116c4565b90508015610ad05760405163259aff3560e01b81526004810182905260240161027f565b610adc868b6000611186565b6040516305eff7ef60e21b81526001600160a01b038a81166004830152600091908c16906317bfdfbc906024016020604051808303816000875af1158015610b28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4c91906116c4565b9050610b588184611710565b9b9a5050505050505050505050565b600080846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc91906116dd565b9050836001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3091906116dd565b6001600160a01b0316816001600160a01b031614610c6157604051630c73eb0560e01b815260040160405180910390fd5b6000816001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc591906116dd565b60405163fc57d4df60e01b81526001600160a01b03888116600483015291925060009186919084169063fc57d4df90602401602060405180830381865afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3891906116c4565b610d429190611727565b60405163fc57d4df60e01b81526001600160a01b0388811660048301529192509083169063fc57d4df90602401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db091906116c4565b610dba9082611746565b979650505050505050565b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2991906116dd565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9791906116c4565b60405163856e5bb360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905291925060009186169063856e5bb3906044016020604051808303816000875af1158015610f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3091906116c4565b90508015610f545760405163158f1c0f60e01b81526004810182905260240161027f565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906116c4565b90506000610fcd8483611710565b9050610fe36001600160a01b03861633836110eb565b50505050505050565b6001609755565b6033546001600160a01b031633146104645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027f565b6001600160a01b0381166104dd576040516342bcdf7f60e11b815260040160405180910390fd5b606580546001600160a01b03191690556104dd8161127a565b600054610100900460ff166110b45760405162461bcd60e51b815260040161027f90611768565b6104646112cc565b600054610100900460ff166110e35760405162461bcd60e51b815260040161027f90611768565b6104646112fc565b6040516001600160a01b0383166024820152604481018290526106ae90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611323565b6040516001600160a01b03808516602483015283166044820152606481018290526103b49085906323b872dd60e01b90608401611117565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151909160009182918716906111e49085906117df565b6000604051808303816000865af19150503d8060008114611221576040519150601f19603f3d011682016040523d82523d6000602084013e611226565b606091505b5091509150811580611254575080511580159061125457508080602001905181019061125291906117fb565b155b1561127257604051633e3f8f7360e01b815260040160405180910390fd5b505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166112f35760405162461bcd60e51b815260040161027f90611768565b61046433611074565b600054610100900460ff16610fec5760405162461bcd60e51b815260040161027f90611768565b6000611378826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113f89092919063ffffffff16565b905080516000148061139957508080602001905181019061139991906117fb565b6106ae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161027f565b6060611407848460008561140f565b949350505050565b6060824710156114705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161027f565b600080866001600160a01b0316858760405161148c91906117df565b60006040518083038185875af1925050503d80600081146114c9576040519150601f19603f3d011682016040523d82523d6000602084013e6114ce565b606091505b5091509150610dba8783838760608315611549578251600003611542576001600160a01b0385163b6115425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161027f565b5081611407565b611407838381511561155e5781518083602001fd5b8060405162461bcd60e51b815260040161027f9190611818565b6001600160a01b03811681146104dd57600080fd5b600080600080608085870312156115a357600080fd5b84356115ae81611578565b935060208501356115be81611578565b92506040850135915060608501356115d581611578565b939692955090935050565b80151581146104dd57600080fd5b6000806040838503121561160157600080fd5b823561160c81611578565b9150602083013561161c816115e0565b809150509250929050565b60006020828403121561163957600080fd5b813561164481611578565b9392505050565b60008060006060848603121561166057600080fd5b833561166b81611578565b9250602084013561167b81611578565b9150604084013561168b816115e0565b809150509250925092565b600080604083850312156116a957600080fd5b82356116b481611578565b9150602083013561161c81611578565b6000602082840312156116d657600080fd5b5051919050565b6000602082840312156116ef57600080fd5b815161164481611578565b634e487b7160e01b600052601160045260246000fd5b600082821015611722576117226116fa565b500390565b6000816000190483118215151615611741576117416116fa565b500290565b60008261176357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156117ce5781810151838201526020016117b6565b838111156103b45750506000910152565b600082516117f18184602087016117b3565b9190910192915050565b60006020828403121561180d57600080fd5b8151611644816115e0565b60208152600082518060208401526118378160408501602087016117b3565b601f01601f1916919091016040019291505056fea2646970667358221220a47705f55271e76cced4c09ecbb9e9fb3e92b2c5dfc6cd16d4176258da2fa06964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "params": {
          "newBorrower_": "User to borrow on behalf of"
        }
      },
      "moveDebt(address,address,uint256,address)": {
        "params": {
          "originalBorrower": "The address of the borrower, whose debt to repay",
          "repayAmount": "The amount to repay in terms of vTokenToRepay.underlying()",
          "vTokenToBorrow": "VToken to borrow from",
          "vTokenToRepay": "VToken to repay to on behalf of originalBorrower"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBorrowAllowed(address,bool)": {
        "params": {
          "allow": "Whether to allow borrowing from the corresponding vToken",
          "vTokenToBorrow": "VToken to borrow from"
        }
      },
      "setRepaymentAllowed(address,address,bool)": {
        "params": {
          "allow": "Whether to allow repaying to the corresponding vToken on behalf of originalBorrower",
          "originalBorrower": "The address of the borrower, whose debt to repay (or ANY_USER to allow   repayments for all users in the market, e.g. if the market is going to be deprecated soon)",
          "vTokenToRepay": "VToken to repay to"
        }
      },
      "sweepTokens(address)": {
        "params": {
          "token": "ERC-20 token to sweep"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "NO_ERROR": {
        "details": "VToken return value signalling about successful execution"
      },
      "newBorrower": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApproveFailed()": [
        {
          "notice": "Thrown if a contract is unable to approve a transfer"
        }
      ],
      "BorrowFailed(uint256)": [
        {
          "notice": "Thrown if borrow fails with an error code"
        }
      ],
      "BorrowNotAllowed(address)": [
        {
          "notice": "Thrown if borrowing from the corresponding vToken is not allowed"
        }
      ],
      "ComptrollerMismatch()": [
        {
          "notice": "Thrown if VTokens' comptrollers are not equal"
        }
      ],
      "RepaymentFailed(uint256)": [
        {
          "notice": "Thrown if repayment fails with an error code"
        }
      ],
      "RepaymentNotAllowed(address,address)": [
        {
          "notice": "Thrown if repaying the debts of the borrower to the corresponding vToken is not allowed"
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "BorrowAllowedSet(address,bool)": {
        "notice": "Emitted when vToken is allowed or denied to be borrowed from"
      },
      "DebtMoved(address,address,uint256,address,address,uint256)": {
        "notice": "Emitted if debt is swapped successfully"
      },
      "RepaymentAllowedSet(address,address,bool)": {
        "notice": "Emitted when vToken is allowed or denied to be borrowed from"
      },
      "SweptTokens(address,uint256)": {
        "notice": "Emitted when the owner transfers tokens, accidentially sent to this contract,   to their account"
      }
    },
    "kind": "user",
    "methods": {
      "ANY_USER()": {
        "notice": "A wildcard indicating that repayment is allowed for _any_ user in the market"
      },
      "borrowAllowed(address)": {
        "notice": "Whether to allow borrowing from the corresponding vToken"
      },
      "constructor": {
        "notice": "Constructor for the implementation contract. Sets immutable variables."
      },
      "moveDebt(address,address,uint256,address)": {
        "notice": "Repays originalBorrower's borrow in vTokenToRepay.underlying() and borrows   vTokenToBorrow.underlying() on behalf of newBorrower."
      },
      "newBorrower()": {
        "notice": "User to borrow on behalf of"
      },
      "repaymentAllowed(address,address)": {
        "notice": "Whether to allow repaying to the corresponding vToken on behalf of   a certain user. Use ANY_USER to check if repayment is allowed for any user."
      },
      "setBorrowAllowed(address,bool)": {
        "notice": "Allows or denies borrowing from the corresponding vToken"
      },
      "setRepaymentAllowed(address,address,bool)": {
        "notice": "Allows or denies repaying the debts of originalBorrower to the corresponding vToken"
      },
      "sweepTokens(address)": {
        "notice": "Transfers tokens, accidentially sent to this contract, to the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1351,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 489,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1469,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "borrowAllowed",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1476,
        "contract": "contracts/DelegateBorrowers/MoveDebtDelegate.sol:MoveDebtDelegate",
        "label": "repaymentAllowed",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
