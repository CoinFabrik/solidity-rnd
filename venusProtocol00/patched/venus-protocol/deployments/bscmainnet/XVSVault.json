{
  "address": "0xEA456C6a52c36Ae021D93cf69812260149Ec39c2",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChangedV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChangedV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExecutedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPrime",
          "name": "oldPrimeToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IPrime",
          "name": "newPrimeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPrimeRewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPrimeRewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrimePoolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrimePoolId",
          "type": "uint256"
        }
      ],
      "name": "NewPrimeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAllocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAllocPoints",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RequestedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReward",
          "type": "uint256"
        }
      ],
      "name": "RewardAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldXvs",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStore",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newXvs",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStore",
          "type": "address"
        }
      ],
      "name": "StoreUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldOwedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOwedAmount",
          "type": "uint256"
        }
      ],
      "name": "VaultDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "VaultPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "VaultResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalLockingPeriodUpdated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IXVSVaultProxy",
          "name": "xvsVaultProxy",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV5",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBEP20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "executeWithdrawal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getEligibleWithdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawalAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getRequestedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingWithdrawals",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawalRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "lockedUntil",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "afterUpgrade",
              "type": "uint128"
            }
          ],
          "internalType": "struct XVSVaultStorageV1.WithdrawalRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStakedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingRewardTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingWithdrawalsBeforeUpgrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "beforeUpgradeWithdrawalAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingXVSVaultImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfos",
      "outputs": [
        {
          "internalType": "contract IBEP20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "primePoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "primeRewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "primeToken",
      "outputs": [
        {
          "internalType": "contract IPrime",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "resume",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokenAmountsPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "setAccessControl",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IPrime",
          "name": "_primeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primeRewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_primePoolId",
          "type": "uint256"
        }
      ],
      "name": "setPrimeToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "setRewardAmountPerBlock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalLockingPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_xvs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xvsStore",
          "type": "address"
        }
      ],
      "name": "setXvsStore",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalAllocPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaultPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "xvsStore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8dd5f479371cfe7618008164af66121ad4e6164c0fdb5b974c91c56c0ebb7174",
  "receipt": {
    "to": null,
    "from": "0x8BDA9f9E1fEF0DFd404Fef338D9fE4c543d172e1",
    "contractAddress": "0xEA456C6a52c36Ae021D93cf69812260149Ec39c2",
    "transactionIndex": 30,
    "gasUsed": "4700894",
    "logsBloom": "0x
    "blockHash": "0x13f9b0a169f7c7178b453f5f979c857b127df2c7c5be6079bbcdafc4071aeaee",
    "transactionHash": "0x8dd5f479371cfe7618008164af66121ad4e6164c0fdb5b974c91c56c0ebb7174",
    "logs": [],
    "blockNumber": 33264764,
    "cumulativeGasUsed": "8254246",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f0f1ae6b21fd9459efe25e3e8925bba7",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChangedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChangedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExecutedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPrime\",\"name\":\"oldPrimeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IPrime\",\"name\":\"newPrimeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPrimeRewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPrimeRewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrimePoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrimePoolId\",\"type\":\"uint256\"}],\"name\":\"NewPrimeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAllocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllocPoints\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"RewardAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldXvs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStore\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newXvs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStore\",\"type\":\"address\"}],\"name\":\"StoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOwedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOwedAmount\",\"type\":\"uint256\"}],\"name\":\"VaultDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"VaultPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"VaultResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"WithdrawalLockingPeriodUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IXVSVaultProxy\",\"name\":\"xvsVaultProxy\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV5\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"executeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEligibleWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRequestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawalRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lockedUntil\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"afterUpgrade\",\"type\":\"uint128\"}],\"internalType\":\"struct XVSVaultStorageV1.WithdrawalRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewardTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingWithdrawalsBeforeUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeUpgradeWithdrawalAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingXVSVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primePoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primeRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primeToken\",\"outputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenAmountsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"setAccessControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"_primeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primeRewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_primePoolId\",\"type\":\"uint256\"}],\"name\":\"setPrimeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmountPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalLockingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xvs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xvsStore\",\"type\":\"address\"}],\"name\":\"setXvsStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xvsStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"add(address,uint256,address,uint256,uint256)\":{\"details\":\"This vault DOES NOT support deflationary tokens \\u2014 it expects that  the amount of transferred tokens would equal the actually deposited  amount. In practice this means that this vault DOES NOT support USDT  and similar tokens (that do not provide these guarantees).\",\"params\":{\"_allocPoint\":\"Number of allocation points assigned to this pool\",\"_lockPeriod\":\"A period between withdrawal request and a moment when it's executable\",\"_rewardPerBlock\":\"Initial reward per block, in terms of _rewardToken\",\"_rewardToken\":\"Reward token address\",\"_token\":\"Staked token\"}},\"claim(address,address,uint256)\":{\"params\":{\"_account\":\"The account for which to claim rewards\",\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"deposit(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to deposit to vault\",\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\"}},\"executeWithdrawal(address,uint256)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"return\":\"The number of current votes for `account`\"},\"getEligibleWithdrawalAmount(address,uint256,address)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\",\"_user\":\"The User Address\"},\"return\":\"withdrawalAmount Amount that the user can withdraw\"},\"getPriorVotes(address,uint256)\":{\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"return\":\"The balance that user staked\"},\"getRequestedAmount(address,uint256,address)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\",\"_user\":\"The User Address\"},\"return\":\"Total amount of requested but not yet executed withdrawals (including both executable and locked ones)\"},\"getUserInfo(address,uint256,address)\":{\"params\":{\"_pid\":\"Pool index\",\"_rewardToken\":\"Reward token address\",\"_user\":\"User address\"},\"return\":\"amount Deposited amountrewardDebt Reward debt (technical value used to track past payouts)pendingWithdrawals Requested but not yet executed withdrawals\"},\"getWithdrawalRequests(address,uint256,address)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\",\"_user\":\"The User Address\"},\"return\":\"An array of withdrawal requests\"},\"pendingReward(address,uint256,address)\":{\"params\":{\"_pid\":\"Pool index\",\"_rewardToken\":\"Reward token address\",\"_user\":\"User address\"},\"return\":\"Reward the user is eligible for in this pool, in terms of _rewardToken\"},\"pendingWithdrawalsBeforeUpgrade(address,uint256,address)\":{\"params\":{\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\",\"_user\":\"The address of the user\"},\"return\":\"beforeUpgradeWithdrawalAmount Total pending withdrawal amount in requests made before the vault upgrade\"},\"poolLength(address)\":{\"params\":{\"rewardToken\":\"Reward token address\"},\"return\":\"Number of pools that distribute the specified token as a reward\"},\"requestWithdrawal(address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to withdraw from the vault\",\"_pid\":\"The Pool Index\",\"_rewardToken\":\"The Reward Token Address\"}},\"set(address,uint256,uint256)\":{\"params\":{\"_allocPoint\":\"Number of allocation points assigned to this pool\",\"_pid\":\"Pool index\",\"_rewardToken\":\"Reward token address\"}},\"setAccessControl(address)\":{\"details\":\"Admin function to set the access control address\",\"params\":{\"newAccessControlAddress\":\"New address for the access control\"}},\"setPrimeToken(address,address,uint256)\":{\"params\":{\"_primePoolId\":\"pool id for reward\",\"_primeRewardToken\":\"address of reward token\",\"_primeToken\":\"address of the prime token contract\"}},\"setRewardAmountPerBlock(address,uint256)\":{\"params\":{\"_rewardAmount\":\"Number of allocation points assigned to this pool\",\"_rewardToken\":\"Reward token address\"}},\"setWithdrawalLockingPeriod(address,uint256,uint256)\":{\"params\":{\"_newPeriod\":\"New lock period\",\"_pid\":\"Pool index\",\"_rewardToken\":\"Reward token address\"}},\"updatePool(address,uint256)\":{\"params\":{\"_pid\":\"Pool index\",\"_rewardToken\":\"Reward token address\"}}}},\"userdoc\":{\"methods\":{\"_become(address)\":{\"notice\":\"* Admin Functions **\"},\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"add(address,uint256,address,uint256,uint256)\":{\"notice\":\"Add a new token pool\"},\"claim(address,address,uint256)\":{\"notice\":\"Claim rewards for pool\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"deposit(address,uint256,uint256)\":{\"notice\":\"Deposit XVSVault for XVS allocation\"},\"executeWithdrawal(address,uint256)\":{\"notice\":\"Execute withdrawal to XVSVault for XVS allocation\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getEligibleWithdrawalAmount(address,uint256,address)\":{\"notice\":\"Get unlocked withdrawal amount\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the xvs stake balance for an account\"},\"getRequestedAmount(address,uint256,address)\":{\"notice\":\"Get requested amount\"},\"getUserInfo(address,uint256,address)\":{\"notice\":\"Get user info with reward token address and pid\"},\"getWithdrawalRequests(address,uint256,address)\":{\"notice\":\"Returns the array of withdrawal requests that have not been executed yet\"},\"pause()\":{\"notice\":\"Pauses vault\"},\"pendingReward(address,uint256,address)\":{\"notice\":\"View function to see pending XVSs on frontend\"},\"pendingWithdrawalsBeforeUpgrade(address,uint256,address)\":{\"notice\":\"Gets the total pending withdrawal amount of a user before upgrade\"},\"poolLength(address)\":{\"notice\":\"Returns the number of pools with the specified reward token\"},\"requestWithdrawal(address,uint256,uint256)\":{\"notice\":\"Request withdrawal to XVSVault for XVS allocation\"},\"resume()\":{\"notice\":\"Resume vault\"},\"set(address,uint256,uint256)\":{\"notice\":\"Update the given pool's reward allocation point\"},\"setAccessControl(address)\":{\"notice\":\"Sets the address of the access control of this contract\"},\"setPrimeToken(address,address,uint256)\":{\"notice\":\"Sets the address of the prime token contract\"},\"setRewardAmountPerBlock(address,uint256)\":{\"notice\":\"Update the given reward token's amount per block\"},\"setWithdrawalLockingPeriod(address,uint256,uint256)\":{\"notice\":\"Update the lock period after which a requested withdrawal can be executed\"},\"updatePool(address,uint256)\":{\"notice\":\"Update reward variables of the given pool to be up-to-date\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/XVSVault/XVSVault.sol\":\"XVSVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV5.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.16;\\n\\nimport \\\"./IAccessControlManagerV5.sol\\\";\\n\\n/**\\n * @title Venus Access Control Contract.\\n * @dev This contract is helper between access control manager and actual contract\\n * This contract further inherited by other contract to integrate access controlled mechanism\\n * It provides initialise methods and verifying access methods\\n */\\n\\ncontract AccessControlledV5 {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV5 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV5) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV5(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert(\\\"Unauthorized\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a1e99d9c061a5e7ba6d764a0d2a6b3ece5a8ed39bd6cc58230a4160a7918709\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV5.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.16;\\n\\ninterface IAccessControlManagerV5 {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @notice Gives a function call permission to one single account\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * \\t\\tMay emit a {RoleGranted} event.\\n     * @param contractAddress address of contract for which call permissions will be granted\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     */\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    /**\\n     * @notice Revokes an account's permission to a particular function call\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * \\t\\tMay emit a {RoleRevoked} event.\\n     * @param contractAddress address of contract for which call permissions will be revoked\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     */\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    /**\\n     * @notice Verifies if the given account can call a praticular contract's function\\n     * @dev Since the contract is calling itself this function, we can get contracts address with msg.sender\\n     * @param account address (eoa or contract) for which call permissions will be checked\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     * @return false if the user account cannot call the particular contract function\\n     *\\n     */\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb9974cd9d02daa5d5a7eb6c092cb3d462227ee92ad505d627ecc57ad2f29964f\"},\"contracts/Tokens/Prime/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.5.16;\\n\\n/**\\n * @title IPrime\\n * @author Venus\\n * @notice Interface for Prime Token\\n */\\ninterface IPrime {\\n    /**\\n     * @notice Executed by XVSVault whenever user's XVSVault balance changes\\n     * @param user the account address whose balance was updated\\n     */\\n    function xvsUpdated(address user) external;\\n\\n    /**\\n     * @notice accrues interest and updates score for an user for a specific market\\n     * @param user the account address for which to accrue interest and update score\\n     * @param market the market for which to accrue interest and update score\\n     */\\n    function accrueInterestAndUpdateScore(address user, address market) external;\\n\\n    /**\\n     * @notice Distributes income from market since last distribution\\n     * @param vToken the market for which to distribute the income\\n     */\\n    function accrueInterest(address vToken) external;\\n}\\n\",\"keccak256\":\"0xa4f8ba3fbd95f83e1a056be73247f4c715904d94f47639d226746c2bc7b13484\"},\"contracts/Utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3c2ef780599a2ae6913282b982633f07e405a4a9c8511590df571e2b773aef9d\"},\"contracts/Utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts v4.3.2 (utils/cryptography/ECDSA.sol)\\n\\n// SPDX-Copyright-Text: OpenZeppelin, 2021\\n// SPDX-Copyright-Text: Venus, 2021\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\ncontract ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n}\\n\",\"keccak256\":\"0xf27d7ad488b72c627370afa6e9acc520d4834a082363d1dc46b5573ac40a2d0a\"},\"contracts/Utils/IBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {BEP20Detailed}.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x839b08895eb1ad83502d3631e8e9e3a856d2a8c63c46f070d604af7b26c62c07\"},\"contracts/Utils/SafeBEP20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x540ef6ddc47232a59d3ab0e95537f7a7d1c8a36f8dba315b010e60c6487bd768\"},\"contracts/Utils/SafeCast.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2 ** 128, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2 ** 64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2 ** 32, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2 ** 16, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2 ** 8, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2 ** 127 && value < 2 ** 127, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2 ** 63 && value < 2 ** 63, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2 ** 31 && value < 2 ** 31, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2 ** 15 && value < 2 ** 15, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2 ** 7 && value < 2 ** 7, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2 ** 255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe6222292bd226980fd73c00eaf3a102c8638777aa3f9c7cd9b0d0fb621da0661\"},\"contracts/Utils/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(a, b, \\\"SafeMath: addition overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9431fd772ed4abc038cdfe9ce6c0066897bd1685ad45848748d1952935d5b8ef\"},\"contracts/XVSVault/XVSVault.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Utils/ECDSA.sol\\\";\\nimport \\\"../Utils/SafeBEP20.sol\\\";\\nimport \\\"../Utils/IBEP20.sol\\\";\\nimport \\\"./XVSVaultStorage.sol\\\";\\nimport \\\"./XVSVaultErrorReporter.sol\\\";\\nimport \\\"../Tokens/Prime/IPrime.sol\\\";\\nimport \\\"../Utils/SafeCast.sol\\\";\\nimport \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV5.sol\\\";\\n\\ninterface IXVSStore {\\n    function safeRewardTransfer(address _token, address _to, uint256 _amount) external;\\n\\n    function setRewardToken(address _tokenAddress, bool status) external;\\n\\n    function rewardTokens(address _tokenAddress) external view returns (bool);\\n}\\n\\ninterface IXVSVaultProxy {\\n    function _acceptImplementation() external returns (uint);\\n\\n    function admin() external returns (address);\\n}\\n\\ncontract XVSVault is XVSVaultStorage, ECDSA, AccessControlledV5 {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    /// @notice The upper bound for the lock period in a pool, 10 years\\n    uint256 public constant MAX_LOCK_PERIOD = 60 * 60 * 24 * 365 * 10;\\n\\n    /// @notice Event emitted when deposit\\n    event Deposit(address indexed user, address indexed rewardToken, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice Event emitted when execute withrawal\\n    event ExecutedWithdrawal(address indexed user, address indexed rewardToken, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice Event emitted when request withrawal\\n    event RequestedWithdrawal(address indexed user, address indexed rewardToken, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChangedV2(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChangedV2(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice An event emitted when the reward store address is updated\\n    event StoreUpdated(address oldXvs, address oldStore, address newXvs, address newStore);\\n\\n    /// @notice An event emitted when the withdrawal locking period is updated for a pool\\n    event WithdrawalLockingPeriodUpdated(address indexed rewardToken, uint indexed pid, uint oldPeriod, uint newPeriod);\\n\\n    /// @notice An event emitted when the reward amount per block is modified for a pool\\n    event RewardAmountUpdated(address indexed rewardToken, uint oldReward, uint newReward);\\n\\n    /// @notice An event emitted when a new pool is added\\n    event PoolAdded(\\n        address indexed rewardToken,\\n        uint indexed pid,\\n        address indexed token,\\n        uint allocPoints,\\n        uint rewardPerBlock,\\n        uint lockPeriod\\n    );\\n\\n    /// @notice An event emitted when a pool allocation points are updated\\n    event PoolUpdated(address indexed rewardToken, uint indexed pid, uint oldAllocPoints, uint newAllocPoints);\\n\\n    /// @notice Event emitted when reward claimed\\n    event Claim(address indexed user, address indexed rewardToken, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice Event emitted when vault is paused\\n    event VaultPaused(address indexed admin);\\n\\n    /// @notice Event emitted when vault is resumed after pause\\n    event VaultResumed(address indexed admin);\\n\\n    /// @notice Event emitted when protocol logs a debt to a user due to insufficient funds for pending reward distribution\\n    event VaultDebtUpdated(\\n        address indexed rewardToken,\\n        address indexed userAddress,\\n        uint256 oldOwedAmount,\\n        uint256 newOwedAmount\\n    );\\n\\n    /// @notice Emitted when prime token contract address is changed\\n    event NewPrimeToken(\\n        IPrime indexed oldPrimeToken,\\n        IPrime indexed newPrimeToken,\\n        address oldPrimeRewardToken,\\n        address newPrimeRewardToken,\\n        uint256 oldPrimePoolId,\\n        uint256 newPrimePoolId\\n    );\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin can\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @dev Prevents functions to execute when vault is paused.\\n     */\\n    modifier isActive() {\\n        require(!vaultPaused, \\\"Vault is paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Pauses vault\\n     */\\n    function pause() external {\\n        _checkAccessAllowed(\\\"pause()\\\");\\n        require(!vaultPaused, \\\"Vault is already paused\\\");\\n        vaultPaused = true;\\n        emit VaultPaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Resume vault\\n     */\\n    function resume() external {\\n        _checkAccessAllowed(\\\"resume()\\\");\\n        require(vaultPaused, \\\"Vault is not paused\\\");\\n        vaultPaused = false;\\n        emit VaultResumed(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the number of pools with the specified reward token\\n     * @param rewardToken Reward token address\\n     * @return Number of pools that distribute the specified token as a reward\\n     */\\n    function poolLength(address rewardToken) external view returns (uint256) {\\n        return poolInfos[rewardToken].length;\\n    }\\n\\n    /**\\n     * @notice Add a new token pool\\n     * @dev This vault DOES NOT support deflationary tokens \\u2014 it expects that\\n     *   the amount of transferred tokens would equal the actually deposited\\n     *   amount. In practice this means that this vault DOES NOT support USDT\\n     *   and similar tokens (that do not provide these guarantees).\\n     * @param _rewardToken Reward token address\\n     * @param _allocPoint Number of allocation points assigned to this pool\\n     * @param _token Staked token\\n     * @param _rewardPerBlock Initial reward per block, in terms of _rewardToken\\n     * @param _lockPeriod A period between withdrawal request and a moment when it's executable\\n     */\\n    function add(\\n        address _rewardToken,\\n        uint256 _allocPoint,\\n        IBEP20 _token,\\n        uint256 _rewardPerBlock,\\n        uint256 _lockPeriod\\n    ) external {\\n        _checkAccessAllowed(\\\"add(address,uint256,address,uint256,uint256)\\\");\\n        _ensureNonzeroAddress(_rewardToken);\\n        _ensureNonzeroAddress(address(_token));\\n        require(address(xvsStore) != address(0), \\\"Store contract address is empty\\\");\\n        require(_allocPoint > 0, \\\"Alloc points must not be zero\\\");\\n\\n        massUpdatePools(_rewardToken);\\n\\n        PoolInfo[] storage poolInfo = poolInfos[_rewardToken];\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(poolInfo[pid].token != _token, \\\"Pool already added\\\");\\n        }\\n\\n        // We use balanceOf to get the supply amount, so shouldn't be possible to\\n        // configure pools with different reward token but the same staked token\\n        require(!isStakedToken[address(_token)], \\\"Token exists in other pool\\\");\\n\\n        totalAllocPoints[_rewardToken] = totalAllocPoints[_rewardToken].add(_allocPoint);\\n\\n        rewardTokenAmountsPerBlock[_rewardToken] = _rewardPerBlock;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                token: _token,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: block.number,\\n                accRewardPerShare: 0,\\n                lockPeriod: _lockPeriod\\n            })\\n        );\\n        isStakedToken[address(_token)] = true;\\n\\n        IXVSStore(xvsStore).setRewardToken(_rewardToken, true);\\n\\n        emit PoolAdded(_rewardToken, poolInfo.length - 1, address(_token), _allocPoint, _rewardPerBlock, _lockPeriod);\\n    }\\n\\n    /**\\n     * @notice Update the given pool's reward allocation point\\n     * @param _rewardToken Reward token address\\n     * @param _pid Pool index\\n     * @param _allocPoint Number of allocation points assigned to this pool\\n     */\\n    function set(address _rewardToken, uint256 _pid, uint256 _allocPoint) external {\\n        _checkAccessAllowed(\\\"set(address,uint256,uint256)\\\");\\n        _ensureValidPool(_rewardToken, _pid);\\n\\n        massUpdatePools(_rewardToken);\\n\\n        PoolInfo[] storage poolInfo = poolInfos[_rewardToken];\\n        uint256 newTotalAllocPoints = totalAllocPoints[_rewardToken].sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        require(newTotalAllocPoints > 0, \\\"Alloc points per reward token must not be zero\\\");\\n\\n        uint256 oldAllocPoints = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        totalAllocPoints[_rewardToken] = newTotalAllocPoints;\\n\\n        emit PoolUpdated(_rewardToken, _pid, oldAllocPoints, _allocPoint);\\n    }\\n\\n    /**\\n     * @notice Update the given reward token's amount per block\\n     * @param _rewardToken Reward token address\\n     * @param _rewardAmount Number of allocation points assigned to this pool\\n     */\\n    function setRewardAmountPerBlock(address _rewardToken, uint256 _rewardAmount) external {\\n        _checkAccessAllowed(\\\"setRewardAmountPerBlock(address,uint256)\\\");\\n        require(IXVSStore(xvsStore).rewardTokens(_rewardToken), \\\"Invalid reward token\\\");\\n        massUpdatePools(_rewardToken);\\n        uint256 oldReward = rewardTokenAmountsPerBlock[_rewardToken];\\n        rewardTokenAmountsPerBlock[_rewardToken] = _rewardAmount;\\n\\n        emit RewardAmountUpdated(_rewardToken, oldReward, _rewardAmount);\\n    }\\n\\n    /**\\n     * @notice Update the lock period after which a requested withdrawal can be executed\\n     * @param _rewardToken Reward token address\\n     * @param _pid Pool index\\n     * @param _newPeriod New lock period\\n     */\\n    function setWithdrawalLockingPeriod(address _rewardToken, uint256 _pid, uint256 _newPeriod) external {\\n        _checkAccessAllowed(\\\"setWithdrawalLockingPeriod(address,uint256,uint256)\\\");\\n        _ensureValidPool(_rewardToken, _pid);\\n        require(_newPeriod > 0 && _newPeriod < MAX_LOCK_PERIOD, \\\"Invalid new locking period\\\");\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\n        uint256 oldPeriod = pool.lockPeriod;\\n        pool.lockPeriod = _newPeriod;\\n\\n        emit WithdrawalLockingPeriodUpdated(_rewardToken, _pid, oldPeriod, _newPeriod);\\n    }\\n\\n    /**\\n     * @notice Deposit XVSVault for XVS allocation\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     * @param _amount The amount to deposit to vault\\n     */\\n    function deposit(address _rewardToken, uint256 _pid, uint256 _amount) external nonReentrant isActive {\\n        _ensureValidPool(_rewardToken, _pid);\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\n        UserInfo storage user = userInfos[_rewardToken][_pid][msg.sender];\\n        _updatePool(_rewardToken, _pid);\\n        require(pendingWithdrawalsBeforeUpgrade(_rewardToken, _pid, msg.sender) == 0, \\\"execute pending withdrawal\\\");\\n\\n        if (user.amount > 0) {\\n            uint256 pending = _computeReward(user, pool);\\n            if (pending > 0) {\\n                _transferReward(_rewardToken, msg.sender, pending);\\n                emit Claim(msg.sender, _rewardToken, _pid, pending);\\n            }\\n        }\\n        pool.token.safeTransferFrom(msg.sender, address(this), _amount);\\n        user.amount = user.amount.add(_amount);\\n        user.rewardDebt = _cumulativeReward(user, pool);\\n\\n        // Update Delegate Amount\\n        if (address(pool.token) == xvsAddress) {\\n            _moveDelegates(address(0), delegates[msg.sender], safe96(_amount, \\\"XVSVault::deposit: votes overflow\\\"));\\n        }\\n\\n        if (primeRewardToken == _rewardToken && _pid == primePoolId) {\\n            primeToken.xvsUpdated(msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _rewardToken, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim rewards for pool\\n     * @param _account The account for which to claim rewards\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     */\\n    function claim(address _account, address _rewardToken, uint256 _pid) external nonReentrant isActive {\\n        _ensureValidPool(_rewardToken, _pid);\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\n        UserInfo storage user = userInfos[_rewardToken][_pid][_account];\\n        _updatePool(_rewardToken, _pid);\\n        require(pendingWithdrawalsBeforeUpgrade(_rewardToken, _pid, _account) == 0, \\\"execute pending withdrawal\\\");\\n\\n        if (user.amount > 0) {\\n            uint256 pending = _computeReward(user, pool);\\n\\n            if (pending > 0) {\\n                user.rewardDebt = _cumulativeReward(user, pool);\\n\\n                _transferReward(_rewardToken, _account, pending);\\n                emit Claim(_account, _rewardToken, _pid, pending);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Pushes withdrawal request to the requests array and updates\\n     *   the pending withdrawals amount. The requests are always sorted\\n     *   by unlock time (descending) so that the earliest to execute requests\\n     *   are always at the end of the array.\\n     * @param _user The user struct storage pointer\\n     * @param _requests The user's requests array storage pointer\\n     * @param _amount The amount being requested\\n     */\\n    function pushWithdrawalRequest(\\n        UserInfo storage _user,\\n        WithdrawalRequest[] storage _requests,\\n        uint _amount,\\n        uint _lockedUntil\\n    ) internal {\\n        uint i = _requests.length;\\n        _requests.push(WithdrawalRequest(0, 0, 1));\\n        // Keep it sorted so that the first to get unlocked request is always at the end\\n        for (; i > 0 && _requests[i - 1].lockedUntil <= _lockedUntil; --i) {\\n            _requests[i] = _requests[i - 1];\\n        }\\n        _requests[i] = WithdrawalRequest(_amount, _lockedUntil.toUint128(), 1);\\n        _user.pendingWithdrawals = _user.pendingWithdrawals.add(_amount);\\n    }\\n\\n    /**\\n     * @notice Pops the requests with unlock time < now from the requests\\n     *   array and deducts the computed amount from the user's pending\\n     *   withdrawals counter. Assumes that the requests array is sorted\\n     *   by unclock time (descending).\\n     * @dev This function **removes** the eligible requests from the requests\\n     *   array. If this function is called, the withdrawal should actually\\n     *   happen (or the transaction should be reverted).\\n     * @param _user The user struct storage pointer\\n     * @param _requests The user's requests array storage pointer\\n     * @return beforeUpgradeWithdrawalAmount The amount eligible for withdrawal before upgrade (this amount should be\\n     *   sent to the user, otherwise the state would be inconsistent).\\n     * @return afterUpgradeWithdrawalAmount The amount eligible for withdrawal after upgrade (this amount should be\\n     *   sent to the user, otherwise the state would be inconsistent).\\n     */\\n    function popEligibleWithdrawalRequests(\\n        UserInfo storage _user,\\n        WithdrawalRequest[] storage _requests\\n    ) internal returns (uint beforeUpgradeWithdrawalAmount, uint afterUpgradeWithdrawalAmount) {\\n        // Since the requests are sorted by their unlock time, we can just\\n        // pop them from the array and stop at the first not-yet-eligible one\\n        for (uint i = _requests.length; i > 0 && isUnlocked(_requests[i - 1]); --i) {\\n            if (_requests[i - 1].afterUpgrade == 1) {\\n                afterUpgradeWithdrawalAmount = afterUpgradeWithdrawalAmount.add(_requests[i - 1].amount);\\n            } else {\\n                beforeUpgradeWithdrawalAmount = beforeUpgradeWithdrawalAmount.add(_requests[i - 1].amount);\\n            }\\n\\n            _requests.pop();\\n        }\\n        _user.pendingWithdrawals = _user.pendingWithdrawals.sub(\\n            afterUpgradeWithdrawalAmount.add(beforeUpgradeWithdrawalAmount)\\n        );\\n        return (beforeUpgradeWithdrawalAmount, afterUpgradeWithdrawalAmount);\\n    }\\n\\n    /**\\n     * @notice Checks if the request is eligible for withdrawal.\\n     * @param _request The request struct storage pointer\\n     * @return True if the request is eligible for withdrawal, false otherwise\\n     */\\n    function isUnlocked(WithdrawalRequest storage _request) private view returns (bool) {\\n        return _request.lockedUntil <= block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Execute withdrawal to XVSVault for XVS allocation\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     */\\n    function executeWithdrawal(address _rewardToken, uint256 _pid) external nonReentrant isActive {\\n        _ensureValidPool(_rewardToken, _pid);\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\n        UserInfo storage user = userInfos[_rewardToken][_pid][msg.sender];\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][msg.sender];\\n\\n        uint256 beforeUpgradeWithdrawalAmount;\\n        uint256 afterUpgradeWithdrawalAmount;\\n\\n        (beforeUpgradeWithdrawalAmount, afterUpgradeWithdrawalAmount) = popEligibleWithdrawalRequests(user, requests);\\n        require(beforeUpgradeWithdrawalAmount > 0 || afterUpgradeWithdrawalAmount > 0, \\\"nothing to withdraw\\\");\\n\\n        // Having both old-style and new-style requests is not allowed and shouldn't be possible\\n        require(beforeUpgradeWithdrawalAmount == 0 || afterUpgradeWithdrawalAmount == 0, \\\"inconsistent state\\\");\\n\\n        if (beforeUpgradeWithdrawalAmount > 0) {\\n            _updatePool(_rewardToken, _pid);\\n            uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\\n            IXVSStore(xvsStore).safeRewardTransfer(_rewardToken, msg.sender, pending);\\n            user.amount = user.amount.sub(beforeUpgradeWithdrawalAmount);\\n            user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\n            pool.token.safeTransfer(address(msg.sender), beforeUpgradeWithdrawalAmount);\\n        } else {\\n            user.amount = user.amount.sub(afterUpgradeWithdrawalAmount);\\n            totalPendingWithdrawals[_rewardToken][_pid] = totalPendingWithdrawals[_rewardToken][_pid].sub(\\n                afterUpgradeWithdrawalAmount\\n            );\\n            pool.token.safeTransfer(address(msg.sender), afterUpgradeWithdrawalAmount);\\n        }\\n\\n        emit ExecutedWithdrawal(\\n            msg.sender,\\n            _rewardToken,\\n            _pid,\\n            beforeUpgradeWithdrawalAmount.add(afterUpgradeWithdrawalAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns before and after upgrade pending withdrawal amount\\n     * @param _requests The user's requests array storage pointer\\n     * @return beforeUpgradeWithdrawalAmount The amount eligible for withdrawal before upgrade\\n     * @return afterUpgradeWithdrawalAmount The amount eligible for withdrawal after upgrade\\n     */\\n    function getRequestedWithdrawalAmount(\\n        WithdrawalRequest[] storage _requests\\n    ) internal view returns (uint beforeUpgradeWithdrawalAmount, uint afterUpgradeWithdrawalAmount) {\\n        for (uint i = _requests.length; i > 0; --i) {\\n            if (_requests[i - 1].afterUpgrade == 1) {\\n                afterUpgradeWithdrawalAmount = afterUpgradeWithdrawalAmount.add(_requests[i - 1].amount);\\n            } else {\\n                beforeUpgradeWithdrawalAmount = beforeUpgradeWithdrawalAmount.add(_requests[i - 1].amount);\\n            }\\n        }\\n        return (beforeUpgradeWithdrawalAmount, afterUpgradeWithdrawalAmount);\\n    }\\n\\n    /**\\n     * @notice Request withdrawal to XVSVault for XVS allocation\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     * @param _amount The amount to withdraw from the vault\\n     */\\n    function requestWithdrawal(address _rewardToken, uint256 _pid, uint256 _amount) external nonReentrant isActive {\\n        _ensureValidPool(_rewardToken, _pid);\\n        require(_amount > 0, \\\"requested amount cannot be zero\\\");\\n        UserInfo storage user = userInfos[_rewardToken][_pid][msg.sender];\\n        require(user.amount >= user.pendingWithdrawals.add(_amount), \\\"requested amount is invalid\\\");\\n\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][msg.sender];\\n\\n        uint beforeUpgradeWithdrawalAmount;\\n\\n        (beforeUpgradeWithdrawalAmount, ) = getRequestedWithdrawalAmount(requests);\\n        require(beforeUpgradeWithdrawalAmount == 0, \\\"execute pending withdrawal\\\");\\n\\n        _updatePool(_rewardToken, _pid);\\n        uint256 pending = _computeReward(user, pool);\\n        _transferReward(_rewardToken, msg.sender, pending);\\n\\n        uint lockedUntil = pool.lockPeriod.add(block.timestamp);\\n\\n        pushWithdrawalRequest(user, requests, _amount, lockedUntil);\\n        totalPendingWithdrawals[_rewardToken][_pid] = totalPendingWithdrawals[_rewardToken][_pid].add(_amount);\\n        user.rewardDebt = _cumulativeReward(user, pool);\\n\\n        // Update Delegate Amount\\n        if (address(pool.token) == xvsAddress) {\\n            _moveDelegates(\\n                delegates[msg.sender],\\n                address(0),\\n                safe96(_amount, \\\"XVSVault::requestWithdrawal: votes overflow\\\")\\n            );\\n        }\\n\\n        if (primeRewardToken == _rewardToken && _pid == primePoolId) {\\n            primeToken.xvsUpdated(msg.sender);\\n        }\\n\\n        emit Claim(msg.sender, _rewardToken, _pid, pending);\\n        emit RequestedWithdrawal(msg.sender, _rewardToken, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice Get unlocked withdrawal amount\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     * @param _user The User Address\\n     * @return withdrawalAmount Amount that the user can withdraw\\n     */\\n    function getEligibleWithdrawalAmount(\\n        address _rewardToken,\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint withdrawalAmount) {\\n        _ensureValidPool(_rewardToken, _pid);\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][_user];\\n        // Since the requests are sorted by their unlock time, we can take\\n        // the entries from the end of the array and stop at the first\\n        // not-yet-eligible one\\n        for (uint i = requests.length; i > 0 && isUnlocked(requests[i - 1]); --i) {\\n            withdrawalAmount = withdrawalAmount.add(requests[i - 1].amount);\\n        }\\n        return withdrawalAmount;\\n    }\\n\\n    /**\\n     * @notice Get requested amount\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     * @param _user The User Address\\n     * @return Total amount of requested but not yet executed withdrawals (including both executable and locked ones)\\n     */\\n    function getRequestedAmount(address _rewardToken, uint256 _pid, address _user) external view returns (uint256) {\\n        _ensureValidPool(_rewardToken, _pid);\\n        UserInfo storage user = userInfos[_rewardToken][_pid][_user];\\n        return user.pendingWithdrawals;\\n    }\\n\\n    /**\\n     * @notice Returns the array of withdrawal requests that have not been executed yet\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     * @param _user The User Address\\n     * @return An array of withdrawal requests\\n     */\\n    function getWithdrawalRequests(\\n        address _rewardToken,\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (WithdrawalRequest[] memory) {\\n        _ensureValidPool(_rewardToken, _pid);\\n        return withdrawalRequests[_rewardToken][_pid][_user];\\n    }\\n\\n    /**\\n     * @notice View function to see pending XVSs on frontend\\n     * @param _rewardToken Reward token address\\n     * @param _pid Pool index\\n     * @param _user User address\\n     * @return Reward the user is eligible for in this pool, in terms of _rewardToken\\n     */\\n    function pendingReward(address _rewardToken, uint256 _pid, address _user) external view returns (uint256) {\\n        _ensureValidPool(_rewardToken, _pid);\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\n        UserInfo storage user = userInfos[_rewardToken][_pid][_user];\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n        uint256 supply = pool.token.balanceOf(address(this)).sub(totalPendingWithdrawals[_rewardToken][_pid]);\\n        uint256 curBlockNumber = block.number;\\n        uint256 rewardTokenPerBlock = rewardTokenAmountsPerBlock[_rewardToken];\\n        if (curBlockNumber > pool.lastRewardBlock && supply != 0) {\\n            uint256 multiplier = curBlockNumber.sub(pool.lastRewardBlock);\\n            uint256 reward = multiplier.mul(rewardTokenPerBlock).mul(pool.allocPoint).div(\\n                totalAllocPoints[_rewardToken]\\n            );\\n            accRewardPerShare = accRewardPerShare.add(reward.mul(1e12).div(supply));\\n        }\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][_user];\\n        (, uint256 afterUpgradeWithdrawalAmount) = getRequestedWithdrawalAmount(requests);\\n        return user.amount.sub(afterUpgradeWithdrawalAmount).mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools(address _rewardToken) internal {\\n        uint256 length = poolInfos[_rewardToken].length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(_rewardToken, pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the given pool to be up-to-date\\n     * @param _rewardToken Reward token address\\n     * @param _pid Pool index\\n     */\\n    function updatePool(address _rewardToken, uint256 _pid) external isActive {\\n        _ensureValidPool(_rewardToken, _pid);\\n        _updatePool(_rewardToken, _pid);\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _updatePool(address _rewardToken, uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfos[_rewardToken][_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 supply = pool.token.balanceOf(address(this));\\n        supply = supply.sub(totalPendingWithdrawals[_rewardToken][_pid]);\\n        if (supply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 curBlockNumber = block.number;\\n        uint256 multiplier = curBlockNumber.sub(pool.lastRewardBlock);\\n        uint256 reward = multiplier.mul(rewardTokenAmountsPerBlock[_rewardToken]).mul(pool.allocPoint).div(\\n            totalAllocPoints[_rewardToken]\\n        );\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(supply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function _ensureValidPool(address rewardToken, uint256 pid) internal view {\\n        require(pid < poolInfos[rewardToken].length, \\\"vault: pool exists?\\\");\\n    }\\n\\n    /**\\n     * @notice Get user info with reward token address and pid\\n     * @param _rewardToken Reward token address\\n     * @param _pid Pool index\\n     * @param _user User address\\n     * @return amount Deposited amount\\n     * @return rewardDebt Reward debt (technical value used to track past payouts)\\n     * @return pendingWithdrawals Requested but not yet executed withdrawals\\n     */\\n    function getUserInfo(\\n        address _rewardToken,\\n        uint256 _pid,\\n        address _user\\n    ) external view returns (uint256 amount, uint256 rewardDebt, uint256 pendingWithdrawals) {\\n        _ensureValidPool(_rewardToken, _pid);\\n        UserInfo storage user = userInfos[_rewardToken][_pid][_user];\\n        amount = user.amount;\\n        rewardDebt = user.rewardDebt;\\n        pendingWithdrawals = user.pendingWithdrawals;\\n    }\\n\\n    /**\\n     * @notice Gets the total pending withdrawal amount of a user before upgrade\\n     * @param _rewardToken The Reward Token Address\\n     * @param _pid The Pool Index\\n     * @param _user The address of the user\\n     * @return beforeUpgradeWithdrawalAmount Total pending withdrawal amount in requests made before the vault upgrade\\n     */\\n    function pendingWithdrawalsBeforeUpgrade(\\n        address _rewardToken,\\n        uint256 _pid,\\n        address _user\\n    ) public view returns (uint256 beforeUpgradeWithdrawalAmount) {\\n        WithdrawalRequest[] storage requests = withdrawalRequests[_rewardToken][_pid][_user];\\n        (beforeUpgradeWithdrawalAmount, ) = getRequestedWithdrawalAmount(requests);\\n        return beforeUpgradeWithdrawalAmount;\\n    }\\n\\n    /**\\n     * @notice Get the XVS stake balance of an account (excluding the pending withdrawals)\\n     * @param account The address of the account to check\\n     * @return The balance that user staked\\n     */\\n    function getStakeAmount(address account) internal view returns (uint96) {\\n        require(xvsAddress != address(0), \\\"XVSVault::getStakeAmount: xvs address is not set\\\");\\n\\n        PoolInfo[] storage poolInfo = poolInfos[xvsAddress];\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if (address(poolInfo[pid].token) == address(xvsAddress)) {\\n                UserInfo storage user = userInfos[xvsAddress][pid][account];\\n                return safe96(user.amount.sub(user.pendingWithdrawals), \\\"XVSVault::getStakeAmount: votes overflow\\\");\\n            }\\n        }\\n        return uint96(0);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external isActive {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint nonce,\\n        uint expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external isActive {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"XVSVault\\\")), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ECDSA.recover(digest, v, r, s);\\n        require(nonce == nonces[signatory]++, \\\"XVSVault::delegateBySig: invalid nonce\\\");\\n        require(block.timestamp <= expiry, \\\"XVSVault::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = getStakeAmount(delegator);\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChangedV2(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"XVSVault::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"XVSVault::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"XVSVault::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChangedV2(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2 ** 96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @notice Determine the xvs stake balance for an account\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The balance that user staked\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96) {\\n        require(blockNumber < block.number, \\\"XVSVault::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    function _become(IXVSVaultProxy xvsVaultProxy) external {\\n        require(msg.sender == xvsVaultProxy.admin(), \\\"only proxy admin can change brains\\\");\\n        require(xvsVaultProxy._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    function setXvsStore(address _xvs, address _xvsStore) external onlyAdmin {\\n        _ensureNonzeroAddress(_xvs);\\n        _ensureNonzeroAddress(_xvsStore);\\n\\n        address oldXvsContract = xvsAddress;\\n        address oldStore = xvsStore;\\n        require(oldXvsContract == address(0), \\\"already initialized\\\");\\n\\n        xvsAddress = _xvs;\\n        xvsStore = _xvsStore;\\n\\n        _notEntered = true;\\n\\n        emit StoreUpdated(oldXvsContract, oldStore, _xvs, _xvsStore);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the prime token contract\\n     * @param _primeToken address of the prime token contract\\n     * @param _primeRewardToken address of reward token\\n     * @param _primePoolId pool id for reward\\n     */\\n    function setPrimeToken(IPrime _primeToken, address _primeRewardToken, uint256 _primePoolId) external onlyAdmin {\\n        require(address(_primeToken) != address(0), \\\"prime token cannot be zero address\\\");\\n        require(_primeRewardToken != address(0), \\\"reward cannot be zero address\\\");\\n\\n        _ensureValidPool(_primeRewardToken, _primePoolId);\\n\\n        emit NewPrimeToken(primeToken, _primeToken, primeRewardToken, _primeRewardToken, primePoolId, _primePoolId);\\n\\n        primeToken = _primeToken;\\n        primeRewardToken = _primeRewardToken;\\n        primePoolId = _primePoolId;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlAddress New address for the access control\\n     */\\n    function setAccessControl(address newAccessControlAddress) external onlyAdmin {\\n        _setAccessControlManager(newAccessControlAddress);\\n    }\\n\\n    /**\\n     * @dev Reverts if the provided address is a zero address\\n     * @param address_ Address to check\\n     */\\n    function _ensureNonzeroAddress(address address_) internal pure {\\n        require(address_ != address(0), \\\"zero address not allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Transfers the reward to the user, taking into account the rewards store\\n     *   balance and the previous debt. If there are not enough rewards in the store,\\n     *   transfers the available funds and records the debt amount in pendingRewardTransfers.\\n     * @param rewardToken Reward token address\\n     * @param userAddress User address\\n     * @param amount Reward amount, in reward tokens\\n     */\\n    function _transferReward(address rewardToken, address userAddress, uint256 amount) internal {\\n        address xvsStore_ = xvsStore;\\n        uint256 storeBalance = IBEP20(rewardToken).balanceOf(xvsStore_);\\n        uint256 debtDueToFailedTransfers = pendingRewardTransfers[rewardToken][userAddress];\\n        uint256 fullAmount = amount.add(debtDueToFailedTransfers);\\n\\n        if (fullAmount <= storeBalance) {\\n            if (debtDueToFailedTransfers != 0) {\\n                pendingRewardTransfers[rewardToken][userAddress] = 0;\\n                emit VaultDebtUpdated(rewardToken, userAddress, debtDueToFailedTransfers, 0);\\n            }\\n            IXVSStore(xvsStore_).safeRewardTransfer(rewardToken, userAddress, fullAmount);\\n            return;\\n        }\\n        // Overflow isn't possible due to the check above\\n        uint256 newOwedAmount = fullAmount - storeBalance;\\n        pendingRewardTransfers[rewardToken][userAddress] = newOwedAmount;\\n        emit VaultDebtUpdated(rewardToken, userAddress, debtDueToFailedTransfers, newOwedAmount);\\n        IXVSStore(xvsStore_).safeRewardTransfer(rewardToken, userAddress, storeBalance);\\n    }\\n\\n    /**\\n     * @dev Computes cumulative reward for all user's shares\\n     * @param user UserInfo storage struct\\n     * @param pool PoolInfo storage struct\\n     */\\n    function _cumulativeReward(UserInfo storage user, PoolInfo storage pool) internal view returns (uint256) {\\n        return user.amount.sub(user.pendingWithdrawals).mul(pool.accRewardPerShare).div(1e12);\\n    }\\n\\n    /**\\n     * @dev Computes the reward for all user's shares\\n     * @param user UserInfo storage struct\\n     * @param pool PoolInfo storage struct\\n     */\\n    function _computeReward(UserInfo storage user, PoolInfo storage pool) internal view returns (uint256) {\\n        return _cumulativeReward(user, pool).sub(user.rewardDebt);\\n    }\\n}\\n\",\"keccak256\":\"0xf2e3b3fe8d2e2a3b668fcefda44598ec0dbbe6cbb1ac222f42381109bf64bc38\"},\"contracts/XVSVault/XVSVaultErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract XVSVaultErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0xa79877a281d024f0d03dbf1842a36a972ee6c1aa36ba93e3d646726d40684a26\"},\"contracts/XVSVault/XVSVaultStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../Utils/SafeMath.sol\\\";\\nimport \\\"../Utils/IBEP20.sol\\\";\\nimport \\\"../Tokens/Prime/IPrime.sol\\\";\\n\\ncontract XVSVaultAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of XVS Vault\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @notice Pending brains of XVS Vault\\n     */\\n    address public pendingXVSVaultImplementation;\\n}\\n\\ncontract XVSVaultStorageV1 is XVSVaultAdminStorage {\\n    /// @notice Guard variable for re-entrancy checks\\n    bool internal _notEntered;\\n\\n    /// @notice The reward token store\\n    address public xvsStore;\\n\\n    /// @notice The xvs token address\\n    address public xvsAddress;\\n\\n    // Reward tokens created per block indentified by reward token address.\\n    mapping(address => uint256) public rewardTokenAmountsPerBlock;\\n\\n    /// @notice Info of each user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 pendingWithdrawals;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBEP20 token; // Address of token contract to stake.\\n        uint256 allocPoint; // How many allocation points assigned to this pool.\\n        uint256 lastRewardBlock; // Last block number that reward tokens distribution occurs.\\n        uint256 accRewardPerShare; // Accumulated per share, times 1e12. See below.\\n        uint256 lockPeriod; // Min time between withdrawal request and its execution.\\n    }\\n\\n    // Infomation about a withdrawal request\\n    struct WithdrawalRequest {\\n        uint256 amount;\\n        uint128 lockedUntil;\\n        uint128 afterUpgrade;\\n    }\\n\\n    // Info of each user that stakes tokens.\\n    mapping(address => mapping(uint256 => mapping(address => UserInfo))) internal userInfos;\\n\\n    // Info of each pool.\\n    mapping(address => PoolInfo[]) public poolInfos;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    mapping(address => uint256) public totalAllocPoints;\\n\\n    // Info of requested but not yet executed withdrawals\\n    mapping(address => mapping(uint256 => mapping(address => WithdrawalRequest[]))) internal withdrawalRequests;\\n\\n    /// @notice DEPRECATED A record of each accounts delegate (before the voting power fix)\\n    mapping(address => address) private __oldDelegatesSlot;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice DEPRECATED A record of votes checkpoints for each account, by index (before the voting power fix)\\n    mapping(address => mapping(uint32 => Checkpoint)) private __oldCheckpointsSlot;\\n\\n    /// @notice DEPRECATED The number of checkpoints for each account (before the voting power fix)\\n    mapping(address => uint32) private __oldNumCheckpointsSlot;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint) public nonces;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n}\\n\\ncontract XVSVaultStorage is XVSVaultStorageV1 {\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice Tracks pending withdrawals for all users for a particular reward token and pool id\\n    mapping(address => mapping(uint256 => uint256)) internal totalPendingWithdrawals;\\n\\n    /// @notice pause indicator for Vault\\n    bool public vaultPaused;\\n\\n    /// @notice if the token is added to any of the pools\\n    mapping(address => bool) public isStakedToken;\\n\\n    /// @notice Amount we owe to users because of failed transfer attempts\\n    mapping(address => mapping(address => uint256)) public pendingRewardTransfers;\\n\\n    /// @notice Prime token contract address\\n    IPrime public primeToken;\\n\\n    /// @notice Reward token for which prime token is issued for staking\\n    address public primeRewardToken;\\n\\n    /// @notice Pool ID for which prime token is issued for staking\\n    uint256 public primePoolId;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x6389c160d86eab54ce1a8a5138c39f38d858381b7d8881d146cd937feab3dac9\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556153a8806100326000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c80638456cb5911610182578063c2102596116100e9578063e7a324dc116100a2578063f55401621161007c578063f55401621461061c578063f851a44014610624578063fba1b1f91461062c578063fe5a451a1461063f576102bb565b8063e7a324dc146105eb578063e8f2be6f146105f3578063f1127ed8146105fb576102bb565b8063c210259614610577578063c3c754a814610597578063c3cda520146105aa578063d7ae45e2146105bd578063dae66bbe146105d0578063de0368b2146105e3576102bb565b80639e2b6c4d1161013b5780639e2b6c4d1461050e578063a09eab7a14610521578063a9d69a6914610534578063add8933714610547578063b4a0bdf31461054f578063b4b5ea5714610564576102bb565b80638456cb59146104875780638ed7333d1461048f57806392e35000146104a257806393c7c4d1146104c657806398e1b31b146104d9578063996cba68146104fb576102bb565b80634298bdbd116102265780636fcfff45116101df5780636fcfff45146103f957806373d025d614610419578063782d6fe11461042e5780637ac924561461044e5780637ecebe00146104615780638308d7e914610474576102bb565b80634298bdbd14610392578063587cde1e146103a55780635c19a95c146103b85780635c60da1b146103cb5780635ff56315146103d35780636dd77cbd146103e6576102bb565b806320606b701161027857806320606b701461033f57806324f52bbf14610347578063267822471461035c5780632eda5c6c14610364578063358ae036146103775780633d4180f91461037f576102bb565b8063046f7da2146102c05780630af13728146102ca5780630efe6a8b146102f3578063115b512f1461030657806319129e5a146103195780631d504dc61461032c575b600080fd5b6102c8610647565b005b6102dd6102d8366004613de9565b6106d2565b6040516102ea9190614d0f565b60405180910390f35b6102c8610301366004613ea1565b610718565b6102c8610314366004613ea1565b610a0d565b6102c8610327366004613cf6565b610dc1565b6102c861033a366004613fc9565b610df7565b6102dd610f2a565b61034f610f41565b6040516102ea9190614bad565b61034f610f50565b6102dd610372366004613cf6565b610f5f565b61034f610f71565b6102dd61038d366004613d32565b610f80565b6102dd6103a0366004613cf6565b610f9d565b61034f6103b3366004613cf6565b610faf565b6102c86103c6366004613cf6565b610fca565b61034f610ff7565b6102c86103e1366004613d32565b611006565b6102dd6103f4366004613de9565b6110fa565b61040c610407366004613cf6565b6111af565b6040516102ea919061508d565b6104216111c7565b6040516102ea9190614d01565b61044161043c366004613db9565b6111d0565b6040516102ea91906150b6565b6102c861045c366004613db9565b6113df565b6102dd61046f366004613cf6565b611728565b6102c8610482366004613ea1565b61173a565b6102c86118e0565b6102c861049d366004613db9565b611965565b6104b56104b0366004613db9565b6119a0565b6040516102ea959493929190614d7c565b6102c86104d4366004613db9565b6119f5565b6104ec6104e7366004613de9565b611b1b565b6040516102ea93929190615072565b6102c8610509366004613d6c565b611b6d565b6102c861051c366004613ea1565b611cff565b6102dd61052f366004613de9565b611dea565b6102dd610542366004613de9565b61202f565b61034f612071565b610557612080565b6040516102ea9190614d6e565b610441610572366004613cf6565b61208f565b61058a610585366004613de9565b612102565b6040516102ea9190614cf0565b6104216105a5366004613cf6565b6121bc565b6102c86105b8366004613ed3565b6121d1565b6102dd6105cb366004613cf6565b612375565b6102c86105de366004613fa8565b612390565b61034f61249c565b6102dd6124ab565b6102dd6124b7565b61060e610609366004613f5a565b6124bd565b6040516102ea92919061509b565b6102dd6124f2565b61034f6124fa565b6102c861063a366004613e2c565b612509565b6105576127d5565b61067060405180604001604052806008815260200167726573756d65282960c01b8152506127e4565b60135460ff1661069b5760405162461bcd60e51b815260040161069290614e39565b60405180910390fd5b6013805460ff1916905560405133907fd2619572a1464e0df0bb351d834fd47f3350984d7bfdb1ab69cfcb0b8e42141590600090a2565b60006106de8484612886565b506001600160a01b0380841660009081526007602090815260408083208684528252808320938516835292905220600201545b9392505050565b600354600160a01b900460ff166107415760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff16156107715760405162461bcd60e51b815260040161069290614e29565b61077b8383612886565b6001600160a01b038316600090815260086020526040812080548490811061079f57fe5b600091825260208083206001600160a01b038816845260078252604080852088865283528085203386529092529220600590910290910191506107e285856128bd565b6107ed85853361202f565b1561080a5760405162461bcd60e51b815260040161069290614f39565b80541561087f57600061081d8284612a78565b9050801561087d57610830863383612a8c565b84866001600160a01b0316336001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e94645846040516108749190614d0f565b60405180910390a45b505b815461089c906001600160a01b031633308663ffffffff612d0516565b80546108ae908463ffffffff612d6616565b81556108ba8183612da8565b600182015560055482546001600160a01b039081169116141561092157336000908152600f6020908152604080832054815160608101909252602180835261092194936001600160a01b039092169261091c9289929061525a90830139612dd6565b612e05565b6017546001600160a01b03868116911614801561093f575060185484145b156109a7576016546040516337f23cd360e01b81526001600160a01b03909116906337f23cd390610974903390600401614bbb565b600060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050505b83856001600160a01b0316336001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7866040516109eb9190614d0f565b60405180910390a450506003805460ff60a01b1916600160a01b179055505050565b600354600160a01b900460ff16610a365760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff1615610a665760405162461bcd60e51b815260040161069290614e29565b610a708383612886565b60008111610a905760405162461bcd60e51b815260040161069290614f59565b6001600160a01b0383166000908152600760209081526040808320858452825280832033845290915290206002810154610ad0908363ffffffff612d6616565b81541015610af05760405162461bcd60e51b815260040161069290615019565b6001600160a01b0384166000908152600860205260408120805485908110610b1457fe5b600091825260208083206001600160a01b0389168452600a825260408085208986528352808520338652909252908320600590920201925090610b5682612f97565b5090508015610b775760405162461bcd60e51b815260040161069290614f39565b610b8187876128bd565b6000610b8d8585612a78565b9050610b9a883383612a8c565b6004840154600090610bb2904263ffffffff612d6616565b9050610bc08685898461303b565b6001600160a01b03891660009081526012602090815260408083208b8452909152902054610bf4908863ffffffff612d6616565b6001600160a01b038a1660009081526012602090815260408083208c8452909152902055610c228686612da8565b600187015560055485546001600160a01b0390811691161415610c8557336000908152600f6020908152604080832054815160608101909252602b808352610c85946001600160a01b0390921693919261091c928d929061520790830139612dd6565b6017546001600160a01b038a81169116148015610ca3575060185488145b15610d0b576016546040516337f23cd360e01b81526001600160a01b03909116906337f23cd390610cd8903390600401614bbb565b600060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b505050505b87896001600160a01b0316336001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e9464585604051610d4f9190614d0f565b60405180910390a487896001600160a01b0316336001600160a01b03167f88a254a0ef28a0b9e957ff600beae69870f6f924065147f3627c3f814e60ec118a604051610d9b9190614d0f565b60405180910390a450506003805460ff60a01b1916600160a01b17905550505050505050565b6000546001600160a01b03163314610deb5760405162461bcd60e51b815260040161069290614fa9565b610df48161321f565b50565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e6a9190810190613d14565b6001600160a01b0316336001600160a01b031614610e9a5760405162461bcd60e51b815260040161069290615029565b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ed557600080fd5b505af1158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f0d9190810190613fe7565b15610df45760405162461bcd60e51b815260040161069290614fb9565b604051610f3690614b97565b604051809103902081565b6004546001600160a01b031681565b6001546001600160a01b031681565b60066020526000908152604090205481565b6005546001600160a01b031681565b601560209081526000928352604080842090915290825290205481565b60096020526000908152604090205481565b600f602052600090815260409020546001600160a01b031681565b60135460ff1615610fed5760405162461bcd60e51b815260040161069290614e29565b610df433826132a4565b6002546001600160a01b031681565b6000546001600160a01b031633146110305760405162461bcd60e51b815260040161069290614fa9565b61103982613333565b61104281613333565b6005546004546001600160a01b03918216911681156110735760405162461bcd60e51b815260040161069290614ef9565b600580546001600160a01b038087166001600160a01b03199283161790925560048054928616929091169190911790556003805460ff60a01b1916600160a01b1790556040517f559f314bb90394a4a9ceb724f365b36a53587d894352c43d12901fd680101456906110ec908490849088908890614c2c565b60405180910390a150505050565b60006111068484612886565b6001600160a01b038085166000908152600a60209081526040808320878452825280832093861683529290522080545b600081118015611166575061116682600183038154811061115357fe5b9060005260206000209060020201613359565b156111a65761119b82600183038154811061117d57fe5b6000918252602090912060029091020154849063ffffffff612d6616565b925060001901611136565b50509392505050565b60116020526000908152604090205463ffffffff1681565b60135460ff1681565b60004382106111f15760405162461bcd60e51b815260040161069290614f09565b6001600160a01b03831660009081526011602052604090205463ffffffff168061121f5760009150506113d9565b6001600160a01b038416600090815260106020908152604080832063ffffffff60001986018116855292529091205416831061129b576001600160a01b03841660009081526010602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b031690506113d9565b6001600160a01b038416600090815260106020908152604080832083805290915290205463ffffffff168310156112d65760009150506113d9565b600060001982015b8163ffffffff168163ffffffff16111561139957600282820363ffffffff16048103611308613c87565b506001600160a01b038716600090815260106020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415611374576020015194506113d99350505050565b805163ffffffff1687111561138b57819350611392565b6001820392505b50506112de565b506001600160a01b038516600090815260106020908152604080832063ffffffff909416835292905220546001600160601b03600160201b909104169150505b92915050565b600354600160a01b900460ff166114085760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff16156114385760405162461bcd60e51b815260040161069290614e29565b6114428282612886565b6001600160a01b038216600090815260086020526040812080548390811061146657fe5b600091825260208083206001600160a01b038716808552600783526040808620888752845280862033808852908552818720928752600a85528187208988528552818720908752909352918420600590930201935091806114c7848461336e565b9092509050811515806114da5750600081115b6114f65760405162461bcd60e51b815260040161069290614fc9565b811580611501575080155b61151d5760405162461bcd60e51b815260040161069290614de9565b81156116365761152d87876128bd565b6000611573856001015461156764e8d4a5100061155b8a600301548a6000015461346590919063ffffffff16565b9063ffffffff61349f16565b9063ffffffff6134e116565b6004805460405163135b33cd60e31b81529293506001600160a01b031691639ad99e68916115a7918c913391879101614c04565b600060405180830381600087803b1580156115c157600080fd5b505af11580156115d5573d6000803e3d6000fd5b505086546115ec925090508463ffffffff6134e116565b808655600387015461160f9164e8d4a510009161155b919063ffffffff61346516565b60018601558554611630906001600160a01b0316338563ffffffff61352316565b506116ba565b8354611648908263ffffffff6134e116565b84556001600160a01b038716600090815260126020908152604080832089845290915290205461167e908263ffffffff6134e116565b6001600160a01b0380891660009081526012602090815260408083208b845290915290209190915585546116ba9116338363ffffffff61352316565b856001600160a01b038816337fe31da05fae6db869f5ea51f4b638aa6884070b6c87f18f63bd2291a12cb2f5186116f7868663ffffffff612d6616565b6040516117049190614d0f565b60405180910390a450506003805460ff60a01b1916600160a01b1790555050505050565b600e6020526000908152604090205481565b6117786040518060400160405280601c81526020017f73657428616464726573732c75696e743235362c75696e7432353629000000008152506127e4565b6117828383612886565b61178b83613545565b6001600160a01b038316600090815260086020526040812080549091906118049084906117f8908590889081106117be57fe5b60009182526020808320600160059093020191909101546001600160a01b038b16835260099091526040909120549063ffffffff6134e116565b9063ffffffff612d6616565b9050600081116118265760405162461bcd60e51b815260040161069290615039565b600082858154811061183457fe5b90600052602060002090600502016001015490508383868154811061185557fe5b9060005260206000209060050201600101819055508160096000886001600160a01b03166001600160a01b031681526020019081526020016000208190555084866001600160a01b03167f6ee09c6cb801194690c195c69f465aaf7c80255cbeafaab9600f47ed79de2ca983876040516118d0929190615064565b60405180910390a3505050505050565b611908604051806040016040528060078152602001667061757365282960c81b8152506127e4565b60135460ff161561192b5760405162461bcd60e51b815260040161069290614eb9565b6013805460ff1916600117905560405133907fdffada2889ebfab9224c24069d833f3de835d8cf99872d49e7b7ba5fccb7a46f90600090a2565b60135460ff16156119885760405162461bcd60e51b815260040161069290614e29565b6119928282612886565b61199c82826128bd565b5050565b600860205281600052604060002081815481106119b957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039093169550909350919085565b611a166040518060600160405280602881526020016152b3602891396127e4565b60048054604051633d6ac5b360e21b81526001600160a01b039091169163f5ab16cc91611a4591869101614bad565b60206040518083038186803b158015611a5d57600080fd5b505afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a959190810190613f8a565b611ab15760405162461bcd60e51b815260040161069290614f99565b611aba82613545565b6001600160a01b0382166000818152600660205260409081902080549084905590519091907fad96cee0d692f0250b98e085504f399da6733854908215f6203fe3c69366d9f590611b0e9084908690615064565b60405180910390a2505050565b6000806000611b2a8686612886565b5050506001600160a01b03928316600090815260076020908152604080832094835293815283822092909416815292529020805460018201546002909201549092565b600354600160a01b900460ff16611b965760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff1615611bc65760405162461bcd60e51b815260040161069290614e29565b611bd08282612886565b6001600160a01b0382166000908152600860205260408120805483908110611bf457fe5b600091825260208083206001600160a01b0380881685526007835260408086208887528452808620918a1686529252922060059091029091019150611c3984846128bd565b611c4484848761202f565b15611c615760405162461bcd60e51b815260040161069290614f39565b805415611ce5576000611c748284612a78565b90508015611ce357611c868284612da8565b6001830155611c96858783612a8c565b83856001600160a01b0316876001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e9464584604051611cda9190614d0f565b60405180910390a45b505b50506003805460ff60a01b1916600160a01b179055505050565b611d206040518060600160405280603381526020016152db603391396127e4565b611d2a8383612886565b600081118015611d3d57506312cc030081105b611d595760405162461bcd60e51b815260040161069290614fd9565b6001600160a01b0383166000908152600860205260408120805484908110611d7d57fe5b9060005260206000209060050201905060008160040154905082826004018190555083856001600160a01b03167f0bcf80c5060ccf99b7a993c57a94b232fc2c5c04bd74c7c7d174595fee6bc31f8386604051611ddb929190615064565b60405180910390a35050505050565b6000611df68484612886565b6001600160a01b0384166000908152600860205260408120805485908110611e1a57fe5b600091825260208083206001600160a01b03808a168086526007845260408087208b885285528087208a8416885285528087206003600590970290940195860154918752601285528087208b885290945283862054855494516370a0823160e01b8152959750929590949093611ef1939216906370a0823190611ea1903090600401614bad565b60206040518083038186803b158015611eb957600080fd5b505afa158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115679190810190613fe7565b6001600160a01b0389166000908152600660205260409020546002860154919250439182118015611f2157508215155b15611fb7576000611f3f8760020154846134e190919063ffffffff16565b6001600160a01b038c1660009081526009602052604081205460018a01549293509091611f87919061155b90611f7b868863ffffffff61346516565b9063ffffffff61346516565b9050611fb2611fa58661155b8464e8d4a5100063ffffffff61346516565b879063ffffffff612d6616565b955050505b6001600160a01b03808b166000908152600a602090815260408083208d84528252808320938c16835292905290812090611ff082612f97565b91505061201f876001015461156764e8d4a5100061155b8a611f7b878e600001546134e190919063ffffffff16565b9c9b505050505050505050505050565b6001600160a01b038084166000908152600a602090815260408083208684528252808320938516835292905290812061206781612f97565b5095945050505050565b6017546001600160a01b031681565b6047546001600160a01b031690565b6001600160a01b03811660009081526011602052604081205463ffffffff16806120ba5760006120f9565b6001600160a01b0383166000908152601060209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9150505b919050565b606061210e8484612886565b6001600160a01b038085166000908152600a602090815260408083208784528252808320938616835292815282822080548451818402810184019095528085529092909184015b828210156121af5760008481526020908190206040805160608101825260028602909201805483526001908101546001600160801b0380821685870152600160801b90910416918301919091529083529092019101612155565b5050505090509392505050565b60146020526000908152604090205460ff1681565b60135460ff16156121f45760405162461bcd60e51b815260040161069290614e29565b600060405161220290614b97565b604080519182900382208282019091526008825267161594d5985d5b1d60c21b6020909201919091527fddfcc46608a8bd52ebf900f03a24cc97b73a6046cec8c5d0f74a211e376e967a61225461357a565b306040516020016122689493929190614d2b565b604051602081830303815290604052805190602001209050600060405161228e90614ba2565b6040519081900381206122a9918a908a908a90602001614d1d565b604051602081830303815290604052805190602001209050600082826040516020016122d6929190614b66565b60405160208183030381529060405280519060200120905060006122fc8288888861357e565b6001600160a01b0381166000908152600e60205260409020805460018101909155909150891461233e5760405162461bcd60e51b815260040161069290614e99565b8742111561235e5760405162461bcd60e51b815260040161069290614e79565b612368818b6132a4565b505050505b505050505050565b6001600160a01b031660009081526008602052604090205490565b6000546001600160a01b031633146123ba5760405162461bcd60e51b815260040161069290614fa9565b6001600160a01b0383166123e05760405162461bcd60e51b815260040161069290614e89565b6001600160a01b0382166124065760405162461bcd60e51b815260040161069290614f19565b6124108282612886565b6016546017546018546040516001600160a01b03808816948116937f8def9436d6e31b89ed00948ba91d0cb6936eada5154cb1b45b55683fb9e492379361245f93919092169188918890614c85565b60405180910390a3601680546001600160a01b039485166001600160a01b0319918216179091556017805493909416921691909117909155601855565b6003546001600160a01b031681565b604051610f3690614ba2565b60185481565b601060209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6312cc030081565b6000546001600160a01b031681565b61252a6040518060600160405280602c815260200161533a602c91396127e4565b61253385613333565b61253c83613333565b6004546001600160a01b03166125645760405162461bcd60e51b815260040161069290614e09565b600084116125845760405162461bcd60e51b815260040161069290614fe9565b61258d85613545565b6001600160a01b0385166000908152600860205260408120805490915b8181101561260857856001600160a01b03168382815481106125c857fe5b60009182526020909120600590910201546001600160a01b031614156126005760405162461bcd60e51b815260040161069290614f79565b6001016125aa565b506001600160a01b03851660009081526014602052604090205460ff16156126425760405162461bcd60e51b815260040161069290614ee9565b6001600160a01b03871660009081526009602052604090205461266b908763ffffffff612d6616565b6001600160a01b0388811660009081526009602090815260408083209490945560068152838220889055835160a0810185528984168082528183018c81524383880190815260608401868152608085018c81528b5460018082018e558d8a52888a209751600590920290970180546001600160a01b031916918b169190911781559351848701559151600284015551600383015551600491820155908452601490925291849020805460ff1916831790558054935163fb66fb4d60e01b8152939092169263fb66fb4d92612743928c92909101614cba565b600060405180830381600087803b15801561275d57600080fd5b505af1158015612771573d6000803e3d6000fd5b50505050846001600160a01b03166001838054905003886001600160a01b03167fd7fa4bff1cd2253c0789c3291a786a6f6b1a3b4569a75af683a15d52abb6a0bf8988886040516127c493929190615072565b60405180910390a450505050505050565b6016546001600160a01b031681565b6047546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906128179033908690600401614bc9565b60206040518083038186803b15801561282f57600080fd5b505afa158015612843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128679190810190613f8a565b90508061199c5760405162461bcd60e51b815260040161069290614e49565b6001600160a01b038216600090815260086020526040902054811061199c5760405162461bcd60e51b815260040161069290614df9565b6001600160a01b03821660009081526008602052604081208054839081106128e157fe5b9060005260206000209060050201905080600201544311612902575061199c565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612932903090600401614bad565b60206040518083038186803b15801561294a57600080fd5b505afa15801561295e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129829190810190613fe7565b6001600160a01b03851660009081526012602090815260408083208784529091529020549091506129ba90829063ffffffff6134e116565b9050806129ce57504360029091015561199c565b600282015443906000906129e990839063ffffffff6134e116565b6001600160a01b03871660009081526009602090815260408083205460018901546006909352908320549394509192612a32929161155b91611f7b90879063ffffffff61346516565b9050612a61612a508561155b8464e8d4a5100063ffffffff61346516565b60038701549063ffffffff612d6616565b600386015550504360029093019290925550505050565b600061071183600101546115678585612da8565b600480546040516370a0823160e01b81526001600160a01b03918216926000928716916370a0823191612ac191869101614bad565b60206040518083038186803b158015612ad957600080fd5b505afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b119190810190613fe7565b6001600160a01b038087166000908152601560209081526040808320938916835292905290812054919250612b4c858363ffffffff612d6616565b9050828111612c2a578115612bbf576001600160a01b038088166000818152601560209081526040808320948b1680845294909152808220829055517f6bdfd5e51d01475945224d3d37965916fd8df699ef9e8888af4359aa8622216091612bb691879190615049565b60405180910390a35b60405163135b33cd60e31b81526001600160a01b03851690639ad99e6890612bef908a908a908690600401614c6a565b600060405180830381600087803b158015612c0957600080fd5b505af1158015612c1d573d6000803e3d6000fd5b5050505050505050612d00565b6001600160a01b038088166000818152601560209081526040808320948b168084529490915290819020868503908190559051909291907f6bdfd5e51d01475945224d3d37965916fd8df699ef9e8888af4359aa8622216090612c909087908690615064565b60405180910390a360405163135b33cd60e31b81526001600160a01b03861690639ad99e6890612cc8908b908b908990600401614c6a565b600060405180830381600087803b158015612ce257600080fd5b505af1158015612cf6573d6000803e3d6000fd5b5050505050505050505b505050565b604051612d609085906323b872dd60e01b90612d2990879087908790602401614c6a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526135a8565b50505050565b600061071183836040518060400160405280601b81526020017f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525061368d565b600061071164e8d4a5100061155b8460030154611f7b876002015488600001546134e190919063ffffffff16565b600081600160601b8410612dfd5760405162461bcd60e51b81526004016106929190614dc8565b509192915050565b816001600160a01b0316836001600160a01b031614158015612e3057506000816001600160601b0316115b15612d00576001600160a01b03831615612ee8576001600160a01b03831660009081526011602052604081205463ffffffff169081612e70576000612eaf565b6001600160a01b0385166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000612ed682856040518060600160405280602c815260200161530e602c91396136bd565b9050612ee4868484846136fc565b5050505b6001600160a01b03821615612d00576001600160a01b03821660009081526011602052604081205463ffffffff169081612f23576000612f62565b6001600160a01b0384166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000612f8982856040518060600160405280602b81526020016151dc602b91396138b1565b905061236d858484846136fc565b805460009081905b801561303557836001820381548110612fb457fe5b6000918252602090912060016002909202018101546001600160801b03600160801b90910416141561301757613010846001830381548110612ff257fe5b6000918252602090912060029091020154839063ffffffff612d6616565b915061302c565b61302984600183038154811061117d57fe5b92505b60001901612f9f565b50915091565b8254604080516060810182526000808252602080830182815260019484018581528587018a5589845291909220925160028602909301928355905191909201805492516001600160801b03908116600160801b029281166001600160801b0319909416939093179092161790555b6000811180156130e45750818460018303815481106130c457fe5b60009182526020909120600160029092020101546001600160801b031611155b1561316b578360018203815481106130f857fe5b906000526020600020906002020184828154811061311257fe5b600091825260209091208254600290920201908155600191820180549290910180546001600160801b0319166001600160801b03938416178082559154600160801b9081900484160291909216179055600019016130a9565b6040518060600160405280848152602001613185846138e4565b6001600160801b0316815260200160016001600160801b03168152508482815481106131ad57fe5b60009182526020918290208351600292830290910190815591830151600190920180546040909401516001600160801b03199094166001600160801b03938416178316600160801b93909416929092029290921790558501546132109084612d66565b85600201819055505050505050565b6001600160a01b0381166132455760405162461bcd60e51b815260040161069290614ec9565b604780546001600160a01b038381166001600160a01b03198316179092556040519116907f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0906132989083908590614be9565b60405180910390a15050565b6001600160a01b038083166000908152600f6020526040812054909116906132cb8461390d565b6001600160a01b038581166000818152600f602052604080822080546001600160a01b031916898616908117909155905194955093928616927f0cc323ffec3ea49cbcddc0de1480978126d350c6a45dff33ad2f1cda6ae992619190a4612d60828483612e05565b6001600160a01b038116610df45760405162461bcd60e51b815260040161069290614f29565b60010154426001600160801b03909116111590565b805460009081905b600081118015613393575061339384600183038154811061115357fe5b15613434578360018203815481106133a757fe5b6000918252602090912060016002909202018101546001600160801b03600160801b9091041614156133ec576133e5846001830381548110612ff257fe5b9150613401565b6133fe84600183038154811061117d57fe5b92505b8380548061340b57fe5b600082815260208120600019928301600281029091018281556001019190915590915501613376565b50613459613448828463ffffffff612d6616565b60028601549063ffffffff6134e116565b60028501559250929050565b600082613474575060006113d9565b8282028284828161348157fe5b04146107115760405162461bcd60e51b815260040161069290614f69565b600061071183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613a23565b600061071183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613a5a565b604051612d0090849063a9059cbb60e01b90612d299086908690602401614cd5565b6001600160a01b038116600090815260086020526040812054905b81811015612d005761357283826128bd565b600101613560565b4690565b600080600061358f87878787613a7e565b9150915061359c81613b5e565b5090505b949350505050565b6135ba826001600160a01b0316613c27565b6135d65760405162461bcd60e51b815260040161069290615009565b60006060836001600160a01b0316836040516135f29190614b5a565b6000604051808303816000865af19150503d806000811461362f576040519150601f19603f3d011682016040523d82523d6000602084013e613634565b606091505b5091509150816136565760405162461bcd60e51b815260040161069290614ff9565b805115612d6057808060200190516136719190810190613f8a565b612d605760405162461bcd60e51b815260040161069290614e69565b600083830182858210156136b45760405162461bcd60e51b81526004016106929190614dc8565b50949350505050565b6000836001600160601b0316836001600160601b0316111582906136f45760405162461bcd60e51b81526004016106929190614dc8565b505050900390565b60006137204360405180606001604052806038815260200161527b60389139613c60565b905060008463ffffffff1611801561376957506001600160a01b038516600090815260106020908152604080832063ffffffff6000198901811685529252909120548282169116145b156137c8576001600160a01b0385166000908152601060209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b03851602179055613867565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152601083528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252601190935292909220805460018801909316929091169190911790555b846001600160a01b03167f6adb589fed1e8542fb7a6b10f00a85e02265e77f9ae3ca8ff93b22983e1af9a084846040516138a29291906150c4565b60405180910390a25050505050565b6000838301826001600160601b0380871690831610156136b45760405162461bcd60e51b81526004016106929190614dc8565b6000600160801b82106139095760405162461bcd60e51b815260040161069290614ea9565b5090565b6005546000906001600160a01b03166139385760405162461bcd60e51b815260040161069290614e59565b6005546001600160a01b03166000908152600860205260408120805490915b81811015613a185760055483546001600160a01b039091169084908390811061397c57fe5b60009182526020909120600590910201546001600160a01b03161415613a10576005546001600160a01b039081166000908152600760209081526040808320858452825280832093891683529290522060028101548154613a05916139e7919063ffffffff6134e116565b60405180606001604052806028815260200161523260289139612dd6565b9450505050506120fd565b600101613957565b506000949350505050565b60008183613a445760405162461bcd60e51b81526004016106929190614dc8565b506000838581613a5057fe5b0495945050505050565b600081848411156136f45760405162461bcd60e51b81526004016106929190614dc8565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613ab55750600090506003613b55565b8460ff16601b14158015613acd57508460ff16601c14155b15613ade5750600090506004613b55565b600060018787878760405160008152602001604052604051613b039493929190614d53565b6020604051602081039080840390855afa158015613b25573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613b4e57506000915060019050613b55565b9150600090505b94509492505050565b6000816004811115613b6c57fe5b1415613b7757610df4565b6001816004811115613b8557fe5b1415613ba35760405162461bcd60e51b815260040161069290614dd9565b6002816004811115613bb157fe5b1415613bcf5760405162461bcd60e51b815260040161069290614e19565b6003816004811115613bdd57fe5b1415613bfb5760405162461bcd60e51b815260040161069290614ed9565b6004816004811115613c0957fe5b1415610df45760405162461bcd60e51b815260040161069290614f49565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906135a0575050151592915050565b600081600160201b8410612dfd5760405162461bcd60e51b81526004016106929190614dc8565b604080518082019091526000808252602082015290565b80356113d98161519a565b80516113d98161519a565b80516113d9816151ae565b80356113d9816151b7565b80356113d9816151c0565b80516113d9816151b7565b80356113d9816151c9565b80356113d9816151d2565b600060208284031215613d0857600080fd5b60006135a08484613c9e565b600060208284031215613d2657600080fd5b60006135a08484613ca9565b60008060408385031215613d4557600080fd5b6000613d518585613c9e565b9250506020613d6285828601613c9e565b9150509250929050565b600080600060608486031215613d8157600080fd5b6000613d8d8686613c9e565b9350506020613d9e86828701613c9e565b9250506040613daf86828701613cbf565b9150509250925092565b60008060408385031215613dcc57600080fd5b6000613dd88585613c9e565b9250506020613d6285828601613cbf565b600080600060608486031215613dfe57600080fd5b6000613e0a8686613c9e565b9350506020613e1b86828701613cbf565b9250506040613daf86828701613c9e565b600080600080600060a08688031215613e4457600080fd5b6000613e508888613c9e565b9550506020613e6188828901613cbf565b9450506040613e7288828901613cca565b9350506060613e8388828901613cbf565b9250506080613e9488828901613cbf565b9150509295509295909350565b600080600060608486031215613eb657600080fd5b6000613ec28686613c9e565b9350506020613d9e86828701613cbf565b60008060008060008060c08789031215613eec57600080fd5b6000613ef88989613c9e565b9650506020613f0989828a01613cbf565b9550506040613f1a89828a01613cbf565b9450506060613f2b89828a01613ceb565b9350506080613f3c89828a01613cbf565b92505060a0613f4d89828a01613cbf565b9150509295509295509295565b60008060408385031215613f6d57600080fd5b6000613f798585613c9e565b9250506020613d6285828601613ce0565b600060208284031215613f9c57600080fd5b60006135a08484613cb4565b600080600060608486031215613fbd57600080fd5b6000613d8d8686613cca565b600060208284031215613fdb57600080fd5b60006135a08484613cca565b600060208284031215613ff957600080fd5b60006135a08484613cd5565b60006140118383614afa565b505060600190565b61402281615143565b82525050565b614022816150f2565b600061403c826150e5565b61404681856150e9565b9350614051836150df565b8060005b8381101561407f5781516140698882614005565b9750614074836150df565b925050600101614055565b509495945050505050565b614022816150fd565b61402281615102565b6140226140a882615102565b615102565b60006140b8826150e5565b6140c281856120fd565b93506140d2818560208601615164565b9290920192915050565b61402281615105565b6140228161514e565b60006140f9826150e5565b61410381856150e9565b9350614113818560208601615164565b61411c81615190565b9093019392505050565b60006141336018836150e9565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000815260200192915050565b600061416c6012836150e9565b71696e636f6e73697374656e7420737461746560701b815260200192915050565b600061419a6013836150e9565b727661756c743a20706f6f6c206578697374733f60681b815260200192915050565b60006141c9601f836150e9565b7f53746f726520636f6e7472616374206164647265737320697320656d70747900815260200192915050565b6000614202601f836150e9565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800815260200192915050565b600061423b600f836150e9565b6e15985d5b1d081a5cc81c185d5cd959608a1b815260200192915050565b60006142666013836150e9565b7215985d5b1d081a5cc81b9bdd081c185d5cd959606a1b815260200192915050565b6000614295600c836150e9565b6b155b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006142bd6030836150e9565b7f5856535661756c743a3a6765745374616b65416d6f756e743a2078767320616481526f191c995cdcc81a5cc81b9bdd081cd95d60821b602082015260400192915050565b600061430f602a836150e9565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061435b602a836150e9565b7f5856535661756c743a3a64656c656761746542795369673a207369676e6174758152691c9948195e1c1a5c995960b21b602082015260400192915050565b60006143a76022836150e9565b7f7072696d6520746f6b656e2063616e6e6f74206265207a65726f206164647265815261737360f01b602082015260400192915050565b60006143eb6026836150e9565b7f5856535661756c743a3a64656c656761746542795369673a20696e76616c6964815265206e6f6e636560d01b602082015260400192915050565b60006144336002836120fd565b61190160f01b815260020192915050565b60006144516027836150e9565b7f53616665436173743a2076616c756520646f65736e27742066697420696e20318152663238206269747360c81b602082015260400192915050565b600061449a6017836150e9565b7f5661756c7420697320616c726561647920706175736564000000000000000000815260200192915050565b60006144d36025836150e9565b7f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164815264647265737360d81b602082015260400192915050565b600061451a6022836150e9565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015260400192915050565b600061455e601a836150e9565b7f546f6b656e2065786973747320696e206f7468657220706f6f6c000000000000815260200192915050565b60006145976013836150e9565b72185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b815260200192915050565b60006145c6602b836150e9565b7f5856535661756c743a3a6765745072696f72566f7465733a206e6f742079657481526a0819195d195c9b5a5b995960aa1b602082015260400192915050565b6000614613601d836150e9565b7f7265776172642063616e6e6f74206265207a65726f2061646472657373000000815260200192915050565b600061464c6018836150e9565b7f7a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000815260200192915050565b6000614685601a836150e9565b7f657865637574652070656e64696e67207769746864726177616c000000000000815260200192915050565b60006146be6022836150e9565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b602082015260400192915050565b60006147026043836120fd565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b600061476d601f836150e9565b7f72657175657374656420616d6f756e742063616e6e6f74206265207a65726f00815260200192915050565b60006147a66021836150e9565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006147e96012836150e9565b71141bdbdb08185b1c9958591e48185919195960721b815260200192915050565b6000614817600a836150e9565b691c994b595b9d195c995960b21b815260200192915050565b600061483d6014836150e9565b7324b73b30b634b2103932bbb0b932103a37b5b2b760611b815260200192915050565b600061486d600e836150e9565b6d37b7363c9030b236b4b71031b0b760911b815260200192915050565b60006148976015836150e9565b7418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b815260200192915050565b60006148c86013836150e9565b726e6f7468696e6720746f20776974686472617760681b815260200192915050565b60006148f7601a836150e9565b7f496e76616c6964206e6577206c6f636b696e6720706572696f64000000000000815260200192915050565b6000614930601d836150e9565b7f416c6c6f6320706f696e7473206d757374206e6f74206265207a65726f000000815260200192915050565b60006149696020836150e9565b7f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b60006149a2603a836120fd565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b6000614a01601f836150e9565b7f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b6000614a3a601b836150e9565b7f72657175657374656420616d6f756e7420697320696e76616c69640000000000815260200192915050565b6000614a736022836150e9565b7f6f6e6c792070726f78792061646d696e2063616e206368616e676520627261698152616e7360f01b602082015260400192915050565b6000614ab7602e836150e9565b7f416c6c6f6320706f696e7473207065722072657761726420746f6b656e206d7581526d7374206e6f74206265207a65726f60901b602082015260400192915050565b80516060830190614b0b8482614093565b506020820151614b1e6020850182614b2d565b506040820151612d6060408501825b61402281615110565b61402281615128565b61402281615131565b61402281615159565b61402281615137565b600061071182846140ad565b6000614b7182614426565b9150614b7d828561409c565b602082019150614b8d828461409c565b5060200192915050565b60006113d9826146f5565b60006113d982614995565b602081016113d98284614028565b602081016113d98284614019565b60408101614bd78285614019565b81810360208301526135a081846140ee565b60408101614bf78285614028565b6107116020830184614028565b60608101614c128286614028565b614c1f6020830185614019565b6135a06040830184614093565b60808101614c3a8287614028565b614c476020830186614028565b614c546040830185614028565b614c616060830184614028565b95945050505050565b60608101614c788286614028565b614c1f6020830185614028565b60808101614c938287614028565b614ca06020830186614028565b614cad6040830185614093565b614c616060830184614093565b60408101614cc88285614028565b610711602083018461408a565b60408101614ce38285614028565b6107116020830184614093565b602080825281016107118184614031565b602081016113d9828461408a565b602081016113d98284614093565b60808101614c938287614093565b60808101614d398287614093565b614d466020830186614093565b614c546040830185614093565b60808101614d618287614093565b614ca06020830186614b3f565b602081016113d982846140dc565b60a08101614d8a82886140dc565b614d976020830187614093565b614da46040830186614093565b614db16060830185614093565b614dbe6080830184614093565b9695505050505050565b6020808252810161071181846140ee565b602080825281016113d981614126565b602080825281016113d98161415f565b602080825281016113d98161418d565b602080825281016113d9816141bc565b602080825281016113d9816141f5565b602080825281016113d98161422e565b602080825281016113d981614259565b602080825281016113d981614288565b602080825281016113d9816142b0565b602080825281016113d981614302565b602080825281016113d98161434e565b602080825281016113d98161439a565b602080825281016113d9816143de565b602080825281016113d981614444565b602080825281016113d98161448d565b602080825281016113d9816144c6565b602080825281016113d98161450d565b602080825281016113d981614551565b602080825281016113d98161458a565b602080825281016113d9816145b9565b602080825281016113d981614606565b602080825281016113d98161463f565b602080825281016113d981614678565b602080825281016113d9816146b1565b602080825281016113d981614760565b602080825281016113d981614799565b602080825281016113d9816147dc565b602080825281016113d98161480a565b602080825281016113d981614830565b602080825281016113d981614860565b602080825281016113d98161488a565b602080825281016113d9816148bb565b602080825281016113d9816148ea565b602080825281016113d981614923565b602080825281016113d98161495c565b602080825281016113d9816149f4565b602080825281016113d981614a2d565b602080825281016113d981614a66565b602080825281016113d981614aaa565b604081016150578285614093565b61071160208301846140e5565b60408101614ce38285614093565b606081016150808286614093565b614c1f6020830185614093565b602081016113d98284614b36565b604081016150a98285614b36565b6107116020830184614b51565b602081016113d98284614b51565b604081016150d28285614b48565b6107116020830184614b48565b60200190565b5190565b90815260200190565b60006113d98261511c565b151590565b90565b60006113d9826150f2565b6001600160801b031690565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6001600160601b031690565b60006113d982615105565b60006113d982615102565b60006113d982615137565b60005b8381101561517f578181015183820152602001615167565b83811115612d605750506000910152565b601f01601f191690565b6151a3816150f2565b8114610df457600080fd5b6151a3816150fd565b6151a381615102565b6151a381615105565b6151a381615128565b6151a38161513156fe5856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f77735856535661756c743a3a726571756573745769746864726177616c3a20766f746573206f766572666c6f775856535661756c743a3a6765745374616b65416d6f756e743a20766f746573206f766572666c6f775856535661756c743a3a6465706f7369743a20766f746573206f766572666c6f775856535661756c743a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473736574526577617264416d6f756e74506572426c6f636b28616464726573732c75696e74323536297365745769746864726177616c4c6f636b696e67506572696f6428616464726573732c75696e743235362c75696e74323536295856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777361646428616464726573732c75696e743235362c616464726573732c75696e743235362c75696e7432353629a365627a7a72315820cb64d40f318ef0380aecf36dd899a3d61fe131b1caad14dbcbf2d4a4441154286c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102bb5760003560e01c80638456cb5911610182578063c2102596116100e9578063e7a324dc116100a2578063f55401621161007c578063f55401621461061c578063f851a44014610624578063fba1b1f91461062c578063fe5a451a1461063f576102bb565b8063e7a324dc146105eb578063e8f2be6f146105f3578063f1127ed8146105fb576102bb565b8063c210259614610577578063c3c754a814610597578063c3cda520146105aa578063d7ae45e2146105bd578063dae66bbe146105d0578063de0368b2146105e3576102bb565b80639e2b6c4d1161013b5780639e2b6c4d1461050e578063a09eab7a14610521578063a9d69a6914610534578063add8933714610547578063b4a0bdf31461054f578063b4b5ea5714610564576102bb565b80638456cb59146104875780638ed7333d1461048f57806392e35000146104a257806393c7c4d1146104c657806398e1b31b146104d9578063996cba68146104fb576102bb565b80634298bdbd116102265780636fcfff45116101df5780636fcfff45146103f957806373d025d614610419578063782d6fe11461042e5780637ac924561461044e5780637ecebe00146104615780638308d7e914610474576102bb565b80634298bdbd14610392578063587cde1e146103a55780635c19a95c146103b85780635c60da1b146103cb5780635ff56315146103d35780636dd77cbd146103e6576102bb565b806320606b701161027857806320606b701461033f57806324f52bbf14610347578063267822471461035c5780632eda5c6c14610364578063358ae036146103775780633d4180f91461037f576102bb565b8063046f7da2146102c05780630af13728146102ca5780630efe6a8b146102f3578063115b512f1461030657806319129e5a146103195780631d504dc61461032c575b600080fd5b6102c8610647565b005b6102dd6102d8366004613de9565b6106d2565b6040516102ea9190614d0f565b60405180910390f35b6102c8610301366004613ea1565b610718565b6102c8610314366004613ea1565b610a0d565b6102c8610327366004613cf6565b610dc1565b6102c861033a366004613fc9565b610df7565b6102dd610f2a565b61034f610f41565b6040516102ea9190614bad565b61034f610f50565b6102dd610372366004613cf6565b610f5f565b61034f610f71565b6102dd61038d366004613d32565b610f80565b6102dd6103a0366004613cf6565b610f9d565b61034f6103b3366004613cf6565b610faf565b6102c86103c6366004613cf6565b610fca565b61034f610ff7565b6102c86103e1366004613d32565b611006565b6102dd6103f4366004613de9565b6110fa565b61040c610407366004613cf6565b6111af565b6040516102ea919061508d565b6104216111c7565b6040516102ea9190614d01565b61044161043c366004613db9565b6111d0565b6040516102ea91906150b6565b6102c861045c366004613db9565b6113df565b6102dd61046f366004613cf6565b611728565b6102c8610482366004613ea1565b61173a565b6102c86118e0565b6102c861049d366004613db9565b611965565b6104b56104b0366004613db9565b6119a0565b6040516102ea959493929190614d7c565b6102c86104d4366004613db9565b6119f5565b6104ec6104e7366004613de9565b611b1b565b6040516102ea93929190615072565b6102c8610509366004613d6c565b611b6d565b6102c861051c366004613ea1565b611cff565b6102dd61052f366004613de9565b611dea565b6102dd610542366004613de9565b61202f565b61034f612071565b610557612080565b6040516102ea9190614d6e565b610441610572366004613cf6565b61208f565b61058a610585366004613de9565b612102565b6040516102ea9190614cf0565b6104216105a5366004613cf6565b6121bc565b6102c86105b8366004613ed3565b6121d1565b6102dd6105cb366004613cf6565b612375565b6102c86105de366004613fa8565b612390565b61034f61249c565b6102dd6124ab565b6102dd6124b7565b61060e610609366004613f5a565b6124bd565b6040516102ea92919061509b565b6102dd6124f2565b61034f6124fa565b6102c861063a366004613e2c565b612509565b6105576127d5565b61067060405180604001604052806008815260200167726573756d65282960c01b8152506127e4565b60135460ff1661069b5760405162461bcd60e51b815260040161069290614e39565b60405180910390fd5b6013805460ff1916905560405133907fd2619572a1464e0df0bb351d834fd47f3350984d7bfdb1ab69cfcb0b8e42141590600090a2565b60006106de8484612886565b506001600160a01b0380841660009081526007602090815260408083208684528252808320938516835292905220600201545b9392505050565b600354600160a01b900460ff166107415760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff16156107715760405162461bcd60e51b815260040161069290614e29565b61077b8383612886565b6001600160a01b038316600090815260086020526040812080548490811061079f57fe5b600091825260208083206001600160a01b038816845260078252604080852088865283528085203386529092529220600590910290910191506107e285856128bd565b6107ed85853361202f565b1561080a5760405162461bcd60e51b815260040161069290614f39565b80541561087f57600061081d8284612a78565b9050801561087d57610830863383612a8c565b84866001600160a01b0316336001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e94645846040516108749190614d0f565b60405180910390a45b505b815461089c906001600160a01b031633308663ffffffff612d0516565b80546108ae908463ffffffff612d6616565b81556108ba8183612da8565b600182015560055482546001600160a01b039081169116141561092157336000908152600f6020908152604080832054815160608101909252602180835261092194936001600160a01b039092169261091c9289929061525a90830139612dd6565b612e05565b6017546001600160a01b03868116911614801561093f575060185484145b156109a7576016546040516337f23cd360e01b81526001600160a01b03909116906337f23cd390610974903390600401614bbb565b600060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050505b83856001600160a01b0316336001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7866040516109eb9190614d0f565b60405180910390a450506003805460ff60a01b1916600160a01b179055505050565b600354600160a01b900460ff16610a365760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff1615610a665760405162461bcd60e51b815260040161069290614e29565b610a708383612886565b60008111610a905760405162461bcd60e51b815260040161069290614f59565b6001600160a01b0383166000908152600760209081526040808320858452825280832033845290915290206002810154610ad0908363ffffffff612d6616565b81541015610af05760405162461bcd60e51b815260040161069290615019565b6001600160a01b0384166000908152600860205260408120805485908110610b1457fe5b600091825260208083206001600160a01b0389168452600a825260408085208986528352808520338652909252908320600590920201925090610b5682612f97565b5090508015610b775760405162461bcd60e51b815260040161069290614f39565b610b8187876128bd565b6000610b8d8585612a78565b9050610b9a883383612a8c565b6004840154600090610bb2904263ffffffff612d6616565b9050610bc08685898461303b565b6001600160a01b03891660009081526012602090815260408083208b8452909152902054610bf4908863ffffffff612d6616565b6001600160a01b038a1660009081526012602090815260408083208c8452909152902055610c228686612da8565b600187015560055485546001600160a01b0390811691161415610c8557336000908152600f6020908152604080832054815160608101909252602b808352610c85946001600160a01b0390921693919261091c928d929061520790830139612dd6565b6017546001600160a01b038a81169116148015610ca3575060185488145b15610d0b576016546040516337f23cd360e01b81526001600160a01b03909116906337f23cd390610cd8903390600401614bbb565b600060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b505050505b87896001600160a01b0316336001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e9464585604051610d4f9190614d0f565b60405180910390a487896001600160a01b0316336001600160a01b03167f88a254a0ef28a0b9e957ff600beae69870f6f924065147f3627c3f814e60ec118a604051610d9b9190614d0f565b60405180910390a450506003805460ff60a01b1916600160a01b17905550505050505050565b6000546001600160a01b03163314610deb5760405162461bcd60e51b815260040161069290614fa9565b610df48161321f565b50565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e6a9190810190613d14565b6001600160a01b0316336001600160a01b031614610e9a5760405162461bcd60e51b815260040161069290615029565b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ed557600080fd5b505af1158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f0d9190810190613fe7565b15610df45760405162461bcd60e51b815260040161069290614fb9565b604051610f3690614b97565b604051809103902081565b6004546001600160a01b031681565b6001546001600160a01b031681565b60066020526000908152604090205481565b6005546001600160a01b031681565b601560209081526000928352604080842090915290825290205481565b60096020526000908152604090205481565b600f602052600090815260409020546001600160a01b031681565b60135460ff1615610fed5760405162461bcd60e51b815260040161069290614e29565b610df433826132a4565b6002546001600160a01b031681565b6000546001600160a01b031633146110305760405162461bcd60e51b815260040161069290614fa9565b61103982613333565b61104281613333565b6005546004546001600160a01b03918216911681156110735760405162461bcd60e51b815260040161069290614ef9565b600580546001600160a01b038087166001600160a01b03199283161790925560048054928616929091169190911790556003805460ff60a01b1916600160a01b1790556040517f559f314bb90394a4a9ceb724f365b36a53587d894352c43d12901fd680101456906110ec908490849088908890614c2c565b60405180910390a150505050565b60006111068484612886565b6001600160a01b038085166000908152600a60209081526040808320878452825280832093861683529290522080545b600081118015611166575061116682600183038154811061115357fe5b9060005260206000209060020201613359565b156111a65761119b82600183038154811061117d57fe5b6000918252602090912060029091020154849063ffffffff612d6616565b925060001901611136565b50509392505050565b60116020526000908152604090205463ffffffff1681565b60135460ff1681565b60004382106111f15760405162461bcd60e51b815260040161069290614f09565b6001600160a01b03831660009081526011602052604090205463ffffffff168061121f5760009150506113d9565b6001600160a01b038416600090815260106020908152604080832063ffffffff60001986018116855292529091205416831061129b576001600160a01b03841660009081526010602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b031690506113d9565b6001600160a01b038416600090815260106020908152604080832083805290915290205463ffffffff168310156112d65760009150506113d9565b600060001982015b8163ffffffff168163ffffffff16111561139957600282820363ffffffff16048103611308613c87565b506001600160a01b038716600090815260106020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415611374576020015194506113d99350505050565b805163ffffffff1687111561138b57819350611392565b6001820392505b50506112de565b506001600160a01b038516600090815260106020908152604080832063ffffffff909416835292905220546001600160601b03600160201b909104169150505b92915050565b600354600160a01b900460ff166114085760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff16156114385760405162461bcd60e51b815260040161069290614e29565b6114428282612886565b6001600160a01b038216600090815260086020526040812080548390811061146657fe5b600091825260208083206001600160a01b038716808552600783526040808620888752845280862033808852908552818720928752600a85528187208988528552818720908752909352918420600590930201935091806114c7848461336e565b9092509050811515806114da5750600081115b6114f65760405162461bcd60e51b815260040161069290614fc9565b811580611501575080155b61151d5760405162461bcd60e51b815260040161069290614de9565b81156116365761152d87876128bd565b6000611573856001015461156764e8d4a5100061155b8a600301548a6000015461346590919063ffffffff16565b9063ffffffff61349f16565b9063ffffffff6134e116565b6004805460405163135b33cd60e31b81529293506001600160a01b031691639ad99e68916115a7918c913391879101614c04565b600060405180830381600087803b1580156115c157600080fd5b505af11580156115d5573d6000803e3d6000fd5b505086546115ec925090508463ffffffff6134e116565b808655600387015461160f9164e8d4a510009161155b919063ffffffff61346516565b60018601558554611630906001600160a01b0316338563ffffffff61352316565b506116ba565b8354611648908263ffffffff6134e116565b84556001600160a01b038716600090815260126020908152604080832089845290915290205461167e908263ffffffff6134e116565b6001600160a01b0380891660009081526012602090815260408083208b845290915290209190915585546116ba9116338363ffffffff61352316565b856001600160a01b038816337fe31da05fae6db869f5ea51f4b638aa6884070b6c87f18f63bd2291a12cb2f5186116f7868663ffffffff612d6616565b6040516117049190614d0f565b60405180910390a450506003805460ff60a01b1916600160a01b1790555050505050565b600e6020526000908152604090205481565b6117786040518060400160405280601c81526020017f73657428616464726573732c75696e743235362c75696e7432353629000000008152506127e4565b6117828383612886565b61178b83613545565b6001600160a01b038316600090815260086020526040812080549091906118049084906117f8908590889081106117be57fe5b60009182526020808320600160059093020191909101546001600160a01b038b16835260099091526040909120549063ffffffff6134e116565b9063ffffffff612d6616565b9050600081116118265760405162461bcd60e51b815260040161069290615039565b600082858154811061183457fe5b90600052602060002090600502016001015490508383868154811061185557fe5b9060005260206000209060050201600101819055508160096000886001600160a01b03166001600160a01b031681526020019081526020016000208190555084866001600160a01b03167f6ee09c6cb801194690c195c69f465aaf7c80255cbeafaab9600f47ed79de2ca983876040516118d0929190615064565b60405180910390a3505050505050565b611908604051806040016040528060078152602001667061757365282960c81b8152506127e4565b60135460ff161561192b5760405162461bcd60e51b815260040161069290614eb9565b6013805460ff1916600117905560405133907fdffada2889ebfab9224c24069d833f3de835d8cf99872d49e7b7ba5fccb7a46f90600090a2565b60135460ff16156119885760405162461bcd60e51b815260040161069290614e29565b6119928282612886565b61199c82826128bd565b5050565b600860205281600052604060002081815481106119b957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039093169550909350919085565b611a166040518060600160405280602881526020016152b3602891396127e4565b60048054604051633d6ac5b360e21b81526001600160a01b039091169163f5ab16cc91611a4591869101614bad565b60206040518083038186803b158015611a5d57600080fd5b505afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a959190810190613f8a565b611ab15760405162461bcd60e51b815260040161069290614f99565b611aba82613545565b6001600160a01b0382166000818152600660205260409081902080549084905590519091907fad96cee0d692f0250b98e085504f399da6733854908215f6203fe3c69366d9f590611b0e9084908690615064565b60405180910390a2505050565b6000806000611b2a8686612886565b5050506001600160a01b03928316600090815260076020908152604080832094835293815283822092909416815292529020805460018201546002909201549092565b600354600160a01b900460ff16611b965760405162461bcd60e51b815260040161069290614f89565b6003805460ff60a01b1916905560135460ff1615611bc65760405162461bcd60e51b815260040161069290614e29565b611bd08282612886565b6001600160a01b0382166000908152600860205260408120805483908110611bf457fe5b600091825260208083206001600160a01b0380881685526007835260408086208887528452808620918a1686529252922060059091029091019150611c3984846128bd565b611c4484848761202f565b15611c615760405162461bcd60e51b815260040161069290614f39565b805415611ce5576000611c748284612a78565b90508015611ce357611c868284612da8565b6001830155611c96858783612a8c565b83856001600160a01b0316876001600160a01b03167f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e9464584604051611cda9190614d0f565b60405180910390a45b505b50506003805460ff60a01b1916600160a01b179055505050565b611d206040518060600160405280603381526020016152db603391396127e4565b611d2a8383612886565b600081118015611d3d57506312cc030081105b611d595760405162461bcd60e51b815260040161069290614fd9565b6001600160a01b0383166000908152600860205260408120805484908110611d7d57fe5b9060005260206000209060050201905060008160040154905082826004018190555083856001600160a01b03167f0bcf80c5060ccf99b7a993c57a94b232fc2c5c04bd74c7c7d174595fee6bc31f8386604051611ddb929190615064565b60405180910390a35050505050565b6000611df68484612886565b6001600160a01b0384166000908152600860205260408120805485908110611e1a57fe5b600091825260208083206001600160a01b03808a168086526007845260408087208b885285528087208a8416885285528087206003600590970290940195860154918752601285528087208b885290945283862054855494516370a0823160e01b8152959750929590949093611ef1939216906370a0823190611ea1903090600401614bad565b60206040518083038186803b158015611eb957600080fd5b505afa158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115679190810190613fe7565b6001600160a01b0389166000908152600660205260409020546002860154919250439182118015611f2157508215155b15611fb7576000611f3f8760020154846134e190919063ffffffff16565b6001600160a01b038c1660009081526009602052604081205460018a01549293509091611f87919061155b90611f7b868863ffffffff61346516565b9063ffffffff61346516565b9050611fb2611fa58661155b8464e8d4a5100063ffffffff61346516565b879063ffffffff612d6616565b955050505b6001600160a01b03808b166000908152600a602090815260408083208d84528252808320938c16835292905290812090611ff082612f97565b91505061201f876001015461156764e8d4a5100061155b8a611f7b878e600001546134e190919063ffffffff16565b9c9b505050505050505050505050565b6001600160a01b038084166000908152600a602090815260408083208684528252808320938516835292905290812061206781612f97565b5095945050505050565b6017546001600160a01b031681565b6047546001600160a01b031690565b6001600160a01b03811660009081526011602052604081205463ffffffff16806120ba5760006120f9565b6001600160a01b0383166000908152601060209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9150505b919050565b606061210e8484612886565b6001600160a01b038085166000908152600a602090815260408083208784528252808320938616835292815282822080548451818402810184019095528085529092909184015b828210156121af5760008481526020908190206040805160608101825260028602909201805483526001908101546001600160801b0380821685870152600160801b90910416918301919091529083529092019101612155565b5050505090509392505050565b60146020526000908152604090205460ff1681565b60135460ff16156121f45760405162461bcd60e51b815260040161069290614e29565b600060405161220290614b97565b604080519182900382208282019091526008825267161594d5985d5b1d60c21b6020909201919091527fddfcc46608a8bd52ebf900f03a24cc97b73a6046cec8c5d0f74a211e376e967a61225461357a565b306040516020016122689493929190614d2b565b604051602081830303815290604052805190602001209050600060405161228e90614ba2565b6040519081900381206122a9918a908a908a90602001614d1d565b604051602081830303815290604052805190602001209050600082826040516020016122d6929190614b66565b60405160208183030381529060405280519060200120905060006122fc8288888861357e565b6001600160a01b0381166000908152600e60205260409020805460018101909155909150891461233e5760405162461bcd60e51b815260040161069290614e99565b8742111561235e5760405162461bcd60e51b815260040161069290614e79565b612368818b6132a4565b505050505b505050505050565b6001600160a01b031660009081526008602052604090205490565b6000546001600160a01b031633146123ba5760405162461bcd60e51b815260040161069290614fa9565b6001600160a01b0383166123e05760405162461bcd60e51b815260040161069290614e89565b6001600160a01b0382166124065760405162461bcd60e51b815260040161069290614f19565b6124108282612886565b6016546017546018546040516001600160a01b03808816948116937f8def9436d6e31b89ed00948ba91d0cb6936eada5154cb1b45b55683fb9e492379361245f93919092169188918890614c85565b60405180910390a3601680546001600160a01b039485166001600160a01b0319918216179091556017805493909416921691909117909155601855565b6003546001600160a01b031681565b604051610f3690614ba2565b60185481565b601060209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6312cc030081565b6000546001600160a01b031681565b61252a6040518060600160405280602c815260200161533a602c91396127e4565b61253385613333565b61253c83613333565b6004546001600160a01b03166125645760405162461bcd60e51b815260040161069290614e09565b600084116125845760405162461bcd60e51b815260040161069290614fe9565b61258d85613545565b6001600160a01b0385166000908152600860205260408120805490915b8181101561260857856001600160a01b03168382815481106125c857fe5b60009182526020909120600590910201546001600160a01b031614156126005760405162461bcd60e51b815260040161069290614f79565b6001016125aa565b506001600160a01b03851660009081526014602052604090205460ff16156126425760405162461bcd60e51b815260040161069290614ee9565b6001600160a01b03871660009081526009602052604090205461266b908763ffffffff612d6616565b6001600160a01b0388811660009081526009602090815260408083209490945560068152838220889055835160a0810185528984168082528183018c81524383880190815260608401868152608085018c81528b5460018082018e558d8a52888a209751600590920290970180546001600160a01b031916918b169190911781559351848701559151600284015551600383015551600491820155908452601490925291849020805460ff1916831790558054935163fb66fb4d60e01b8152939092169263fb66fb4d92612743928c92909101614cba565b600060405180830381600087803b15801561275d57600080fd5b505af1158015612771573d6000803e3d6000fd5b50505050846001600160a01b03166001838054905003886001600160a01b03167fd7fa4bff1cd2253c0789c3291a786a6f6b1a3b4569a75af683a15d52abb6a0bf8988886040516127c493929190615072565b60405180910390a450505050505050565b6016546001600160a01b031681565b6047546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906128179033908690600401614bc9565b60206040518083038186803b15801561282f57600080fd5b505afa158015612843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128679190810190613f8a565b90508061199c5760405162461bcd60e51b815260040161069290614e49565b6001600160a01b038216600090815260086020526040902054811061199c5760405162461bcd60e51b815260040161069290614df9565b6001600160a01b03821660009081526008602052604081208054839081106128e157fe5b9060005260206000209060050201905080600201544311612902575061199c565b80546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612932903090600401614bad565b60206040518083038186803b15801561294a57600080fd5b505afa15801561295e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129829190810190613fe7565b6001600160a01b03851660009081526012602090815260408083208784529091529020549091506129ba90829063ffffffff6134e116565b9050806129ce57504360029091015561199c565b600282015443906000906129e990839063ffffffff6134e116565b6001600160a01b03871660009081526009602090815260408083205460018901546006909352908320549394509192612a32929161155b91611f7b90879063ffffffff61346516565b9050612a61612a508561155b8464e8d4a5100063ffffffff61346516565b60038701549063ffffffff612d6616565b600386015550504360029093019290925550505050565b600061071183600101546115678585612da8565b600480546040516370a0823160e01b81526001600160a01b03918216926000928716916370a0823191612ac191869101614bad565b60206040518083038186803b158015612ad957600080fd5b505afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b119190810190613fe7565b6001600160a01b038087166000908152601560209081526040808320938916835292905290812054919250612b4c858363ffffffff612d6616565b9050828111612c2a578115612bbf576001600160a01b038088166000818152601560209081526040808320948b1680845294909152808220829055517f6bdfd5e51d01475945224d3d37965916fd8df699ef9e8888af4359aa8622216091612bb691879190615049565b60405180910390a35b60405163135b33cd60e31b81526001600160a01b03851690639ad99e6890612bef908a908a908690600401614c6a565b600060405180830381600087803b158015612c0957600080fd5b505af1158015612c1d573d6000803e3d6000fd5b5050505050505050612d00565b6001600160a01b038088166000818152601560209081526040808320948b168084529490915290819020868503908190559051909291907f6bdfd5e51d01475945224d3d37965916fd8df699ef9e8888af4359aa8622216090612c909087908690615064565b60405180910390a360405163135b33cd60e31b81526001600160a01b03861690639ad99e6890612cc8908b908b908990600401614c6a565b600060405180830381600087803b158015612ce257600080fd5b505af1158015612cf6573d6000803e3d6000fd5b5050505050505050505b505050565b604051612d609085906323b872dd60e01b90612d2990879087908790602401614c6a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526135a8565b50505050565b600061071183836040518060400160405280601b81526020017f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525061368d565b600061071164e8d4a5100061155b8460030154611f7b876002015488600001546134e190919063ffffffff16565b600081600160601b8410612dfd5760405162461bcd60e51b81526004016106929190614dc8565b509192915050565b816001600160a01b0316836001600160a01b031614158015612e3057506000816001600160601b0316115b15612d00576001600160a01b03831615612ee8576001600160a01b03831660009081526011602052604081205463ffffffff169081612e70576000612eaf565b6001600160a01b0385166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000612ed682856040518060600160405280602c815260200161530e602c91396136bd565b9050612ee4868484846136fc565b5050505b6001600160a01b03821615612d00576001600160a01b03821660009081526011602052604081205463ffffffff169081612f23576000612f62565b6001600160a01b0384166000908152601060209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000612f8982856040518060600160405280602b81526020016151dc602b91396138b1565b905061236d858484846136fc565b805460009081905b801561303557836001820381548110612fb457fe5b6000918252602090912060016002909202018101546001600160801b03600160801b90910416141561301757613010846001830381548110612ff257fe5b6000918252602090912060029091020154839063ffffffff612d6616565b915061302c565b61302984600183038154811061117d57fe5b92505b60001901612f9f565b50915091565b8254604080516060810182526000808252602080830182815260019484018581528587018a5589845291909220925160028602909301928355905191909201805492516001600160801b03908116600160801b029281166001600160801b0319909416939093179092161790555b6000811180156130e45750818460018303815481106130c457fe5b60009182526020909120600160029092020101546001600160801b031611155b1561316b578360018203815481106130f857fe5b906000526020600020906002020184828154811061311257fe5b600091825260209091208254600290920201908155600191820180549290910180546001600160801b0319166001600160801b03938416178082559154600160801b9081900484160291909216179055600019016130a9565b6040518060600160405280848152602001613185846138e4565b6001600160801b0316815260200160016001600160801b03168152508482815481106131ad57fe5b60009182526020918290208351600292830290910190815591830151600190920180546040909401516001600160801b03199094166001600160801b03938416178316600160801b93909416929092029290921790558501546132109084612d66565b85600201819055505050505050565b6001600160a01b0381166132455760405162461bcd60e51b815260040161069290614ec9565b604780546001600160a01b038381166001600160a01b03198316179092556040519116907f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa0906132989083908590614be9565b60405180910390a15050565b6001600160a01b038083166000908152600f6020526040812054909116906132cb8461390d565b6001600160a01b038581166000818152600f602052604080822080546001600160a01b031916898616908117909155905194955093928616927f0cc323ffec3ea49cbcddc0de1480978126d350c6a45dff33ad2f1cda6ae992619190a4612d60828483612e05565b6001600160a01b038116610df45760405162461bcd60e51b815260040161069290614f29565b60010154426001600160801b03909116111590565b805460009081905b600081118015613393575061339384600183038154811061115357fe5b15613434578360018203815481106133a757fe5b6000918252602090912060016002909202018101546001600160801b03600160801b9091041614156133ec576133e5846001830381548110612ff257fe5b9150613401565b6133fe84600183038154811061117d57fe5b92505b8380548061340b57fe5b600082815260208120600019928301600281029091018281556001019190915590915501613376565b50613459613448828463ffffffff612d6616565b60028601549063ffffffff6134e116565b60028501559250929050565b600082613474575060006113d9565b8282028284828161348157fe5b04146107115760405162461bcd60e51b815260040161069290614f69565b600061071183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613a23565b600061071183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613a5a565b604051612d0090849063a9059cbb60e01b90612d299086908690602401614cd5565b6001600160a01b038116600090815260086020526040812054905b81811015612d005761357283826128bd565b600101613560565b4690565b600080600061358f87878787613a7e565b9150915061359c81613b5e565b5090505b949350505050565b6135ba826001600160a01b0316613c27565b6135d65760405162461bcd60e51b815260040161069290615009565b60006060836001600160a01b0316836040516135f29190614b5a565b6000604051808303816000865af19150503d806000811461362f576040519150601f19603f3d011682016040523d82523d6000602084013e613634565b606091505b5091509150816136565760405162461bcd60e51b815260040161069290614ff9565b805115612d6057808060200190516136719190810190613f8a565b612d605760405162461bcd60e51b815260040161069290614e69565b600083830182858210156136b45760405162461bcd60e51b81526004016106929190614dc8565b50949350505050565b6000836001600160601b0316836001600160601b0316111582906136f45760405162461bcd60e51b81526004016106929190614dc8565b505050900390565b60006137204360405180606001604052806038815260200161527b60389139613c60565b905060008463ffffffff1611801561376957506001600160a01b038516600090815260106020908152604080832063ffffffff6000198901811685529252909120548282169116145b156137c8576001600160a01b0385166000908152601060209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b03851602179055613867565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152601083528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252601190935292909220805460018801909316929091169190911790555b846001600160a01b03167f6adb589fed1e8542fb7a6b10f00a85e02265e77f9ae3ca8ff93b22983e1af9a084846040516138a29291906150c4565b60405180910390a25050505050565b6000838301826001600160601b0380871690831610156136b45760405162461bcd60e51b81526004016106929190614dc8565b6000600160801b82106139095760405162461bcd60e51b815260040161069290614ea9565b5090565b6005546000906001600160a01b03166139385760405162461bcd60e51b815260040161069290614e59565b6005546001600160a01b03166000908152600860205260408120805490915b81811015613a185760055483546001600160a01b039091169084908390811061397c57fe5b60009182526020909120600590910201546001600160a01b03161415613a10576005546001600160a01b039081166000908152600760209081526040808320858452825280832093891683529290522060028101548154613a05916139e7919063ffffffff6134e116565b60405180606001604052806028815260200161523260289139612dd6565b9450505050506120fd565b600101613957565b506000949350505050565b60008183613a445760405162461bcd60e51b81526004016106929190614dc8565b506000838581613a5057fe5b0495945050505050565b600081848411156136f45760405162461bcd60e51b81526004016106929190614dc8565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115613ab55750600090506003613b55565b8460ff16601b14158015613acd57508460ff16601c14155b15613ade5750600090506004613b55565b600060018787878760405160008152602001604052604051613b039493929190614d53565b6020604051602081039080840390855afa158015613b25573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613b4e57506000915060019050613b55565b9150600090505b94509492505050565b6000816004811115613b6c57fe5b1415613b7757610df4565b6001816004811115613b8557fe5b1415613ba35760405162461bcd60e51b815260040161069290614dd9565b6002816004811115613bb157fe5b1415613bcf5760405162461bcd60e51b815260040161069290614e19565b6003816004811115613bdd57fe5b1415613bfb5760405162461bcd60e51b815260040161069290614ed9565b6004816004811115613c0957fe5b1415610df45760405162461bcd60e51b815260040161069290614f49565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906135a0575050151592915050565b600081600160201b8410612dfd5760405162461bcd60e51b81526004016106929190614dc8565b604080518082019091526000808252602082015290565b80356113d98161519a565b80516113d98161519a565b80516113d9816151ae565b80356113d9816151b7565b80356113d9816151c0565b80516113d9816151b7565b80356113d9816151c9565b80356113d9816151d2565b600060208284031215613d0857600080fd5b60006135a08484613c9e565b600060208284031215613d2657600080fd5b60006135a08484613ca9565b60008060408385031215613d4557600080fd5b6000613d518585613c9e565b9250506020613d6285828601613c9e565b9150509250929050565b600080600060608486031215613d8157600080fd5b6000613d8d8686613c9e565b9350506020613d9e86828701613c9e565b9250506040613daf86828701613cbf565b9150509250925092565b60008060408385031215613dcc57600080fd5b6000613dd88585613c9e565b9250506020613d6285828601613cbf565b600080600060608486031215613dfe57600080fd5b6000613e0a8686613c9e565b9350506020613e1b86828701613cbf565b9250506040613daf86828701613c9e565b600080600080600060a08688031215613e4457600080fd5b6000613e508888613c9e565b9550506020613e6188828901613cbf565b9450506040613e7288828901613cca565b9350506060613e8388828901613cbf565b9250506080613e9488828901613cbf565b9150509295509295909350565b600080600060608486031215613eb657600080fd5b6000613ec28686613c9e565b9350506020613d9e86828701613cbf565b60008060008060008060c08789031215613eec57600080fd5b6000613ef88989613c9e565b9650506020613f0989828a01613cbf565b9550506040613f1a89828a01613cbf565b9450506060613f2b89828a01613ceb565b9350506080613f3c89828a01613cbf565b92505060a0613f4d89828a01613cbf565b9150509295509295509295565b60008060408385031215613f6d57600080fd5b6000613f798585613c9e565b9250506020613d6285828601613ce0565b600060208284031215613f9c57600080fd5b60006135a08484613cb4565b600080600060608486031215613fbd57600080fd5b6000613d8d8686613cca565b600060208284031215613fdb57600080fd5b60006135a08484613cca565b600060208284031215613ff957600080fd5b60006135a08484613cd5565b60006140118383614afa565b505060600190565b61402281615143565b82525050565b614022816150f2565b600061403c826150e5565b61404681856150e9565b9350614051836150df565b8060005b8381101561407f5781516140698882614005565b9750614074836150df565b925050600101614055565b509495945050505050565b614022816150fd565b61402281615102565b6140226140a882615102565b615102565b60006140b8826150e5565b6140c281856120fd565b93506140d2818560208601615164565b9290920192915050565b61402281615105565b6140228161514e565b60006140f9826150e5565b61410381856150e9565b9350614113818560208601615164565b61411c81615190565b9093019392505050565b60006141336018836150e9565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000815260200192915050565b600061416c6012836150e9565b71696e636f6e73697374656e7420737461746560701b815260200192915050565b600061419a6013836150e9565b727661756c743a20706f6f6c206578697374733f60681b815260200192915050565b60006141c9601f836150e9565b7f53746f726520636f6e7472616374206164647265737320697320656d70747900815260200192915050565b6000614202601f836150e9565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800815260200192915050565b600061423b600f836150e9565b6e15985d5b1d081a5cc81c185d5cd959608a1b815260200192915050565b60006142666013836150e9565b7215985d5b1d081a5cc81b9bdd081c185d5cd959606a1b815260200192915050565b6000614295600c836150e9565b6b155b985d5d1a1bdc9a5e995960a21b815260200192915050565b60006142bd6030836150e9565b7f5856535661756c743a3a6765745374616b65416d6f756e743a2078767320616481526f191c995cdcc81a5cc81b9bdd081cd95d60821b602082015260400192915050565b600061430f602a836150e9565b7f5361666542455032303a204245503230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061435b602a836150e9565b7f5856535661756c743a3a64656c656761746542795369673a207369676e6174758152691c9948195e1c1a5c995960b21b602082015260400192915050565b60006143a76022836150e9565b7f7072696d6520746f6b656e2063616e6e6f74206265207a65726f206164647265815261737360f01b602082015260400192915050565b60006143eb6026836150e9565b7f5856535661756c743a3a64656c656761746542795369673a20696e76616c6964815265206e6f6e636560d01b602082015260400192915050565b60006144336002836120fd565b61190160f01b815260020192915050565b60006144516027836150e9565b7f53616665436173743a2076616c756520646f65736e27742066697420696e20318152663238206269747360c81b602082015260400192915050565b600061449a6017836150e9565b7f5661756c7420697320616c726561647920706175736564000000000000000000815260200192915050565b60006144d36025836150e9565b7f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164815264647265737360d81b602082015260400192915050565b600061451a6022836150e9565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015260400192915050565b600061455e601a836150e9565b7f546f6b656e2065786973747320696e206f7468657220706f6f6c000000000000815260200192915050565b60006145976013836150e9565b72185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b815260200192915050565b60006145c6602b836150e9565b7f5856535661756c743a3a6765745072696f72566f7465733a206e6f742079657481526a0819195d195c9b5a5b995960aa1b602082015260400192915050565b6000614613601d836150e9565b7f7265776172642063616e6e6f74206265207a65726f2061646472657373000000815260200192915050565b600061464c6018836150e9565b7f7a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000815260200192915050565b6000614685601a836150e9565b7f657865637574652070656e64696e67207769746864726177616c000000000000815260200192915050565b60006146be6022836150e9565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b602082015260400192915050565b60006147026043836120fd565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b600061476d601f836150e9565b7f72657175657374656420616d6f756e742063616e6e6f74206265207a65726f00815260200192915050565b60006147a66021836150e9565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006147e96012836150e9565b71141bdbdb08185b1c9958591e48185919195960721b815260200192915050565b6000614817600a836150e9565b691c994b595b9d195c995960b21b815260200192915050565b600061483d6014836150e9565b7324b73b30b634b2103932bbb0b932103a37b5b2b760611b815260200192915050565b600061486d600e836150e9565b6d37b7363c9030b236b4b71031b0b760911b815260200192915050565b60006148976015836150e9565b7418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b815260200192915050565b60006148c86013836150e9565b726e6f7468696e6720746f20776974686472617760681b815260200192915050565b60006148f7601a836150e9565b7f496e76616c6964206e6577206c6f636b696e6720706572696f64000000000000815260200192915050565b6000614930601d836150e9565b7f416c6c6f6320706f696e7473206d757374206e6f74206265207a65726f000000815260200192915050565b60006149696020836150e9565b7f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b60006149a2603a836120fd565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b6000614a01601f836150e9565b7f5361666542455032303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b6000614a3a601b836150e9565b7f72657175657374656420616d6f756e7420697320696e76616c69640000000000815260200192915050565b6000614a736022836150e9565b7f6f6e6c792070726f78792061646d696e2063616e206368616e676520627261698152616e7360f01b602082015260400192915050565b6000614ab7602e836150e9565b7f416c6c6f6320706f696e7473207065722072657761726420746f6b656e206d7581526d7374206e6f74206265207a65726f60901b602082015260400192915050565b80516060830190614b0b8482614093565b506020820151614b1e6020850182614b2d565b506040820151612d6060408501825b61402281615110565b61402281615128565b61402281615131565b61402281615159565b61402281615137565b600061071182846140ad565b6000614b7182614426565b9150614b7d828561409c565b602082019150614b8d828461409c565b5060200192915050565b60006113d9826146f5565b60006113d982614995565b602081016113d98284614028565b602081016113d98284614019565b60408101614bd78285614019565b81810360208301526135a081846140ee565b60408101614bf78285614028565b6107116020830184614028565b60608101614c128286614028565b614c1f6020830185614019565b6135a06040830184614093565b60808101614c3a8287614028565b614c476020830186614028565b614c546040830185614028565b614c616060830184614028565b95945050505050565b60608101614c788286614028565b614c1f6020830185614028565b60808101614c938287614028565b614ca06020830186614028565b614cad6040830185614093565b614c616060830184614093565b60408101614cc88285614028565b610711602083018461408a565b60408101614ce38285614028565b6107116020830184614093565b602080825281016107118184614031565b602081016113d9828461408a565b602081016113d98284614093565b60808101614c938287614093565b60808101614d398287614093565b614d466020830186614093565b614c546040830185614093565b60808101614d618287614093565b614ca06020830186614b3f565b602081016113d982846140dc565b60a08101614d8a82886140dc565b614d976020830187614093565b614da46040830186614093565b614db16060830185614093565b614dbe6080830184614093565b9695505050505050565b6020808252810161071181846140ee565b602080825281016113d981614126565b602080825281016113d98161415f565b602080825281016113d98161418d565b602080825281016113d9816141bc565b602080825281016113d9816141f5565b602080825281016113d98161422e565b602080825281016113d981614259565b602080825281016113d981614288565b602080825281016113d9816142b0565b602080825281016113d981614302565b602080825281016113d98161434e565b602080825281016113d98161439a565b602080825281016113d9816143de565b602080825281016113d981614444565b602080825281016113d98161448d565b602080825281016113d9816144c6565b602080825281016113d98161450d565b602080825281016113d981614551565b602080825281016113d98161458a565b602080825281016113d9816145b9565b602080825281016113d981614606565b602080825281016113d98161463f565b602080825281016113d981614678565b602080825281016113d9816146b1565b602080825281016113d981614760565b602080825281016113d981614799565b602080825281016113d9816147dc565b602080825281016113d98161480a565b602080825281016113d981614830565b602080825281016113d981614860565b602080825281016113d98161488a565b602080825281016113d9816148bb565b602080825281016113d9816148ea565b602080825281016113d981614923565b602080825281016113d98161495c565b602080825281016113d9816149f4565b602080825281016113d981614a2d565b602080825281016113d981614a66565b602080825281016113d981614aaa565b604081016150578285614093565b61071160208301846140e5565b60408101614ce38285614093565b606081016150808286614093565b614c1f6020830185614093565b602081016113d98284614b36565b604081016150a98285614b36565b6107116020830184614b51565b602081016113d98284614b51565b604081016150d28285614b48565b6107116020830184614b48565b60200190565b5190565b90815260200190565b60006113d98261511c565b151590565b90565b60006113d9826150f2565b6001600160801b031690565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6001600160601b031690565b60006113d982615105565b60006113d982615102565b60006113d982615137565b60005b8381101561517f578181015183820152602001615167565b83811115612d605750506000910152565b601f01601f191690565b6151a3816150f2565b8114610df457600080fd5b6151a3816150fd565b6151a381615102565b6151a381615105565b6151a381615128565b6151a38161513156fe5856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f77735856535661756c743a3a726571756573745769746864726177616c3a20766f746573206f766572666c6f775856535661756c743a3a6765745374616b65416d6f756e743a20766f746573206f766572666c6f775856535661756c743a3a6465706f7369743a20766f746573206f766572666c6f775856535661756c743a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473736574526577617264416d6f756e74506572426c6f636b28616464726573732c75696e74323536297365745769746864726177616c4c6f636b696e67506572696f6428616464726573732c75696e743235362c75696e74323536295856535661756c743a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777361646428616464726573732c75696e743235362c616464726573732c75696e743235362c75696e7432353629a365627a7a72315820cb64d40f318ef0380aecf36dd899a3d61fe131b1caad14dbcbf2d4a4441154286c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "methods": {
      "add(address,uint256,address,uint256,uint256)": {
        "details": "This vault DOES NOT support deflationary tokens — it expects that  the amount of transferred tokens would equal the actually deposited  amount. In practice this means that this vault DOES NOT support USDT  and similar tokens (that do not provide these guarantees).",
        "params": {
          "_allocPoint": "Number of allocation points assigned to this pool",
          "_lockPeriod": "A period between withdrawal request and a moment when it's executable",
          "_rewardPerBlock": "Initial reward per block, in terms of _rewardToken",
          "_rewardToken": "Reward token address",
          "_token": "Staked token"
        }
      },
      "claim(address,address,uint256)": {
        "params": {
          "_account": "The account for which to claim rewards",
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "deposit(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to deposit to vault",
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address"
        }
      },
      "executeWithdrawal(address,uint256)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "return": "The number of current votes for `account`"
      },
      "getEligibleWithdrawalAmount(address,uint256,address)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address",
          "_user": "The User Address"
        },
        "return": "withdrawalAmount Amount that the user can withdraw"
      },
      "getPriorVotes(address,uint256)": {
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "return": "The balance that user staked"
      },
      "getRequestedAmount(address,uint256,address)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address",
          "_user": "The User Address"
        },
        "return": "Total amount of requested but not yet executed withdrawals (including both executable and locked ones)"
      },
      "getUserInfo(address,uint256,address)": {
        "params": {
          "_pid": "Pool index",
          "_rewardToken": "Reward token address",
          "_user": "User address"
        },
        "return": "amount Deposited amountrewardDebt Reward debt (technical value used to track past payouts)pendingWithdrawals Requested but not yet executed withdrawals"
      },
      "getWithdrawalRequests(address,uint256,address)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address",
          "_user": "The User Address"
        },
        "return": "An array of withdrawal requests"
      },
      "pendingReward(address,uint256,address)": {
        "params": {
          "_pid": "Pool index",
          "_rewardToken": "Reward token address",
          "_user": "User address"
        },
        "return": "Reward the user is eligible for in this pool, in terms of _rewardToken"
      },
      "pendingWithdrawalsBeforeUpgrade(address,uint256,address)": {
        "params": {
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address",
          "_user": "The address of the user"
        },
        "return": "beforeUpgradeWithdrawalAmount Total pending withdrawal amount in requests made before the vault upgrade"
      },
      "poolLength(address)": {
        "params": {
          "rewardToken": "Reward token address"
        },
        "return": "Number of pools that distribute the specified token as a reward"
      },
      "requestWithdrawal(address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to withdraw from the vault",
          "_pid": "The Pool Index",
          "_rewardToken": "The Reward Token Address"
        }
      },
      "set(address,uint256,uint256)": {
        "params": {
          "_allocPoint": "Number of allocation points assigned to this pool",
          "_pid": "Pool index",
          "_rewardToken": "Reward token address"
        }
      },
      "setAccessControl(address)": {
        "details": "Admin function to set the access control address",
        "params": {
          "newAccessControlAddress": "New address for the access control"
        }
      },
      "setPrimeToken(address,address,uint256)": {
        "params": {
          "_primePoolId": "pool id for reward",
          "_primeRewardToken": "address of reward token",
          "_primeToken": "address of the prime token contract"
        }
      },
      "setRewardAmountPerBlock(address,uint256)": {
        "params": {
          "_rewardAmount": "Number of allocation points assigned to this pool",
          "_rewardToken": "Reward token address"
        }
      },
      "setWithdrawalLockingPeriod(address,uint256,uint256)": {
        "params": {
          "_newPeriod": "New lock period",
          "_pid": "Pool index",
          "_rewardToken": "Reward token address"
        }
      },
      "updatePool(address,uint256)": {
        "params": {
          "_pid": "Pool index",
          "_rewardToken": "Reward token address"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "_become(address)": {
        "notice": "* Admin Functions **"
      },
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "add(address,uint256,address,uint256,uint256)": {
        "notice": "Add a new token pool"
      },
      "claim(address,address,uint256)": {
        "notice": "Claim rewards for pool"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "deposit(address,uint256,uint256)": {
        "notice": "Deposit XVSVault for XVS allocation"
      },
      "executeWithdrawal(address,uint256)": {
        "notice": "Execute withdrawal to XVSVault for XVS allocation"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getEligibleWithdrawalAmount(address,uint256,address)": {
        "notice": "Get unlocked withdrawal amount"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the xvs stake balance for an account"
      },
      "getRequestedAmount(address,uint256,address)": {
        "notice": "Get requested amount"
      },
      "getUserInfo(address,uint256,address)": {
        "notice": "Get user info with reward token address and pid"
      },
      "getWithdrawalRequests(address,uint256,address)": {
        "notice": "Returns the array of withdrawal requests that have not been executed yet"
      },
      "pause()": {
        "notice": "Pauses vault"
      },
      "pendingReward(address,uint256,address)": {
        "notice": "View function to see pending XVSs on frontend"
      },
      "pendingWithdrawalsBeforeUpgrade(address,uint256,address)": {
        "notice": "Gets the total pending withdrawal amount of a user before upgrade"
      },
      "poolLength(address)": {
        "notice": "Returns the number of pools with the specified reward token"
      },
      "requestWithdrawal(address,uint256,uint256)": {
        "notice": "Request withdrawal to XVSVault for XVS allocation"
      },
      "resume()": {
        "notice": "Resume vault"
      },
      "set(address,uint256,uint256)": {
        "notice": "Update the given pool's reward allocation point"
      },
      "setAccessControl(address)": {
        "notice": "Sets the address of the access control of this contract"
      },
      "setPrimeToken(address,address,uint256)": {
        "notice": "Sets the address of the prime token contract"
      },
      "setRewardAmountPerBlock(address,uint256)": {
        "notice": "Update the given reward token's amount per block"
      },
      "setWithdrawalLockingPeriod(address,uint256,uint256)": {
        "notice": "Update the lock period after which a requested withdrawal can be executed"
      },
      "updatePool(address,uint256)": {
        "notice": "Update reward variables of the given pool to be up-to-date"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33669,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33671,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 33673,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 33675,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "pendingXVSVaultImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 33680,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "_notEntered",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 33682,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "xvsStore",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 33684,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "xvsAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 33688,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "rewardTokenAmountsPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33721,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "userInfos",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)33695_storage)))"
      },
      {
        "astId": 33726,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "poolInfos",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_struct(PoolInfo)33706_storage)dyn_storage)"
      },
      {
        "astId": 33730,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "totalAllocPoints",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33739,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "withdrawalRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage)))"
      },
      {
        "astId": 33743,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__oldDelegatesSlot",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 33754,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__oldCheckpointsSlot",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)33748_storage))"
      },
      {
        "astId": 33758,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__oldNumCheckpointsSlot",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 33762,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "nonces",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33779,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "delegates",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 33785,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "checkpoints",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)33748_storage))"
      },
      {
        "astId": 33789,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 33795,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "totalPendingWithdrawals",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 33797,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "vaultPaused",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 33801,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "isStakedToken",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33807,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "pendingRewardTransfers",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 33809,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "primeToken",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IPrime)11900"
      },
      {
        "astId": 33811,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "primeRewardToken",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 33813,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "primePoolId",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 33817,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__gap",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 4,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "71",
        "type": "t_contract(IAccessControlManagerV5)1917"
      },
      {
        "astId": 8,
        "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
        "label": "__gap",
        "offset": 0,
        "slot": "72",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)33706_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)33706_storage",
        "encoding": "dynamic_array",
        "label": "struct XVSVaultStorageV1.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage": {
        "base": "t_struct(WithdrawalRequest)33713_storage",
        "encoding": "dynamic_array",
        "label": "struct XVSVaultStorageV1.WithdrawalRequest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV5)1917": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV5",
        "numberOfBytes": "20"
      },
      "t_contract(IBEP20)26951": {
        "encoding": "inplace",
        "label": "contract IBEP20",
        "numberOfBytes": "20"
      },
      "t_contract(IPrime)11900": {
        "encoding": "inplace",
        "label": "contract IPrime",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(PoolInfo)33706_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct XVSVaultStorageV1.PoolInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(PoolInfo)33706_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct XVSVaultStorageV1.WithdrawalRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => struct XVSVaultStorageV1.WithdrawalRequest[])))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)33695_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => struct XVSVaultStorageV1.UserInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)33695_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)33748_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct XVSVaultStorageV1.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)33748_storage)"
      },
      "t_mapping(t_address,t_struct(UserInfo)33695_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct XVSVaultStorageV1.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)33695_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct XVSVaultStorageV1.WithdrawalRequest[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_struct(WithdrawalRequest)33713_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)33695_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct XVSVaultStorageV1.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)33695_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)33748_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct XVSVaultStorageV1.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)33748_storage"
      },
      "t_struct(Checkpoint)33748_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.Checkpoint",
        "members": [
          {
            "astId": 33745,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 33747,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)33706_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.PoolInfo",
        "members": [
          {
            "astId": 33697,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBEP20)26951"
          },
          {
            "astId": 33699,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 33701,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 33703,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 33705,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "lockPeriod",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)33695_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.UserInfo",
        "members": [
          {
            "astId": 33690,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33692,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 33694,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "pendingWithdrawals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(WithdrawalRequest)33713_storage": {
        "encoding": "inplace",
        "label": "struct XVSVaultStorageV1.WithdrawalRequest",
        "members": [
          {
            "astId": 33708,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33710,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "lockedUntil",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 33712,
            "contract": "contracts/XVSVault/XVSVault.sol:XVSVault",
            "label": "afterUpgrade",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
