{
  "address": "0x9Ac449Fe41e67E5161C01d9366f655a8A7406A76",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressesMustDiffer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundsTransferIsPaused",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sweepAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArguments",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "speed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSpeed",
          "type": "uint256"
        }
      ],
      "name": "InvalidDistributionSpeed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loopsLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredLoops",
          "type": "uint256"
        }
      ],
      "name": "MaxLoopsLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "TokenNotInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLoopsLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newmaxLoopsLimit",
          "type": "uint256"
        }
      ],
      "name": "MaxLoopsLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSpeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "MaxTokenDistributionSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPrimeToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPrimeToken",
          "type": "address"
        }
      ],
      "name": "PrimeTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sweepAmount",
          "type": "uint256"
        }
      ],
      "name": "SweepToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenDistributionInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSpeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "TokenDistributionSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferredToPrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_MAX_DISTRIBUTION_SPEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "accrueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "getEffectiveDistributionSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "distributionSpeeds_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxDistributionSpeeds_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "loopsLimit_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "initializeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAccruedBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLoopsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxTokenDistributionSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseFundsTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "releaseFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resumeFundsTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loopsLimit",
          "type": "uint256"
        }
      ],
      "name": "setMaxLoopsLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxDistributionSpeeds_",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxTokensDistributionSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prime_",
          "type": "address"
        }
      ],
      "name": "setPrimeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "distributionSpeeds_",
          "type": "uint256[]"
        }
      ],
      "name": "setTokensDistributionSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweepToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAmountAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDistributionSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd238d86fed8e1f40bbd778540477a721e9f921d51110a3a6f1ec1c071315784b",
  "receipt": {
    "to": null,
    "from": "0x2Ce1d0ffD7E869D9DF33e28552b12DdDed326706",
    "contractAddress": "0x9Ac449Fe41e67E5161C01d9366f655a8A7406A76",
    "transactionIndex": 2,
    "gasUsed": "1714927",
    "logsBloom": "0x
    "blockHash": "0x2c96d89174eaa1804d1ea68dda878f45964344e94b0de270d2a4be2097f08d06",
    "transactionHash": "0xd238d86fed8e1f40bbd778540477a721e9f921d51110a3a6f1ec1c071315784b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 34659735,
        "transactionHash": "0xd238d86fed8e1f40bbd778540477a721e9f921d51110a3a6f1ec1c071315784b",
        "address": "0x9Ac449Fe41e67E5161C01d9366f655a8A7406A76",
        "topics": ["0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 5,
        "blockHash": "0x2c96d89174eaa1804d1ea68dda878f45964344e94b0de270d2a4be2097f08d06"
      }
    ],
    "blockNumber": 34659735,
    "cumulativeGasUsed": "1842660",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c120d326511a7cda22ee0f6c22652b17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressesMustDiffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundsTransferIsPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSpeed\",\"type\":\"uint256\"}],\"name\":\"InvalidDistributionSpeed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loopsLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredLoops\",\"type\":\"uint256\"}],\"name\":\"MaxLoopsLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"TokenNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLoopsLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newmaxLoopsLimit\",\"type\":\"uint256\"}],\"name\":\"MaxLoopsLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSpeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"MaxTokenDistributionSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPrimeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPrimeToken\",\"type\":\"address\"}],\"name\":\"PrimeTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sweepAmount\",\"type\":\"uint256\"}],\"name\":\"SweepToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenDistributionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSpeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"TokenDistributionSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferredToPrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_MAX_DISTRIBUTION_SPEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"accrueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getEffectiveDistributionSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionSpeeds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxDistributionSpeeds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"loopsLimit_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"initializeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAccruedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoopsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTokenDistributionSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseFundsTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeFundsTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loopsLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxLoopsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxDistributionSpeeds_\",\"type\":\"uint256[]\"}],\"name\":\"setMaxTokensDistributionSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prime_\",\"type\":\"address\"}],\"name\":\"setPrimeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionSpeeds_\",\"type\":\"uint256[]\"}],\"name\":\"setTokensDistributionSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDistributionSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"accrueTokens(address)\":{\"custom:event\":\"Emits TokensAccrued event\",\"params\":{\"token_\":\"Address of the token\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getBlockNumber()\":{\"returns\":{\"_0\":\"blockNumber returns the block number\"}},\"getEffectiveDistributionSpeed(address)\":{\"params\":{\"token_\":\"Address of the token\"},\"returns\":{\"_0\":\"speed returns the per block reward\"}},\"initialize(address,address[],uint256[],uint256[],uint256)\":{\"custom:error\":\"Throw InvalidArguments on different length of tokens and speeds array\",\"details\":\"Initializes the deployer to owner\",\"params\":{\"accessControlManager_\":\"AccessControlManager contract address\",\"distributionSpeeds_\":\"New distribution speeds for tokens\",\"loopsLimit_\":\"Maximum number of loops allowed in a single transaction\",\"tokens_\":\"Array of addresses of the tokens\"}},\"initializeTokens(address[])\":{\"custom:access\":\"Only Governance\",\"params\":{\"tokens_\":\"Array of addresses of the tokens to be intialized\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseFundsTransfer()\":{\"custom:access\":\"Controlled by ACM\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"releaseFunds(address)\":{\"custom:error\":\"Throw InvalidArguments on Zero address(token)Throw FundsTransferIsPaused is pausedThrow InvalidCaller if the sender is not the Prime contract\",\"custom:event\":\"Emits TokenTransferredToPrime event\",\"params\":{\"token_\":\"The token to release to the Prime contract\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resumeFundsTransfer()\":{\"custom:access\":\"Controlled by ACM\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setMaxLoopsLimit(uint256)\":{\"custom:access\":\"Controlled by ACM\",\"custom:event\":\"Emits MaxLoopsLimitUpdated event on success\",\"params\":{\"loopsLimit\":\"Limit for the max loops can execute at a time\"}},\"setMaxTokensDistributionSpeed(address[],uint256[])\":{\"custom:access\":\"Controlled by ACM\",\"custom:error\":\"Throw InvalidArguments on different length of tokens and speeds array\",\"params\":{\"maxDistributionSpeeds_\":\"New distribution speeds for tokens\",\"tokens_\":\"Array of addresses of the tokens\"}},\"setPrimeToken(address)\":{\"custom:access\":\"Only owner\",\"custom:event\":\"Emits PrimeTokenUpdated event\",\"params\":{\"prime_\":\"The new address of the prime token contract\"}},\"setTokensDistributionSpeed(address[],uint256[])\":{\"custom:access\":\"Controlled by ACM\",\"custom:error\":\"Throw InvalidArguments on different length of tokens and speeds array\",\"params\":{\"distributionSpeeds_\":\"New distribution speeds for tokens\",\"tokens_\":\"Array of addresses of the tokens\"}},\"sweepToken(address,address,uint256)\":{\"custom:access\":\"Only Governance\",\"custom:error\":\"Throw InsufficientBalance if amount_ is greater than the available balance of the token in the contract\",\"custom:event\":\"Emits SweepToken event\",\"params\":{\"amount_\":\"The amount of tokens needs to transfer\",\"to_\":\"The address of the recipient\",\"token_\":\"The address of the ERC-20 token to sweep\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain.\"}},\"title\":\"PrimeLiquidityProvider\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressesMustDiffer()\":[{\"notice\":\"Error thrown when argument value in setter is same as previous value\"}],\"FundsTransferIsPaused()\":[{\"notice\":\"Error thrown when funds transfer is paused\"}],\"InsufficientBalance(uint256,uint256)\":[{\"notice\":\"Error thrown when PrimeLiquidityProvider's balance is less than sweep amount\"}],\"InvalidArguments()\":[{\"notice\":\"Thrown when arguments are passed are invalid\"}],\"InvalidCaller()\":[{\"notice\":\"Thrown when caller is not the desired caller\"}],\"InvalidDistributionSpeed(uint256,uint256)\":[{\"notice\":\"Thrown when distribution speed is greater than maxTokenDistributionSpeeds[tokenAddress]\"}],\"MaxLoopsLimitExceeded(uint256,uint256)\":[{\"notice\":\"Thrown an error on maxLoopsLimit exceeds for any loop\"}],\"TokenAlreadyInitialized(address)\":[{\"notice\":\"Thrown when token is initialized\"}],\"TokenNotInitialized(address)\":[{\"notice\":\"Error thrown when interest accrue is called for not initialized token\"}],\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}]},\"events\":{\"MaxLoopsLimitUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max loops limit is set\"},\"MaxTokenDistributionSpeedUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when a new max distribution speed for token is set\"},\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"},\"PrimeTokenUpdated(address,address)\":{\"notice\":\"Emitted when prime token contract address is changed\"},\"SweepToken(address,address,uint256)\":{\"notice\":\"Emitted on sweep token success\"},\"TokenDistributionInitialized(address)\":{\"notice\":\"Emitted when a token distribution is initialized\"},\"TokenDistributionSpeedUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when a new token distribution speed is set\"},\"TokenTransferredToPrime(address,uint256)\":{\"notice\":\"Emitted when token is transferred to the prime contract\"},\"TokensAccrued(address,uint256)\":{\"notice\":\"Emitted when distribution state(Index and block) is updated\"}},\"kind\":\"user\",\"methods\":{\"DEFAULT_MAX_DISTRIBUTION_SPEED()\":{\"notice\":\"The default max token distribution speed\"},\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"accrueTokens(address)\":{\"notice\":\"Accrue token by updating the distribution state\"},\"getBlockNumber()\":{\"notice\":\"Get the latest block number\"},\"getEffectiveDistributionSpeed(address)\":{\"notice\":\"Get rewards per block for token\"},\"initialize(address,address[],uint256[],uint256[],uint256)\":{\"notice\":\"PrimeLiquidityProvider initializer\"},\"initializeTokens(address[])\":{\"notice\":\"Initialize the distribution of the token\"},\"lastAccruedBlock(address)\":{\"notice\":\"The rate at which token is distributed to the Prime contract\"},\"maxTokenDistributionSpeeds(address)\":{\"notice\":\"The max token distribution speed for token\"},\"pauseFundsTransfer()\":{\"notice\":\"Pause fund transfer of tokens to Prime contract\"},\"prime()\":{\"notice\":\"Address of the Prime contract\"},\"releaseFunds(address)\":{\"notice\":\"Claim all the token accrued till last block\"},\"resumeFundsTransfer()\":{\"notice\":\"Resume fund transfer of tokens to Prime contract\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"setMaxLoopsLimit(uint256)\":{\"notice\":\"Set the limit for the loops can iterate to avoid the DOS\"},\"setMaxTokensDistributionSpeed(address[],uint256[])\":{\"notice\":\"Set max distribution speed for token (amount of maximum token distribute per block)\"},\"setPrimeToken(address)\":{\"notice\":\"Set the prime token contract address\"},\"setTokensDistributionSpeed(address[],uint256[])\":{\"notice\":\"Set distribution speed (amount of token distribute per block)\"},\"sweepToken(address,address,uint256)\":{\"notice\":\"A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user\"},\"tokenAmountAccrued(address)\":{\"notice\":\"The token accrued but not yet transferred to prime contract\"},\"tokenDistributionSpeeds(address)\":{\"notice\":\"The rate at which token is distributed (per block)\"}},\"notice\":\"PrimeLiquidityProvider is used to fund Prime\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tokens/Prime/PrimeLiquidityProvider.sol\":\"PrimeLiquidityProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title Venus Access Control Contract.\\n * @dev The AccessControlledV8 contract is a wrapper around the OpenZeppelin AccessControl contract\\n *      It provides a standardized way to control access to methods within the Venus Smart Contract Ecosystem.\\n *      The contract allows the owner to set an AccessControlManager contract address.\\n *      It can restrict method calls based on the sender's role and the method's signature.\\n */\\n\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x618d942756b93e02340a42f3c80aa99fc56be1a96861f5464dc23a76bf30b3a5\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41deef84d1839590b243b66506691fde2fb938da01eabde53e82d3b8316fdaf9\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/isolated-pools/contracts/MaxLoopsLimitHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title MaxLoopsLimitHelper\\n * @author Venus\\n * @notice Abstract contract used to avoid collection with too many items that would generate gas errors and DoS.\\n */\\nabstract contract MaxLoopsLimitHelper {\\n    // Limit for the loops to avoid the DOS\\n    uint256 public maxLoopsLimit;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when max loops limit is set\\n    event MaxLoopsLimitUpdated(uint256 oldMaxLoopsLimit, uint256 newmaxLoopsLimit);\\n\\n    /// @notice Thrown an error on maxLoopsLimit exceeds for any loop\\n    error MaxLoopsLimitExceeded(uint256 loopsLimit, uint256 requiredLoops);\\n\\n    /**\\n     * @notice Set the limit for the loops can iterate to avoid the DOS\\n     * @param limit Limit for the max loops can execute at a time\\n     */\\n    function _setMaxLoopsLimit(uint256 limit) internal {\\n        require(limit > maxLoopsLimit, \\\"Comptroller: Invalid maxLoopsLimit\\\");\\n\\n        uint256 oldMaxLoopsLimit = maxLoopsLimit;\\n        maxLoopsLimit = limit;\\n\\n        emit MaxLoopsLimitUpdated(oldMaxLoopsLimit, limit);\\n    }\\n\\n    /**\\n     * @notice Compare the maxLoopsLimit with number of the times loop iterate\\n     * @param len Length of the loops iterate\\n     * @custom:error MaxLoopsLimitExceeded error is thrown when loops length exceeds maxLoopsLimit\\n     */\\n    function _ensureMaxLoops(uint256 len) internal view {\\n        if (len > maxLoopsLimit) {\\n            revert MaxLoopsLimitExceeded(maxLoopsLimit, len);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98c97af128677629375ca93e8d8ca3f337a4abf9304a0a4ddaea9d96cc554c3b\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/Prime/Interfaces/IPrimeLiquidityProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IPrimeLiquidityProvider\\n * @author Venus\\n * @notice Interface for PrimeLiquidityProvider\\n */\\ninterface IPrimeLiquidityProvider {\\n    /**\\n     * @notice Initialize the distribution of the token\\n     * @param tokens_ Array of addresses of the tokens to be intialized\\n     */\\n    function initializeTokens(address[] calldata tokens_) external;\\n\\n    /**\\n     * @notice Pause fund transfer of tokens to Prime contract\\n     */\\n    function pauseFundsTransfer() external;\\n\\n    /**\\n     * @notice Resume fund transfer of tokens to Prime contract\\n     */\\n    function resumeFundsTransfer() external;\\n\\n    /**\\n     * @notice Set distribution speed (amount of token distribute per block)\\n     * @param tokens_ Array of addresses of the tokens\\n     * @param distributionSpeeds_ New distribution speeds for tokens\\n     */\\n    function setTokensDistributionSpeed(address[] calldata tokens_, uint256[] calldata distributionSpeeds_) external;\\n\\n    /**\\n     * @notice Set the prime token contract address\\n     * @param prime_ The new address of the prime token contract\\n     */\\n    function setPrimeToken(address prime_) external;\\n\\n    /**\\n     * @notice Claim all the token accrued till last block\\n     * @param token_ The token to release to the Prime contract\\n     */\\n    function releaseFunds(address token_) external;\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user\\n     * @param token_ The address of the ERC-20 token to sweep\\n     * @param to_ The address of the recipient\\n     * @param amount_ The amount of tokens needs to transfer\\n     */\\n    function sweepToken(IERC20Upgradeable token_, address to_, uint256 amount_) external;\\n\\n    /**\\n     * @notice Accrue token by updating the distribution state\\n     * @param token_ Address of the token\\n     */\\n    function accrueTokens(address token_) external;\\n\\n    /**\\n     * @notice Get rewards per block for token\\n     * @param token_ Address of the token\\n     * @return speed returns the per block reward\\n     */\\n    function getEffectiveDistributionSpeed(address token_) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the latest block number\\n     * @return blockNumber returns the block number\\n     */\\n    function getBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the amount of tokens accrued\\n     * @param token_ Address of the token\\n     * @return Amount of tokens that are accrued\\n     */\\n    function tokenAmountAccrued(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3deea0ce0d0da66302b9c97a7713a387f14e08159703f8a3a8721612c0336b9\",\"license\":\"BSD-3-Clause\"},\"contracts/Tokens/Prime/PrimeLiquidityProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { SafeERC20Upgradeable, IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { AccessControlledV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { IPrimeLiquidityProvider } from \\\"./Interfaces/IPrimeLiquidityProvider.sol\\\";\\nimport { MaxLoopsLimitHelper } from \\\"@venusprotocol/isolated-pools/contracts/MaxLoopsLimitHelper.sol\\\";\\n\\n/**\\n * @title PrimeLiquidityProvider\\n * @author Venus\\n * @notice PrimeLiquidityProvider is used to fund Prime\\n */\\ncontract PrimeLiquidityProvider is\\n    IPrimeLiquidityProvider,\\n    AccessControlledV8,\\n    PausableUpgradeable,\\n    MaxLoopsLimitHelper\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice The default max token distribution speed\\n    uint256 public constant DEFAULT_MAX_DISTRIBUTION_SPEED = 1e18;\\n\\n    /// @notice Address of the Prime contract\\n    address public prime;\\n\\n    /// @notice The rate at which token is distributed (per block)\\n    mapping(address => uint256) public tokenDistributionSpeeds;\\n\\n    /// @notice The max token distribution speed for token\\n    mapping(address => uint256) public maxTokenDistributionSpeeds;\\n\\n    /// @notice The rate at which token is distributed to the Prime contract\\n    mapping(address => uint256) public lastAccruedBlock;\\n\\n    /// @notice The token accrued but not yet transferred to prime contract\\n    mapping(address => uint256) public tokenAmountAccrued;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    /// variables without shifting down storage in the inheritance chain.\\n    uint256[45] private __gap;\\n\\n    /// @notice Emitted when a token distribution is initialized\\n    event TokenDistributionInitialized(address indexed token);\\n\\n    /// @notice Emitted when a new token distribution speed is set\\n    event TokenDistributionSpeedUpdated(address indexed token, uint256 oldSpeed, uint256 newSpeed);\\n\\n    /// @notice Emitted when a new max distribution speed for token is set\\n    event MaxTokenDistributionSpeedUpdated(address indexed token, uint256 oldSpeed, uint256 newSpeed);\\n\\n    /// @notice Emitted when prime token contract address is changed\\n    event PrimeTokenUpdated(address indexed oldPrimeToken, address indexed newPrimeToken);\\n\\n    /// @notice Emitted when distribution state(Index and block) is updated\\n    event TokensAccrued(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted when token is transferred to the prime contract\\n    event TokenTransferredToPrime(address indexed token, uint256 amount);\\n\\n    /// @notice Emitted on sweep token success\\n    event SweepToken(address indexed token, address indexed to, uint256 sweepAmount);\\n\\n    /// @notice Thrown when arguments are passed are invalid\\n    error InvalidArguments();\\n\\n    /// @notice Thrown when distribution speed is greater than maxTokenDistributionSpeeds[tokenAddress]\\n    error InvalidDistributionSpeed(uint256 speed, uint256 maxSpeed);\\n\\n    /// @notice Thrown when caller is not the desired caller\\n    error InvalidCaller();\\n\\n    /// @notice Thrown when token is initialized\\n    error TokenAlreadyInitialized(address token);\\n\\n    ///@notice Error thrown when PrimeLiquidityProvider's balance is less than sweep amount\\n    error InsufficientBalance(uint256 sweepAmount, uint256 balance);\\n\\n    /// @notice Error thrown when funds transfer is paused\\n    error FundsTransferIsPaused();\\n\\n    /// @notice Error thrown when interest accrue is called for not initialized token\\n    error TokenNotInitialized(address token_);\\n\\n    /// @notice Error thrown when argument value in setter is same as previous value\\n    error AddressesMustDiffer();\\n\\n    /**\\n     * @notice Compares two addresses to ensure they are different\\n     * @param oldAddress The original address to compare\\n     * @param newAddress The new address to compare\\n     */\\n    modifier compareAddress(address oldAddress, address newAddress) {\\n        if (newAddress == oldAddress) {\\n            revert AddressesMustDiffer();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice PrimeLiquidityProvider initializer\\n     * @dev Initializes the deployer to owner\\n     * @param accessControlManager_ AccessControlManager contract address\\n     * @param tokens_ Array of addresses of the tokens\\n     * @param distributionSpeeds_ New distribution speeds for tokens\\n     * @param loopsLimit_ Maximum number of loops allowed in a single transaction\\n     * @custom:error Throw InvalidArguments on different length of tokens and speeds array\\n     */\\n    function initialize(\\n        address accessControlManager_,\\n        address[] calldata tokens_,\\n        uint256[] calldata distributionSpeeds_,\\n        uint256[] calldata maxDistributionSpeeds_,\\n        uint256 loopsLimit_\\n    ) external initializer {\\n        _ensureZeroAddress(accessControlManager_);\\n\\n        __AccessControlled_init(accessControlManager_);\\n        __Pausable_init();\\n        _setMaxLoopsLimit(loopsLimit_);\\n\\n        uint256 numTokens = tokens_.length;\\n        _ensureMaxLoops(numTokens);\\n\\n        if ((numTokens != distributionSpeeds_.length) || (numTokens != maxDistributionSpeeds_.length)) {\\n            revert InvalidArguments();\\n        }\\n\\n        for (uint256 i; i < numTokens; ) {\\n            _initializeToken(tokens_[i]);\\n            _setMaxTokenDistributionSpeed(tokens_[i], maxDistributionSpeeds_[i]);\\n            _setTokenDistributionSpeed(tokens_[i], distributionSpeeds_[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Initialize the distribution of the token\\n     * @param tokens_ Array of addresses of the tokens to be intialized\\n     * @custom:access Only Governance\\n     */\\n    function initializeTokens(address[] calldata tokens_) external onlyOwner {\\n        uint256 tokensLength = tokens_.length;\\n        _ensureMaxLoops(tokensLength);\\n\\n        for (uint256 i; i < tokensLength; ) {\\n            _initializeToken(tokens_[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Pause fund transfer of tokens to Prime contract\\n     * @custom:access Controlled by ACM\\n     */\\n    function pauseFundsTransfer() external {\\n        _checkAccessAllowed(\\\"pauseFundsTransfer()\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Resume fund transfer of tokens to Prime contract\\n     * @custom:access Controlled by ACM\\n     */\\n    function resumeFundsTransfer() external {\\n        _checkAccessAllowed(\\\"resumeFundsTransfer()\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Set distribution speed (amount of token distribute per block)\\n     * @param tokens_ Array of addresses of the tokens\\n     * @param distributionSpeeds_ New distribution speeds for tokens\\n     * @custom:access Controlled by ACM\\n     * @custom:error Throw InvalidArguments on different length of tokens and speeds array\\n     */\\n    function setTokensDistributionSpeed(address[] calldata tokens_, uint256[] calldata distributionSpeeds_) external {\\n        _checkAccessAllowed(\\\"setTokensDistributionSpeed(address[],uint256[])\\\");\\n        uint256 numTokens = tokens_.length;\\n        _ensureMaxLoops(numTokens);\\n\\n        if (numTokens != distributionSpeeds_.length) {\\n            revert InvalidArguments();\\n        }\\n\\n        for (uint256 i; i < numTokens; ) {\\n            _ensureTokenInitialized(tokens_[i]);\\n            _setTokenDistributionSpeed(tokens_[i], distributionSpeeds_[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Set max distribution speed for token (amount of maximum token distribute per block)\\n     * @param tokens_ Array of addresses of the tokens\\n     * @param maxDistributionSpeeds_ New distribution speeds for tokens\\n     * @custom:access Controlled by ACM\\n     * @custom:error Throw InvalidArguments on different length of tokens and speeds array\\n     */\\n    function setMaxTokensDistributionSpeed(\\n        address[] calldata tokens_,\\n        uint256[] calldata maxDistributionSpeeds_\\n    ) external {\\n        _checkAccessAllowed(\\\"setMaxTokensDistributionSpeed(address[],uint256[])\\\");\\n        uint256 numTokens = tokens_.length;\\n        _ensureMaxLoops(numTokens);\\n\\n        if (numTokens != maxDistributionSpeeds_.length) {\\n            revert InvalidArguments();\\n        }\\n\\n        for (uint256 i; i < numTokens; ) {\\n            _setMaxTokenDistributionSpeed(tokens_[i], maxDistributionSpeeds_[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the prime token contract address\\n     * @param prime_ The new address of the prime token contract\\n     * @custom:event Emits PrimeTokenUpdated event\\n     * @custom:access Only owner\\n     */\\n    function setPrimeToken(address prime_) external onlyOwner compareAddress(prime, prime_) {\\n        _ensureZeroAddress(prime_);\\n\\n        emit PrimeTokenUpdated(prime, prime_);\\n        prime = prime_;\\n    }\\n\\n    /**\\n     * @notice Set the limit for the loops can iterate to avoid the DOS\\n     * @param loopsLimit Limit for the max loops can execute at a time\\n     * @custom:event Emits MaxLoopsLimitUpdated event on success\\n     * @custom:access Controlled by ACM\\n     */\\n    function setMaxLoopsLimit(uint256 loopsLimit) external {\\n        _checkAccessAllowed(\\\"setMaxLoopsLimit(uint256)\\\");\\n        _setMaxLoopsLimit(loopsLimit);\\n    }\\n\\n    /**\\n     * @notice Claim all the token accrued till last block\\n     * @param token_ The token to release to the Prime contract\\n     * @custom:event Emits TokenTransferredToPrime event\\n     * @custom:error Throw InvalidArguments on Zero address(token)\\n     * @custom:error Throw FundsTransferIsPaused is paused\\n     * @custom:error Throw InvalidCaller if the sender is not the Prime contract\\n     */\\n    function releaseFunds(address token_) external {\\n        address _prime = prime;\\n        if (msg.sender != _prime) revert InvalidCaller();\\n        if (paused()) {\\n            revert FundsTransferIsPaused();\\n        }\\n\\n        accrueTokens(token_);\\n        uint256 accruedAmount = tokenAmountAccrued[token_];\\n        delete tokenAmountAccrued[token_];\\n\\n        emit TokenTransferredToPrime(token_, accruedAmount);\\n\\n        IERC20Upgradeable(token_).safeTransfer(_prime, accruedAmount);\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user\\n     * @param token_ The address of the ERC-20 token to sweep\\n     * @param to_ The address of the recipient\\n     * @param amount_ The amount of tokens needs to transfer\\n     * @custom:event Emits SweepToken event\\n     * @custom:error Throw InsufficientBalance if amount_ is greater than the available balance of the token in the contract\\n     * @custom:access Only Governance\\n     */\\n    function sweepToken(IERC20Upgradeable token_, address to_, uint256 amount_) external onlyOwner {\\n        uint256 balance = token_.balanceOf(address(this));\\n        if (amount_ > balance) {\\n            revert InsufficientBalance(amount_, balance);\\n        }\\n\\n        emit SweepToken(address(token_), to_, amount_);\\n\\n        token_.safeTransfer(to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Get rewards per block for token\\n     * @param token_ Address of the token\\n     * @return speed returns the per block reward\\n     */\\n    function getEffectiveDistributionSpeed(address token_) external view returns (uint256) {\\n        uint256 distributionSpeed = tokenDistributionSpeeds[token_];\\n        uint256 balance = IERC20Upgradeable(token_).balanceOf(address(this));\\n        uint256 accrued = tokenAmountAccrued[token_];\\n\\n        if (balance > accrued) {\\n            return distributionSpeed;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Accrue token by updating the distribution state\\n     * @param token_ Address of the token\\n     * @custom:event Emits TokensAccrued event\\n     */\\n    function accrueTokens(address token_) public {\\n        _ensureZeroAddress(token_);\\n\\n        _ensureTokenInitialized(token_);\\n\\n        uint256 blockNumber = getBlockNumber();\\n        uint256 deltaBlocks;\\n        unchecked {\\n            deltaBlocks = blockNumber - lastAccruedBlock[token_];\\n        }\\n\\n        if (deltaBlocks != 0) {\\n            uint256 distributionSpeed = tokenDistributionSpeeds[token_];\\n            uint256 balance = IERC20Upgradeable(token_).balanceOf(address(this));\\n\\n            uint256 balanceDiff = balance - tokenAmountAccrued[token_];\\n            if (distributionSpeed != 0 && balanceDiff != 0) {\\n                uint256 accruedSinceUpdate = deltaBlocks * distributionSpeed;\\n                uint256 tokenAccrued = (balanceDiff <= accruedSinceUpdate ? balanceDiff : accruedSinceUpdate);\\n\\n                tokenAmountAccrued[token_] += tokenAccrued;\\n                emit TokensAccrued(token_, tokenAccrued);\\n            }\\n\\n            lastAccruedBlock[token_] = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the latest block number\\n     * @return blockNumber returns the block number\\n     */\\n    function getBlockNumber() public view virtual returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Initialize the distribution of the token\\n     * @param token_ Address of the token to be intialized\\n     * @custom:event Emits TokenDistributionInitialized event\\n     * @custom:error Throw TokenAlreadyInitialized if token is already initialized\\n     */\\n    function _initializeToken(address token_) internal {\\n        _ensureZeroAddress(token_);\\n        uint256 blockNumber = getBlockNumber();\\n        uint256 initializedBlock = lastAccruedBlock[token_];\\n\\n        if (initializedBlock != 0) {\\n            revert TokenAlreadyInitialized(token_);\\n        }\\n\\n        /*\\n         * Update token state block number\\n         */\\n        lastAccruedBlock[token_] = blockNumber;\\n\\n        emit TokenDistributionInitialized(token_);\\n    }\\n\\n    /**\\n     * @notice Set distribution speed (amount of token distribute per block)\\n     * @param token_ Address of the token\\n     * @param distributionSpeed_ New distribution speed for token\\n     * @custom:event Emits TokenDistributionSpeedUpdated event\\n     * @custom:error Throw InvalidDistributionSpeed if speed is greater than max speed\\n     */\\n    function _setTokenDistributionSpeed(address token_, uint256 distributionSpeed_) internal {\\n        uint256 maxDistributionSpeed = maxTokenDistributionSpeeds[token_];\\n        if (maxDistributionSpeed == 0) {\\n            maxTokenDistributionSpeeds[token_] = maxDistributionSpeed = DEFAULT_MAX_DISTRIBUTION_SPEED;\\n        }\\n\\n        if (distributionSpeed_ > maxDistributionSpeed) {\\n            revert InvalidDistributionSpeed(distributionSpeed_, maxDistributionSpeed);\\n        }\\n\\n        uint256 oldDistributionSpeed = tokenDistributionSpeeds[token_];\\n        if (oldDistributionSpeed != distributionSpeed_) {\\n            // Distribution speed updated so let's update distribution state to ensure that\\n            //  1. Token accrued properly for the old speed, and\\n            //  2. Token accrued at the new speed starts after this block.\\n            accrueTokens(token_);\\n\\n            // Update speed\\n            tokenDistributionSpeeds[token_] = distributionSpeed_;\\n\\n            emit TokenDistributionSpeedUpdated(token_, oldDistributionSpeed, distributionSpeed_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set max distribution speed (amount of maximum token distribute per block)\\n     * @param token_ Address of the token\\n     * @param maxDistributionSpeed_ New max distribution speed for token\\n     * @custom:event Emits MaxTokenDistributionSpeedUpdated event\\n     */\\n    function _setMaxTokenDistributionSpeed(address token_, uint256 maxDistributionSpeed_) internal {\\n        emit MaxTokenDistributionSpeedUpdated(token_, tokenDistributionSpeeds[token_], maxDistributionSpeed_);\\n        maxTokenDistributionSpeeds[token_] = maxDistributionSpeed_;\\n    }\\n\\n    /**\\n     * @notice Revert on non initialized token\\n     * @param token_ Token Address to be verified for\\n     */\\n    function _ensureTokenInitialized(address token_) internal view {\\n        uint256 lastBlockAccrued = lastAccruedBlock[token_];\\n\\n        if (lastBlockAccrued == 0) {\\n            revert TokenNotInitialized(token_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Revert on zero address\\n     * @param address_ Address to be verified\\n     */\\n    function _ensureZeroAddress(address address_) internal pure {\\n        if (address_ == address(0)) {\\n            revert InvalidArguments();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdaac9325a6fa6b593ae04e58f9274f8faecc58d9158d4a49d5e4c07a257acd0a\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611d92806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638da5cb5b116100f9578063c32094c711610097578063e30c397811610071578063e30c39781461039d578063e458a65d146103ae578063f2fde38b146103c1578063fa7781ff146103d457600080fd5b8063c32094c714610363578063c7ee005e14610376578063ce82e8411461038a57600080fd5b8063a666642b116100d3578063a666642b1461032e578063b4a0bdf314610341578063bc2f7dc314610352578063be26317e1461035a57600080fd5b80638da5cb5b146102e757806393920bf81461030c5780639dd5428e1461031f57600080fd5b80635c975abb11610166578063715018a611610140578063715018a6146102b157806379ba5097146102b957806380d45a2d146102c15780638aadf799146102d457600080fd5b80635c975abb14610267578063637c9b4e1461027d57806364aff9ec1461029e57600080fd5b80633131b065116101a25780633131b0651461022557806342cbb15c1461023857806343bf72831461023e5780635a38f84d1461025f57600080fd5b80630e32cb86146101c9578063192e7a7b146101de578063231f82bb146101f1575b600080fd5b6101dc6101d73660046118ef565b6103f5565b005b6101dc6101ec3660046118ef565b610409565b6102126101ff3660046118ef565b61012e6020526000908152604090205481565b6040519081526020015b60405180910390f35b6101dc61023336600461195f565b6104cf565b43610212565b61021261024c3660046118ef565b6101306020526000908152604090205481565b6101dc610529565b60c95460ff16604051901515815260200161021c565b61021261028b3660046118ef565b61012f6020526000908152604090205481565b6101dc6102ac3660046119a1565b610568565b6101dc61066e565b6101dc610680565b6101dc6102cf3660046119e2565b6106f7565b6101dc6102e23660046118ef565b61073e565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161021c565b6101dc61031a3660046119fb565b6108e3565b610212670de0b6b3a764000081565b61021261033c3660046118ef565b610991565b6097546001600160a01b03166102f4565b6101dc610a48565b61021260fb5481565b6101dc6103713660046118ef565b610a86565b61012d546102f4906001600160a01b031681565b6101dc6103983660046119fb565b610b2b565b6065546001600160a01b03166102f4565b6101dc6103bc366004611a67565b610c00565b6101dc6103cf3660046118ef565b610e0d565b6102126103e23660046118ef565b6101316020526000908152604090205481565b6103fd610e7e565b61040681610ed8565b50565b61012d546001600160a01b0316338114610436576040516348f5c3ed60e01b815260040160405180910390fd5b60c95460ff161561045a5760405163f4eaf50160e01b815260040160405180910390fd5b6104638261073e565b6001600160a01b0382166000818152610131602090815260408083208054939055518281529192917fa80c25cc8959419d41ee66f93961c567b272badc10e0e117261a0ee31b55c312910160405180910390a26104ca6001600160a01b0384168383610f9e565b505050565b6104d7610e7e565b806104e181610ff0565b60005b818110156105235761051b84848381811061050157610501611b1b565b905060200201602081019061051691906118ef565b611021565b6001016104e4565b50505050565b61055e60405180604001604052806014815260200173706175736546756e64735472616e73666572282960601b8152506110b7565b610566611155565b565b610570610e7e565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190611b31565b90508082111561060d5760405163cf47918160e01b815260048101839052602481018290526044015b60405180910390fd5b826001600160a01b0316846001600160a01b03167f6d25be279134f4ecaa4770aff0c3d916d9e7c5ef37b65ed95dbdba411f5d54d58460405161065291815260200190565b60405180910390a36105236001600160a01b0385168484610f9e565b610676610e7e565b61056660006111af565b60655433906001600160a01b031681146106ee5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610604565b610406816111af565b6107356040518060400160405280601981526020017f7365744d61784c6f6f70734c696d69742875696e7432353629000000000000008152506110b7565b610406816111c8565b61074781611262565b61075081611289565b6001600160a01b0381166000908152610130602052604090205443908082039082146104ca576001600160a01b038316600081815261012e60205260408082205490516370a0823160e01b81523060048201529092906370a0823190602401602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611b31565b6001600160a01b03861660009081526101316020526040812054919250906108189083611b60565b9050821580159061082857508015155b156108c15760006108398486611b77565b905060008183111561084b578161084d565b825b6001600160a01b0389166000908152610131602052604081208054929350839290919061087b908490611b96565b90915550506040518181526001600160a01b038916907ffe854c4c4e633d5bb31aec1f39f01d9f8f01ad2e0212a0e576825ac986af05899060200160405180910390a250505b505050506001600160a01b039190911660009081526101306020526040902055565b610904604051806060016040528060328152602001611cfc603291396110b7565b8261090e81610ff0565b80821461092e576040516317dbc4cb60e21b815260040160405180910390fd5b60005b818110156109895761098186868381811061094e5761094e611b1b565b905060200201602081019061096391906118ef565b85858481811061097557610975611b1b565b905060200201356112cf565b600101610931565b505050505050565b6001600160a01b038116600081815261012e60205260408082205490516370a0823160e01b8152306004820152919290918391906370a0823190602401602060405180830381865afa1580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f9190611b31565b6001600160a01b0385166000908152610131602052604090205490915080821115610a3d5750909392505050565b506000949350505050565b610a7e60405180604001604052806015815260200174726573756d6546756e64735472616e73666572282960581b8152506110b7565b610566611340565b610a8e610e7e565b61012d546001600160a01b039081169082908116829003610ac2576040516380ae98f560e01b815260040160405180910390fd5b610acb83611262565b61012d546040516001600160a01b038086169216907fcf4d0ac7a2f943727f0189dd1f26ba0cde29a1b14f222163ac866d4f5167db9490600090a3505061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b610b4c6040518060600160405280602f8152602001611d2e602f91396110b7565b82610b5681610ff0565b808214610b76576040516317dbc4cb60e21b815260040160405180910390fd5b60005b8181101561098957610bb0868683818110610b9657610b96611b1b565b9050602002016020810190610bab91906118ef565b611289565b610bf8868683818110610bc557610bc5611b1b565b9050602002016020810190610bda91906118ef565b858584818110610bec57610bec611b1b565b90506020020135611379565b600101610b79565b600054610100900460ff1615808015610c205750600054600160ff909116105b80610c3a5750303b158015610c3a575060005460ff166001145b610c9d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610604565b6000805460ff191660011790558015610cc0576000805461ff0019166101001790555b610cc989611262565b610cd289611474565b610cda6114ac565b610ce3826111c8565b86610ced81610ff0565b8086141580610cfc5750808414155b15610d1a576040516317dbc4cb60e21b815260040160405180910390fd5b60005b81811015610dba57610d3a8a8a8381811061050157610501611b1b565b610d768a8a83818110610d4f57610d4f611b1b565b9050602002016020810190610d6491906118ef565b87878481811061097557610975611b1b565b610db28a8a83818110610d8b57610d8b611b1b565b9050602002016020810190610da091906118ef565b898984818110610bec57610bec611b1b565b600101610d1d565b50508015610e02576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b610e15610e7e565b606580546001600160a01b0383166001600160a01b03199091168117909155610e466033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146105665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610604565b6001600160a01b038116610f3c5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610604565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa091015b60405180910390a15050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104ca9084906114db565b60fb548111156104065760fb5460405163792bfb1b60e11b8152600481019190915260248101829052604401610604565b61102a81611262565b6001600160a01b0381166000908152610130602052604090205443908015611070576040516303b51ceb60e11b81526001600160a01b0384166004820152602401610604565b6001600160a01b03831660008181526101306020526040808220859055517fcf6e06116a82c1b468912f23d8bb1d126edbb21bc0864d6d5169e3be39b1a8189190a2505050565b6097546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906110ea9033908690600401611c06565b602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190611c2a565b90508061115157333083604051634a3fa29360e01b815260040161060493929190611c4c565b5050565b61115d6115b0565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111923390565b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b0319169055610406816115f6565b60fb5481116112245760405162461bcd60e51b815260206004820152602260248201527f436f6d7074726f6c6c65723a20496e76616c6964206d61784c6f6f70734c696d6044820152611a5d60f21b6064820152608401610604565b60fb80549082905560408051828152602081018490527fc2d09fef144f7c8a86f71ea459f8fc17f675768eb1ae369cbd77fb31d467aafa9101610f92565b6001600160a01b038116610406576040516317dbc4cb60e21b815260040160405180910390fd5b6001600160a01b0381166000908152610130602052604081205490819003611151576040516341ea4b5960e01b81526001600160a01b0383166004820152602401610604565b6001600160a01b038216600081815261012e60209081526040918290205482519081529081018490527f2351eb1e51f0d96d3d2dc08e3c9bddbdb2153580843330b57433c3bf5031be01910160405180910390a26001600160a01b03909116600090815261012f6020526040902055565b611348611648565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611192565b6001600160a01b038216600090815261012f6020526040812054908190036113c357506001600160a01b038216600090815261012f60205260409020670de0b6b3a7640000908190555b808211156113ee57604051631cf8f4dd60e11b81526004810183905260248101829052604401610604565b6001600160a01b038316600090815261012e6020526040902054828114610523576114188461073e565b6001600160a01b038416600081815261012e602090815260409182902086905581518481529081018690527f2a139b40b9bf8c89ae5053746323912620b9d8ea3b076b098b1bc57702abf3a5910160405180910390a250505050565b600054610100900460ff1661149b5760405162461bcd60e51b815260040161060490611c81565b6114a3611691565b610406816116c0565b600054610100900460ff166114d35760405162461bcd60e51b815260040161060490611c81565b6105666116e7565b6000611530826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661171a9092919063ffffffff16565b90508051600014806115515750808060200190518101906115519190611c2a565b6104ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610604565b60c95460ff16156105665760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610604565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60c95460ff166105665760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610604565b600054610100900460ff166116b85760405162461bcd60e51b815260040161060490611c81565b610566611731565b600054610100900460ff166103fd5760405162461bcd60e51b815260040161060490611c81565b600054610100900460ff1661170e5760405162461bcd60e51b815260040161060490611c81565b60c9805460ff19169055565b60606117298484600085611761565b949350505050565b600054610100900460ff166117585760405162461bcd60e51b815260040161060490611c81565b610566336111af565b6060824710156117c25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610604565b600080866001600160a01b031685876040516117de9190611ccc565b60006040518083038185875af1925050503d806000811461181b576040519150601f19603f3d011682016040523d82523d6000602084013e611820565b606091505b50915091506118318783838761183c565b979650505050505050565b606083156118ab5782516000036118a4576001600160a01b0385163b6118a45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610604565b5081611729565b61172983838151156118c05781518083602001fd5b8060405162461bcd60e51b81526004016106049190611ce8565b6001600160a01b038116811461040657600080fd5b60006020828403121561190157600080fd5b813561190c816118da565b9392505050565b60008083601f84011261192557600080fd5b50813567ffffffffffffffff81111561193d57600080fd5b6020830191508360208260051b850101111561195857600080fd5b9250929050565b6000806020838503121561197257600080fd5b823567ffffffffffffffff81111561198957600080fd5b61199585828601611913565b90969095509350505050565b6000806000606084860312156119b657600080fd5b83356119c1816118da565b925060208401356119d1816118da565b929592945050506040919091013590565b6000602082840312156119f457600080fd5b5035919050565b60008060008060408587031215611a1157600080fd5b843567ffffffffffffffff80821115611a2957600080fd5b611a3588838901611913565b90965094506020870135915080821115611a4e57600080fd5b50611a5b87828801611913565b95989497509550505050565b60008060008060008060008060a0898b031215611a8357600080fd5b8835611a8e816118da565b9750602089013567ffffffffffffffff80821115611aab57600080fd5b611ab78c838d01611913565b909950975060408b0135915080821115611ad057600080fd5b611adc8c838d01611913565b909750955060608b0135915080821115611af557600080fd5b50611b028b828c01611913565b999c989b50969995989497949560800135949350505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b4357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611b7257611b72611b4a565b500390565b6000816000190483118215151615611b9157611b91611b4a565b500290565b60008219821115611ba957611ba9611b4a565b500190565b60005b83811015611bc9578181015183820152602001611bb1565b838111156105235750506000910152565b60008151808452611bf2816020860160208601611bae565b601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061172990830184611bda565b600060208284031215611c3c57600080fd5b8151801515811461190c57600080fd5b6001600160a01b03848116825283166020820152606060408201819052600090611c7890830184611bda565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251611cde818460208701611bae565b9190910192915050565b60208152600061190c6020830184611bda56fe7365744d6178546f6b656e73446973747269627574696f6e537065656428616464726573735b5d2c75696e743235365b5d29736574546f6b656e73446973747269627574696f6e537065656428616464726573735b5d2c75696e743235365b5d29a26469706673582212201b6d8718534b307b2130709cc0e319f7a90f38867b2553db52a267980ddeffcf64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80638da5cb5b116100f9578063c32094c711610097578063e30c397811610071578063e30c39781461039d578063e458a65d146103ae578063f2fde38b146103c1578063fa7781ff146103d457600080fd5b8063c32094c714610363578063c7ee005e14610376578063ce82e8411461038a57600080fd5b8063a666642b116100d3578063a666642b1461032e578063b4a0bdf314610341578063bc2f7dc314610352578063be26317e1461035a57600080fd5b80638da5cb5b146102e757806393920bf81461030c5780639dd5428e1461031f57600080fd5b80635c975abb11610166578063715018a611610140578063715018a6146102b157806379ba5097146102b957806380d45a2d146102c15780638aadf799146102d457600080fd5b80635c975abb14610267578063637c9b4e1461027d57806364aff9ec1461029e57600080fd5b80633131b065116101a25780633131b0651461022557806342cbb15c1461023857806343bf72831461023e5780635a38f84d1461025f57600080fd5b80630e32cb86146101c9578063192e7a7b146101de578063231f82bb146101f1575b600080fd5b6101dc6101d73660046118ef565b6103f5565b005b6101dc6101ec3660046118ef565b610409565b6102126101ff3660046118ef565b61012e6020526000908152604090205481565b6040519081526020015b60405180910390f35b6101dc61023336600461195f565b6104cf565b43610212565b61021261024c3660046118ef565b6101306020526000908152604090205481565b6101dc610529565b60c95460ff16604051901515815260200161021c565b61021261028b3660046118ef565b61012f6020526000908152604090205481565b6101dc6102ac3660046119a1565b610568565b6101dc61066e565b6101dc610680565b6101dc6102cf3660046119e2565b6106f7565b6101dc6102e23660046118ef565b61073e565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161021c565b6101dc61031a3660046119fb565b6108e3565b610212670de0b6b3a764000081565b61021261033c3660046118ef565b610991565b6097546001600160a01b03166102f4565b6101dc610a48565b61021260fb5481565b6101dc6103713660046118ef565b610a86565b61012d546102f4906001600160a01b031681565b6101dc6103983660046119fb565b610b2b565b6065546001600160a01b03166102f4565b6101dc6103bc366004611a67565b610c00565b6101dc6103cf3660046118ef565b610e0d565b6102126103e23660046118ef565b6101316020526000908152604090205481565b6103fd610e7e565b61040681610ed8565b50565b61012d546001600160a01b0316338114610436576040516348f5c3ed60e01b815260040160405180910390fd5b60c95460ff161561045a5760405163f4eaf50160e01b815260040160405180910390fd5b6104638261073e565b6001600160a01b0382166000818152610131602090815260408083208054939055518281529192917fa80c25cc8959419d41ee66f93961c567b272badc10e0e117261a0ee31b55c312910160405180910390a26104ca6001600160a01b0384168383610f9e565b505050565b6104d7610e7e565b806104e181610ff0565b60005b818110156105235761051b84848381811061050157610501611b1b565b905060200201602081019061051691906118ef565b611021565b6001016104e4565b50505050565b61055e60405180604001604052806014815260200173706175736546756e64735472616e73666572282960601b8152506110b7565b610566611155565b565b610570610e7e565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190611b31565b90508082111561060d5760405163cf47918160e01b815260048101839052602481018290526044015b60405180910390fd5b826001600160a01b0316846001600160a01b03167f6d25be279134f4ecaa4770aff0c3d916d9e7c5ef37b65ed95dbdba411f5d54d58460405161065291815260200190565b60405180910390a36105236001600160a01b0385168484610f9e565b610676610e7e565b61056660006111af565b60655433906001600160a01b031681146106ee5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610604565b610406816111af565b6107356040518060400160405280601981526020017f7365744d61784c6f6f70734c696d69742875696e7432353629000000000000008152506110b7565b610406816111c8565b61074781611262565b61075081611289565b6001600160a01b0381166000908152610130602052604090205443908082039082146104ca576001600160a01b038316600081815261012e60205260408082205490516370a0823160e01b81523060048201529092906370a0823190602401602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611b31565b6001600160a01b03861660009081526101316020526040812054919250906108189083611b60565b9050821580159061082857508015155b156108c15760006108398486611b77565b905060008183111561084b578161084d565b825b6001600160a01b0389166000908152610131602052604081208054929350839290919061087b908490611b96565b90915550506040518181526001600160a01b038916907ffe854c4c4e633d5bb31aec1f39f01d9f8f01ad2e0212a0e576825ac986af05899060200160405180910390a250505b505050506001600160a01b039190911660009081526101306020526040902055565b610904604051806060016040528060328152602001611cfc603291396110b7565b8261090e81610ff0565b80821461092e576040516317dbc4cb60e21b815260040160405180910390fd5b60005b818110156109895761098186868381811061094e5761094e611b1b565b905060200201602081019061096391906118ef565b85858481811061097557610975611b1b565b905060200201356112cf565b600101610931565b505050505050565b6001600160a01b038116600081815261012e60205260408082205490516370a0823160e01b8152306004820152919290918391906370a0823190602401602060405180830381865afa1580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f9190611b31565b6001600160a01b0385166000908152610131602052604090205490915080821115610a3d5750909392505050565b506000949350505050565b610a7e60405180604001604052806015815260200174726573756d6546756e64735472616e73666572282960581b8152506110b7565b610566611340565b610a8e610e7e565b61012d546001600160a01b039081169082908116829003610ac2576040516380ae98f560e01b815260040160405180910390fd5b610acb83611262565b61012d546040516001600160a01b038086169216907fcf4d0ac7a2f943727f0189dd1f26ba0cde29a1b14f222163ac866d4f5167db9490600090a3505061012d80546001600160a01b0319166001600160a01b0392909216919091179055565b610b4c6040518060600160405280602f8152602001611d2e602f91396110b7565b82610b5681610ff0565b808214610b76576040516317dbc4cb60e21b815260040160405180910390fd5b60005b8181101561098957610bb0868683818110610b9657610b96611b1b565b9050602002016020810190610bab91906118ef565b611289565b610bf8868683818110610bc557610bc5611b1b565b9050602002016020810190610bda91906118ef565b858584818110610bec57610bec611b1b565b90506020020135611379565b600101610b79565b600054610100900460ff1615808015610c205750600054600160ff909116105b80610c3a5750303b158015610c3a575060005460ff166001145b610c9d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610604565b6000805460ff191660011790558015610cc0576000805461ff0019166101001790555b610cc989611262565b610cd289611474565b610cda6114ac565b610ce3826111c8565b86610ced81610ff0565b8086141580610cfc5750808414155b15610d1a576040516317dbc4cb60e21b815260040160405180910390fd5b60005b81811015610dba57610d3a8a8a8381811061050157610501611b1b565b610d768a8a83818110610d4f57610d4f611b1b565b9050602002016020810190610d6491906118ef565b87878481811061097557610975611b1b565b610db28a8a83818110610d8b57610d8b611b1b565b9050602002016020810190610da091906118ef565b898984818110610bec57610bec611b1b565b600101610d1d565b50508015610e02576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b610e15610e7e565b606580546001600160a01b0383166001600160a01b03199091168117909155610e466033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146105665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610604565b6001600160a01b038116610f3c5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610604565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa091015b60405180910390a15050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104ca9084906114db565b60fb548111156104065760fb5460405163792bfb1b60e11b8152600481019190915260248101829052604401610604565b61102a81611262565b6001600160a01b0381166000908152610130602052604090205443908015611070576040516303b51ceb60e11b81526001600160a01b0384166004820152602401610604565b6001600160a01b03831660008181526101306020526040808220859055517fcf6e06116a82c1b468912f23d8bb1d126edbb21bc0864d6d5169e3be39b1a8189190a2505050565b6097546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906110ea9033908690600401611c06565b602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190611c2a565b90508061115157333083604051634a3fa29360e01b815260040161060493929190611c4c565b5050565b61115d6115b0565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111923390565b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b0319169055610406816115f6565b60fb5481116112245760405162461bcd60e51b815260206004820152602260248201527f436f6d7074726f6c6c65723a20496e76616c6964206d61784c6f6f70734c696d6044820152611a5d60f21b6064820152608401610604565b60fb80549082905560408051828152602081018490527fc2d09fef144f7c8a86f71ea459f8fc17f675768eb1ae369cbd77fb31d467aafa9101610f92565b6001600160a01b038116610406576040516317dbc4cb60e21b815260040160405180910390fd5b6001600160a01b0381166000908152610130602052604081205490819003611151576040516341ea4b5960e01b81526001600160a01b0383166004820152602401610604565b6001600160a01b038216600081815261012e60209081526040918290205482519081529081018490527f2351eb1e51f0d96d3d2dc08e3c9bddbdb2153580843330b57433c3bf5031be01910160405180910390a26001600160a01b03909116600090815261012f6020526040902055565b611348611648565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611192565b6001600160a01b038216600090815261012f6020526040812054908190036113c357506001600160a01b038216600090815261012f60205260409020670de0b6b3a7640000908190555b808211156113ee57604051631cf8f4dd60e11b81526004810183905260248101829052604401610604565b6001600160a01b038316600090815261012e6020526040902054828114610523576114188461073e565b6001600160a01b038416600081815261012e602090815260409182902086905581518481529081018690527f2a139b40b9bf8c89ae5053746323912620b9d8ea3b076b098b1bc57702abf3a5910160405180910390a250505050565b600054610100900460ff1661149b5760405162461bcd60e51b815260040161060490611c81565b6114a3611691565b610406816116c0565b600054610100900460ff166114d35760405162461bcd60e51b815260040161060490611c81565b6105666116e7565b6000611530826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661171a9092919063ffffffff16565b90508051600014806115515750808060200190518101906115519190611c2a565b6104ca5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610604565b60c95460ff16156105665760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610604565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60c95460ff166105665760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610604565b600054610100900460ff166116b85760405162461bcd60e51b815260040161060490611c81565b610566611731565b600054610100900460ff166103fd5760405162461bcd60e51b815260040161060490611c81565b600054610100900460ff1661170e5760405162461bcd60e51b815260040161060490611c81565b60c9805460ff19169055565b60606117298484600085611761565b949350505050565b600054610100900460ff166117585760405162461bcd60e51b815260040161060490611c81565b610566336111af565b6060824710156117c25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610604565b600080866001600160a01b031685876040516117de9190611ccc565b60006040518083038185875af1925050503d806000811461181b576040519150601f19603f3d011682016040523d82523d6000602084013e611820565b606091505b50915091506118318783838761183c565b979650505050505050565b606083156118ab5782516000036118a4576001600160a01b0385163b6118a45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610604565b5081611729565b61172983838151156118c05781518083602001fd5b8060405162461bcd60e51b81526004016106049190611ce8565b6001600160a01b038116811461040657600080fd5b60006020828403121561190157600080fd5b813561190c816118da565b9392505050565b60008083601f84011261192557600080fd5b50813567ffffffffffffffff81111561193d57600080fd5b6020830191508360208260051b850101111561195857600080fd5b9250929050565b6000806020838503121561197257600080fd5b823567ffffffffffffffff81111561198957600080fd5b61199585828601611913565b90969095509350505050565b6000806000606084860312156119b657600080fd5b83356119c1816118da565b925060208401356119d1816118da565b929592945050506040919091013590565b6000602082840312156119f457600080fd5b5035919050565b60008060008060408587031215611a1157600080fd5b843567ffffffffffffffff80821115611a2957600080fd5b611a3588838901611913565b90965094506020870135915080821115611a4e57600080fd5b50611a5b87828801611913565b95989497509550505050565b60008060008060008060008060a0898b031215611a8357600080fd5b8835611a8e816118da565b9750602089013567ffffffffffffffff80821115611aab57600080fd5b611ab78c838d01611913565b909950975060408b0135915080821115611ad057600080fd5b611adc8c838d01611913565b909750955060608b0135915080821115611af557600080fd5b50611b028b828c01611913565b999c989b50969995989497949560800135949350505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611b4357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611b7257611b72611b4a565b500390565b6000816000190483118215151615611b9157611b91611b4a565b500290565b60008219821115611ba957611ba9611b4a565b500190565b60005b83811015611bc9578181015183820152602001611bb1565b838111156105235750506000910152565b60008151808452611bf2816020860160208601611bae565b601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061172990830184611bda565b600060208284031215611c3c57600080fd5b8151801515811461190c57600080fd5b6001600160a01b03848116825283166020820152606060408201819052600090611c7890830184611bda565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251611cde818460208701611bae565b9190910192915050565b60208152600061190c6020830184611bda56fe7365744d6178546f6b656e73446973747269627574696f6e537065656428616464726573735b5d2c75696e743235365b5d29736574546f6b656e73446973747269627574696f6e537065656428616464726573735b5d2c75696e743235365b5d29a26469706673582212201b6d8718534b307b2130709cc0e319f7a90f38867b2553db52a267980ddeffcf64736f6c634300080d0033",
  "devdoc": {
    "author": "Venus",
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "accrueTokens(address)": {
        "custom:event": "Emits TokensAccrued event",
        "params": {
          "token_": "Address of the token"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getBlockNumber()": {
        "returns": {
          "_0": "blockNumber returns the block number"
        }
      },
      "getEffectiveDistributionSpeed(address)": {
        "params": {
          "token_": "Address of the token"
        },
        "returns": {
          "_0": "speed returns the per block reward"
        }
      },
      "initialize(address,address[],uint256[],uint256[],uint256)": {
        "custom:error": "Throw InvalidArguments on different length of tokens and speeds array",
        "details": "Initializes the deployer to owner",
        "params": {
          "accessControlManager_": "AccessControlManager contract address",
          "distributionSpeeds_": "New distribution speeds for tokens",
          "loopsLimit_": "Maximum number of loops allowed in a single transaction",
          "tokens_": "Array of addresses of the tokens"
        }
      },
      "initializeTokens(address[])": {
        "custom:access": "Only Governance",
        "params": {
          "tokens_": "Array of addresses of the tokens to be intialized"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseFundsTransfer()": {
        "custom:access": "Controlled by ACM"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "releaseFunds(address)": {
        "custom:error": "Throw InvalidArguments on Zero address(token)Throw FundsTransferIsPaused is pausedThrow InvalidCaller if the sender is not the Prime contract",
        "custom:event": "Emits TokenTransferredToPrime event",
        "params": {
          "token_": "The token to release to the Prime contract"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resumeFundsTransfer()": {
        "custom:access": "Controlled by ACM"
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setMaxLoopsLimit(uint256)": {
        "custom:access": "Controlled by ACM",
        "custom:event": "Emits MaxLoopsLimitUpdated event on success",
        "params": {
          "loopsLimit": "Limit for the max loops can execute at a time"
        }
      },
      "setMaxTokensDistributionSpeed(address[],uint256[])": {
        "custom:access": "Controlled by ACM",
        "custom:error": "Throw InvalidArguments on different length of tokens and speeds array",
        "params": {
          "maxDistributionSpeeds_": "New distribution speeds for tokens",
          "tokens_": "Array of addresses of the tokens"
        }
      },
      "setPrimeToken(address)": {
        "custom:access": "Only owner",
        "custom:event": "Emits PrimeTokenUpdated event",
        "params": {
          "prime_": "The new address of the prime token contract"
        }
      },
      "setTokensDistributionSpeed(address[],uint256[])": {
        "custom:access": "Controlled by ACM",
        "custom:error": "Throw InvalidArguments on different length of tokens and speeds array",
        "params": {
          "distributionSpeeds_": "New distribution speeds for tokens",
          "tokens_": "Array of addresses of the tokens"
        }
      },
      "sweepToken(address,address,uint256)": {
        "custom:access": "Only Governance",
        "custom:error": "Throw InsufficientBalance if amount_ is greater than the available balance of the token in the contract",
        "custom:event": "Emits SweepToken event",
        "params": {
          "amount_": "The amount of tokens needs to transfer",
          "to_": "The address of the recipient",
          "token_": "The address of the ERC-20 token to sweep"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain."
      }
    },
    "title": "PrimeLiquidityProvider",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressesMustDiffer()": [
        {
          "notice": "Error thrown when argument value in setter is same as previous value"
        }
      ],
      "FundsTransferIsPaused()": [
        {
          "notice": "Error thrown when funds transfer is paused"
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "notice": "Error thrown when PrimeLiquidityProvider's balance is less than sweep amount"
        }
      ],
      "InvalidArguments()": [
        {
          "notice": "Thrown when arguments are passed are invalid"
        }
      ],
      "InvalidCaller()": [
        {
          "notice": "Thrown when caller is not the desired caller"
        }
      ],
      "InvalidDistributionSpeed(uint256,uint256)": [
        {
          "notice": "Thrown when distribution speed is greater than maxTokenDistributionSpeeds[tokenAddress]"
        }
      ],
      "MaxLoopsLimitExceeded(uint256,uint256)": [
        {
          "notice": "Thrown an error on maxLoopsLimit exceeds for any loop"
        }
      ],
      "TokenAlreadyInitialized(address)": [
        {
          "notice": "Thrown when token is initialized"
        }
      ],
      "TokenNotInitialized(address)": [
        {
          "notice": "Error thrown when interest accrue is called for not initialized token"
        }
      ],
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ]
    },
    "events": {
      "MaxLoopsLimitUpdated(uint256,uint256)": {
        "notice": "Emitted when max loops limit is set"
      },
      "MaxTokenDistributionSpeedUpdated(address,uint256,uint256)": {
        "notice": "Emitted when a new max distribution speed for token is set"
      },
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      },
      "PrimeTokenUpdated(address,address)": {
        "notice": "Emitted when prime token contract address is changed"
      },
      "SweepToken(address,address,uint256)": {
        "notice": "Emitted on sweep token success"
      },
      "TokenDistributionInitialized(address)": {
        "notice": "Emitted when a token distribution is initialized"
      },
      "TokenDistributionSpeedUpdated(address,uint256,uint256)": {
        "notice": "Emitted when a new token distribution speed is set"
      },
      "TokenTransferredToPrime(address,uint256)": {
        "notice": "Emitted when token is transferred to the prime contract"
      },
      "TokensAccrued(address,uint256)": {
        "notice": "Emitted when distribution state(Index and block) is updated"
      }
    },
    "kind": "user",
    "methods": {
      "DEFAULT_MAX_DISTRIBUTION_SPEED()": {
        "notice": "The default max token distribution speed"
      },
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "accrueTokens(address)": {
        "notice": "Accrue token by updating the distribution state"
      },
      "getBlockNumber()": {
        "notice": "Get the latest block number"
      },
      "getEffectiveDistributionSpeed(address)": {
        "notice": "Get rewards per block for token"
      },
      "initialize(address,address[],uint256[],uint256[],uint256)": {
        "notice": "PrimeLiquidityProvider initializer"
      },
      "initializeTokens(address[])": {
        "notice": "Initialize the distribution of the token"
      },
      "lastAccruedBlock(address)": {
        "notice": "The rate at which token is distributed to the Prime contract"
      },
      "maxTokenDistributionSpeeds(address)": {
        "notice": "The max token distribution speed for token"
      },
      "pauseFundsTransfer()": {
        "notice": "Pause fund transfer of tokens to Prime contract"
      },
      "prime()": {
        "notice": "Address of the Prime contract"
      },
      "releaseFunds(address)": {
        "notice": "Claim all the token accrued till last block"
      },
      "resumeFundsTransfer()": {
        "notice": "Resume fund transfer of tokens to Prime contract"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "setMaxLoopsLimit(uint256)": {
        "notice": "Set the limit for the loops can iterate to avoid the DOS"
      },
      "setMaxTokensDistributionSpeed(address[],uint256[])": {
        "notice": "Set max distribution speed for token (amount of maximum token distribute per block)"
      },
      "setPrimeToken(address)": {
        "notice": "Set the prime token contract address"
      },
      "setTokensDistributionSpeed(address[],uint256[])": {
        "notice": "Set distribution speed (amount of token distribute per block)"
      },
      "sweepToken(address,address,uint256)": {
        "notice": "A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to user"
      },
      "tokenAmountAccrued(address)": {
        "notice": "The token accrued but not yet transferred to prime contract"
      },
      "tokenDistributionSpeeds(address)": {
        "notice": "The rate at which token is distributed (per block)"
      }
    },
    "notice": "PrimeLiquidityProvider is used to fund Prime",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1503,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3132,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IAccessControlManagerV8)3316"
      },
      {
        "astId": 3137,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 427,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 532,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3321,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "maxLoopsLimit",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 3326,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8742,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "prime",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 8747,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "tokenDistributionSpeeds",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8752,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "maxTokenDistributionSpeeds",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8757,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "lastAccruedBlock",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8762,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "tokenAmountAccrued",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8767,
        "contract": "contracts/Tokens/Prime/PrimeLiquidityProvider.sol:PrimeLiquidityProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)3316": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
