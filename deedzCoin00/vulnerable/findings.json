{
  "description": {
    "project_name": "DeedzCoin",
    "compiler_versions": ["0.8.19"]
  },
  "findings": [
    {
      "title": "Arithmetic",
      "reported_impact": "Critical",
      "reported_likelihood": "Critical",
      "cwe_classification": 682,
      "vulnerability_class": "Arithmetic",
      "vulnerability_subclass": "Arithmetic Error",
      "vulnerable_functions": ["DeedzCoin::_transferSupplierRole()"],
      "lines": "207-217",
      "description": "The _transferSupplierRole() function in the provided code snippet has an unwanted balance allocation order, resulting in a critical failure. The balance of the old Provider is transferred to the new Provider, but immediately afterward, the new balance of the new Provider is overwritten by an arithmetic operation. Specifically, the function mistakenly sets the balance of the newProvider to safeAdd(balanceOf(oldSupplier)"
    },
    {
      "title": "Redundant Balance Mapping",
      "reported_impact": "Medium",
      "reported_likelihood": "Medium",
      "cwe_classification": 0,
      "vulnerability_class": "Best Practices",
      "vulnerability_subclass": "Data Inconsistency",
      "vulnerable_functions": ["DeedzCoin::"],
      "lines": "40",
      "description": "The DeedzCoin smart contract introduces a public mapping named balances to store the balance of tokens for each address. This is redundant as the contract inherits from the ERC20 contract, which already provides a function named balanceOf() to retrieve an address's balance and maintains a private mapping _balances to store token balances for addresses. Moreover, the contract does not override or update the functions (transfer, transferFrom) from the ERC20, which means, when those functions are called, only the _balances mapping from the ERC20 will be updated, and not the balances mapping of the DeedzCoin contract. This could lead to major inconsistencies in the token balance data."
    },
    {
      "title": "No Zero Address Validation",
      "reported_impact": "Low",
      "reported_likelihood": "Low",
      "cwe_classification": 20,
      "vulnerability_class": "Validation",
      "vulnerability_subclass": "Missing Zero Address Validation",
      "vulnerable_functions": ["DeedzCoin::setSupplier()"],
      "lines": "165-167",
      "description": "No zero address validation"
    }
  ]
}
